<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>T45K</title>
    <link>https://t45k.github.io/</link>
    <description>Recent content on T45K</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 06 Aug 2024 22:44:20 +0900</lastBuildDate>
    <atom:link href="https://t45k.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「単体テストの考え方/使い方」読了</title>
      <link>https://t45k.github.io/blog/unit_testing_principles_practices_and_patterns/</link>
      <pubDate>Tue, 06 Aug 2024 22:44:20 +0900</pubDate>
      <guid>https://t45k.github.io/blog/unit_testing_principles_practices_and_patterns/</guid>
      <description>単体テストの考え方/使い方を読んだのでその感想。&#xA;単体テストの考え方/使い方 プロジェクトの持続可能な成長を実現するための戦略 [ Vladimir Khorikov ]&#xA;価格：4,488円（税込、送料無料) (2024/8/6時点)&#xA;楽天で購入 単体テストを中心に扱った本を読んだのは初めてだったのですが、 単体テストを用いてプロダクションコードを価値あるものにすることについて終始述べられていて良かったです。&#xA;単体テストは&#xA;実行時間が十分に短く かつ、テストの実行は隔離されている（=容易に並列実行できる） ものとして定義されています。&#xA;単体テストの実行方式はよくロンドン学派と古典学派に分類され、 後者は積極的にモックを使う、くらいの説明に留められていることが多いのですが、 これに関しても十分な説明がありました。&#xA;曰く、古典学派は単体の範囲をテストを実行するプロダクションコードの範囲と定め、 それ以外の部分はモックする、 ロンドン学派は単体の範囲をそれぞれのテストと定め、 DBといったテスト間で共有されうる依存に関してのみモックを使う、という定義をされていました。&#xA;ロンドン学派は単体テストでDBを扱うものだと思っていたので、この定義は初めて知りました。&#xA;また、テストしやすいアーキテクチャとして、 最初にクエリを行い、最後にコマンドを行う順番を推奨しており、 具体的に関数型アーキテクチャやヘキサゴナルアーキテクチャが紹介されていたのが良かったです。&#xA;スタブとモックの違いや、スタブ（クエリ）は検証しない、モック（コマンド）はするなどの説明は腹落ちしました。&#xA;本書では一貫して、&#xA;単体テストはリファクタリングに対する耐性を兼ね備えてなければならない そのために、単体テストは振る舞いをテストするべき を柱にしていたので良かったなと思いました。</description>
    </item>
    <item>
      <title>「継続的デリバリーのソフトウェア工学」読了</title>
      <link>https://t45k.github.io/blog/modern_software_engineering/</link>
      <pubDate>Tue, 25 Jun 2024 21:16:17 +0900</pubDate>
      <guid>https://t45k.github.io/blog/modern_software_engineering/</guid>
      <description>継続的デリバリーのソフトウェア工学（英題: Modern Software Engineering）を読んだ。&#xA;継続的デリバリーのソフトウェア工学　もっと早く、もっと良いソフトウェアを作るための秘訣 [ David Farley ]&#xA;価格：3,190円（税込、送料無料) (2024/6/25時点)&#xA;楽天で購入 ソフトウェア開発 本書ではソフトウェア開発の効果的かつ効率的な方法を探求していく。&#xA;より良いソフトウェア開発を行うために、開発者は「学びのエキスパート」かつ 「複雑さ管理のエキスパート」になるべき、と述べている。&#xA;学びのエキスパートになるためには、実験 → フィードバック → 実験 → &amp;hellip; のループを 高速で回すことが重要になる。&#xA;複雑さ管理のエキスパートになるためには&#xA;モジュラー性 抽象化 疎結合 の実現が不可欠になる。&#xA;そして、上記の要素を達成するために&#xA;テスト可能性 デプロイ可能性 スピード 変数の管理 継続的デリバリー が重要になる。&#xA;ソフトウェア工学 本書では、ソフトウェア開発は工学的に行われるべきだと述べられている。&#xA;これは、いわゆる工芸品のような、職人の一品物ではないということである。&#xA;また、科学のように厳密性を追求するのではなく、 あくまで開発に役立つプラクティスを追い求めるべき、ということでもある。&#xA;一方で、建築物のような製造工学に近い物ではなく、設計工学になるべきとも述べられている。&#xA;ソフトウェア開発が製造工学と違う点は、ソフトウェア開発は繰り返し作り直すことが容易である点である。&#xA;建築物は一度作ると作り直しが効かないため、事前の設計を念入りにやったうえで開発に入る。&#xA;一方で、ソフトウェアにおいてコードの書き直しは容易であるため、 設計 → 実装 → デプロイのループを早め、知見を得ることが重要になる。&#xA;上記のループがどの程度うまく行っているかを計る指標がFour Keysである。&#xA;学びの最適化 フィードバックを早く得られるようにする。&#xA;設計に対するフィードバック、実装に対するフィードバック、&amp;hellip;&#xA;小さく作って頻繁にマージ。&#xA;複雑さ管理の最適化 TDDでテスト可能性を確保し、モジュラー性を進める。&#xA;関心の分離。本質的な複雑さと付随的な複雑さ（ドメインの複雑さと技術的な複雑さ）を分離する。&#xA;運用に関わる変数の数を少なくして、デプロイを安定的にする。&#xA;感想 「ソフトウェア工学」とあったので多少学術的な内容を期待していたが、良い意味で裏切られた。&#xA;内容は「素早いフィードバックサイクルで効率的に学びましょう」と 「ソフトウェアの複雑さを管理しましょう」で、前者にスポットライトが当たっているのが斬新な気がする。&#xA;複雑さ管理には疎結合高凝集、それを達成するためのTDDと割と古典的な内容だったが、 デプロイ可能性を常に保ち、それを持って継続的デリバリーを実践していく的な部分は面白かった。</description>
    </item>
    <item>
      <title>Kotlin Fest 2024に参加・登壇した話</title>
      <link>https://t45k.github.io/blog/kotlin_fest_2024/</link>
      <pubDate>Sun, 23 Jun 2024 22:54:46 +0900</pubDate>
      <guid>https://t45k.github.io/blog/kotlin_fest_2024/</guid>
      <description>2024年6月22日に開催されたKotlin Fest 2024に参加・登壇してきました。&#xA;Kotlin Fest https://www.kotlinfest.dev/&#xA;Kotlin Festは「Kotlinを愛でる」をビジョンに開催されるカンファレンスです。&#xA;今回は4回目の開催であり、5年ぶりのオフライン開催になりました。&#xA;100以上のプロポーザルがあったことから、国内での注目度が伺えます。&#xA;登壇内容 「withContextってスレッド切り替え以外にも使えるって知ってた？」というタイトルで登壇しました。&#xA;https://fortee.jp/kotlin-fest-2024/proposal/d3105065-ee4e-4a7b-be92-3aae10ab6c01&#xA;CoroutineContextとwithContextを活用することで、Kotlinでコンテキスト変数を扱う方法や、 実際の利用例について紹介しました。&#xA;業務で思いつきでやったことが、こうやって登壇機会にまで結びついて良かったな、という感想です。&#xA;「知らなかった」「勉強になった」などの感想をいただけ、励みになりました。&#xA;一方で、自身の登壇の仕方には反省すべき点がいくつかあったなと思っています。&#xA;一番はタイムマネージメントが全然できておらず、最終的に時間が足りなくなってしまったことです。&#xA;次回このような機会があれば、資料作成を早めに終わらせ、発表練習に時間を割きたいです。&#xA;スライドはこちら。&#xA;セッション内容 今回様々なセッションを聴講しましたので、それぞれについて軽く感想を書きたいと思います。&#xA;KotlinConf 2024 を後から256倍楽しむためのヒント JetBrainsの堀岡さんの招待セッションです。&#xA;少し前に開催されたKotlin Confのサマリや、そもそもどうやって海外カンファレンスを楽しむか、 要約するかについて紹介していただきました。&#xA;Kotlin Confはビデオが提供されていて、全ては見れていないのですが、 タイトル一覧を紹介していただき、中には興味深いものがあったので、 あとで確認しようと思いました。&#xA;Server-Side Kotlin Meetupもよろしくお願いします！ #kotlinfest&#xA;&amp;mdash; task (@getupmax) June 22, 2024 Kotlinで愉しむクリエイティブコーディング 畠山さんのセッションです。&#xA;クリエイティブコーディングについて何も知らなかったのですが、 コーディングで作曲や絵を描いたりする行為だそうです。&#xA;今回は、Kotlinで書かれたOPENRNDRというライブラリを使ってのクリエイティブコーディングを 紹介いただけました。&#xA;コードに書いた通りに、一定の規則を持って物体が移動することで面白い絵や動画が完成していき、 とても興味深かったです。&#xA;視覚的なフィードバックをすぐに得られるので、確かに初心者向けのコーディングにも良いなと思いました。&#xA;君だけのノイズ関数を作ろう！ #kotlinfest #A&#xA;&amp;mdash; task (@getupmax) June 22, 2024 2024年版 Kotlin サーバーサイドプログラミング実践開発 「Kotlin サーバーサイドプログラミング実践開発」の著者である竹端さんのセッションです。&#xA;著書が書かれた時点と現在を比較し、現在の流行の構成のサーバーサイドKotlin構成を考察するという内容です。&#xA;フレームワークにKtor、DIにKoin、DBアクセスにjOOQ、テストフレームワークにKotestという結論でした。&#xA;Ktor、Koinは面白そうと思いつつ、Spring Bootと違って個人が管理することが増えそうなので、 難易度は増すかもな&amp;hellip;という感想でした。</description>
    </item>
    <item>
      <title>「データモデリングでドメインを駆動する」読了</title>
      <link>https://t45k.github.io/blog/drive_domain_by_data_modeling/</link>
      <pubDate>Thu, 23 May 2024 00:48:17 +0900</pubDate>
      <guid>https://t45k.github.io/blog/drive_domain_by_data_modeling/</guid>
      <description>杉本さん著の「データモデリングでドメインを駆動する」を読んだ。&#xA;サブタイトルとして「基幹系システム」が含まれているが、 そもそも基幹系システムが何か分からない状態で読み始めたので、 そこからキャッチアップできて良かった。&#xA;（基幹系システムは、本当にビジネスを回すための一点もの？のシステムなんだなぁという理解）&#xA;他の技術書と違って、ビジネスそのものに突っ込んだ内容が多いのが面白かった。&#xA;「残」の話や、そこを起点に非同期なシステム構築などは、CQRSに通じるところがあるかもと思いながら読んでた。 その他、SoAとSoMの話など。&#xA;特定のドメインに着目して、ビジネス理解からそれを設計に繋げる方法までを書いた本は初めてだったので新鮮で良かった。&#xA;（難しい部分は読み飛ばしたので浅い感想しか出て来ないのが残念）&#xA;データモデリングでドメインを駆動する──分散／疎結合な基幹系システムに向けて [ 杉本 啓 ]&#xA;価格：3,740円（税込、送料無料) (2024/5/23時点)&#xA;楽天で購入 </description>
    </item>
    <item>
      <title>ベトナムに出張に行った話</title>
      <link>https://t45k.github.io/blog/vietnam/</link>
      <pubDate>Sun, 28 Apr 2024 17:27:26 +0900</pubDate>
      <guid>https://t45k.github.io/blog/vietnam/</guid>
      <description>現在勤めている会社のグループ会社がベトナムにあり、 10日ほど出張で行かせてもらったので、感想を書き留めておく。&#xA;気候 4月の時点で30℃越えで暑かった。 今回行ったのが、ベトナム北部のハノイなので気温はまだマシ（冬場は10℃台になる）らしいが、 南部のホーチミンは常に暑いらしい。&#xA;一方で常に曇り（もしくは大気汚染の影響）で、直射日光に当たることはあまりなかった。&#xA;交通 公共交通機関があまり発達していないので、移動は主にGrab（東南アジアのUber）を利用した。&#xA;噂に聞いていた通り、交通量、特にバイクの数がすごく多く、 さらに交通ルールを守らない（信号無視、逆走、歩行者通行中の走行）車両が多かったため、 普通に歩くのも一苦労だった。&#xA;到着した時は「命がいくつあっても足りないな」と思った。&#xA;食事 全体的にあっさりした味付けのものが多かったと思う。&#xA;米食中心の食文化であり、特に米粉から作られた麺料理を多く食べた。&#xA;言わずと知れたフォー&#xA;つけ麺のブンチャー&#xA;ブンチャーに似た何か&#xA;サンドイッチのバインミー&#xA;謎のホルモン入りお粥&#xA;どれも美味しい上に安い（50K VND ≒ 300円ほど）。&#xA;酒 ビールも種類が多い上に安かった（1缶12K VND ≒ 70円ほど）&#xA;味としては薄いものが多く、暑い日にごくごく飲むのが良さそうという感想だった。&#xA;氷を入れて飲むことも多いのも特徴的だった。&#xA;ローカルなレストランで飲めるビール。60円くらい。世界で一番安いらしい&#xA;その他、ハウスワインを作っている人も多い。&#xA;ハウスワインはワインの名を関しているがワインではなく、米焼酎に果物を漬け込んで作る、 梅酒などに近い飲み物。&#xA;コーヒー ベトナムでもコーヒー文化が根付いていて、食後に飲んでいる人が多かった印象。&#xA;ベトナムのコーヒーは苦めなので、牛乳と砂糖が入った甘くて飲みやすいものが人気があった。&#xA;また、エッグコーヒーというのもあり、こちらは新体験だった（本当に卵が入っている）。&#xA;エッグコーヒー&#xA;人々 観測範囲で&#xA;朝早くから働く人が多い。暑いからかな ちゃんと帰宅時間は守る ビリヤードが好きでオフィスにあった 昼食をとったあとのんびり過ごす人が多い ホスピタリティが高い。食事代は全て出してもらったし、休みの日にも観光案内してもらった 酒が好きな人が多い。良い話だ </description>
    </item>
    <item>
      <title>佐賀までツーリングした話</title>
      <link>https://t45k.github.io/blog/saga_touring/</link>
      <pubDate>Sat, 23 Mar 2024 22:00:13 +0900</pubDate>
      <guid>https://t45k.github.io/blog/saga_touring/</guid>
      <description>西日本編はこちら&#xA;東日本編はこちら&#xA;3/20（水）が祝日だったので、月火で有給を取って佐賀までバイクで行って帰ってきた。&#xA;一日目 3/17（日）&#xA;ひとまず山口の湯田温泉に向かって出発&#xA;岡山で途中下車し笠岡ラーメンを食べようとするも、お目当ての店は休みだったため、近所にあった「いではら」に行った。&#xA;当初そのまま下道で海沿いを通って山口に向かう予定だったが、途中で雨が降ってきたため、予定を変更して高速で移動。&#xA;宿泊は湯田温泉のホテルで。&#xA;晩飯はいつものごとく近所のスーパーで買った地の魚を中心に食べる。&#xA;スーパーに限定の東洋美人があったので、初日なのにお土産に買う。&#xA;二日目 3/18（月）&#xA;佐賀に向かう。&#xA;途中、本州最北端の毘沙ノ鼻に寄る。&#xA;これで本州は西南北の最端を制覇。&#xA;そのまま高速で佐賀に移動。&#xA;お昼ご飯は河太郎で呼子のイカを食べる。&#xA;このイカ、新鮮で臭みもネチャネチャした食感もなく、肉厚で弾力を甘味を楽しめた。 満足。&#xA;そのまま嬉野温泉に移動。&#xA;晩飯は温泉湯豆腐を食べに行く。&#xA;この湯豆腐、美味しんぼで紹介されていて昔から気になっていた。&#xA;汁にうっすらと味がついており美味しかった。&#xA;三日目 3/19（火）&#xA;久留米が近かったので、大砲ラーメンを食べに行く。&#xA;有名店なので開店凸してもしばらく待つかな、と思ったが、開店が10:30と早いこともありすんなり入れる。&#xA;しっかり美味しいとんこつラーメンだった。&#xA;そのまま、関門トンネルを通り山口の長門湯本温泉へ。&#xA;当初は広島の宮浜温泉に行く予定だったのだが、祝日前ということもあり予約を取り損ねた。&#xA;温泉地自体は川沿いで風情があり良かった。&#xA;晩飯はいつものごとく。&#xA;四日目 3/20（水）&#xA;この日はこのまま出雲大社に寄ってから帰阪する予定だったが、大幅に予定が狂うことになる。&#xA;日本海側を通って下道で出雲大社に向かっていたのだが、どうも風が強い。&#xA;当初台風が来たのかななんて考えていたが、道の駅で休憩している間に天気予報を確認したところ、暴風警報が出ていた。&#xA;やけに風強いな思たらなんやこれ pic.twitter.com/8XWVpAV4Qp&#xA;&amp;mdash; task (@getupmax) March 19, 2024 そんなこんなで、こまめに休憩しながら出雲に向かった影響で、2時間近く予定から遅れてしまい、昼飯を食べ損ねた。&#xA;参拝も終わり、お土産も買って大阪に向かって出発したのだが、今度は雪が降ってきて、高速道路がチェーン規制されてしまった。&#xA;エグ&#xA;これの影響で高速下ろされた pic.twitter.com/MTL3SOW5rh&#xA;&amp;mdash; task (@getupmax) March 20, 2024 もちろんバイクでチェーンは履けないので、江府（鳥取）で下車させられてしまった&#xA;え、今日帰れるんかな pic.twitter.com/1B5dxQDhFs&#xA;&amp;mdash; task (@getupmax) March 20, 2024 翌日は仕事があるので下道で帰ろうとするも、どうしても山越をしないと行けない + 山道はガッツリ雪が積もっていたので断念。&#xA;絶望しながら近所で宿を探したところ、東横INNが見つかったため、米子まで戻って追加で一泊する。</description>
    </item>
    <item>
      <title>「仮面ライダー555 パラダイス・リゲインド」を観た話</title>
      <link>https://t45k.github.io/blog/555_movie/</link>
      <pubDate>Sun, 25 Feb 2024 00:29:15 +0900</pubDate>
      <guid>https://t45k.github.io/blog/555_movie/</guid>
      <description>仮面ライダー555の20周年記念劇場版を観た。&#xA;https://www.toei-video.co.jp/55520th/&#xA;以下ネタバレあり感想&#xA;良かったところ 20年ぶりの仮面ライダー555&#xA;子供の頃の記憶が蘇った（去年YouTubeでやってた一挙放送は見たが） 新ライダーの造形が格好良かった&#xA;ネクストファイズ、ネクストカイザ、ミューズ 古い方のファイズも出てきた 歳をとった巧の渋さ 真里がオルフェノク化する意外性のある展開 海堂がちゃんと海堂だった 草加の顔芸 良くなかったところ キャストが歳をとっている&#xA;結残念だった。月日の流れは無常 北崎、草加がアンドロイドだったという、悪い方に意外性のある展開 アンドロイドなのに変身できるという謎 謎の濡れ場シーン（？）&#xA;あれは必要だったのか 北崎が出てる以上琢磨も出して欲しかった。あと三原 巧が最初スマートブレイン側についていた理由がいまいち不明 どうしようもないことだが、やっぱり木場がいないと始まらない感 オルフェノクとして匿われているのに、スマートブレインに情報を売る味方 総合的には別に見なくても&amp;hellip;という感想。</description>
    </item>
    <item>
      <title>2023年の振り返り</title>
      <link>https://t45k.github.io/blog/retrospective_2023/</link>
      <pubDate>Tue, 02 Jan 2024 23:25:57 +0900</pubDate>
      <guid>https://t45k.github.io/blog/retrospective_2023/</guid>
      <description>2023年を振り返る。&#xA;総評 楽天を辞めてマネーフォワードに転職した。&#xA;マネフォは技術力が高い人が多い環境で、楽しく仕事ができた。&#xA;チームメンバーとも仲良くできて良い1年間だった。&#xA;仕事 1月 &amp;ndash; 3月 1月に上の方から、エンジニアも楽天モバイルの契約をとることが必須になったとのお達しが来て、転職を決意する。 ひとまず大阪でバックエンドでKotlinが書ける職種を探していたところ、マネフォが引っかかる。 向こうからカジュ面のお誘いが来たのでやらせてもらい、そのまま面接に進んだ。 ぬるっと内定をもらい、ボーナスの都合で7月からのジョインで着地。&#xA;一方前職では、内定者アルバイトの子がチームに加わったため、メンターとしても仕事していた。 とても良い子で、すごく仲良くしてもらったこともあり、楽しく過ごす。&#xA;4月 &amp;ndash; 6月 上述の件もあり、仲良かった同期や後輩が次々と辞めていく。 内定者アルバイトの子も入社し、6月から配属とのことだったので、面倒を見れるように5月中に有給を使い切る。 お別れ会がめちゃくちゃ多かった期間。&#xA;JJUGで登壇する。 初外部登壇。&#xA;7月 &amp;ndash; 9月 マネフォにジョイン。 コードのレベルや社内の手続きの簡単さにびっくりする。&#xA;色々新しい技術を触る。キャッチアップの難しさを知る。 ライブラリの都合で上げられていなかったKotlinのバージョンを上げたり、CIのコストを下げたりしていた。&#xA;9月にメンターの先輩が休職され一人で仕事をすることになったが、ドメインを理解しきれていなかったのでとても苦労した。&#xA;上司に唆され、サーバサイドKotlin勉強会で登壇する。&#xA;10月 &amp;ndash; 12月 ドメインやコード全体が分かってきたので、一人で仕事を進められるようになる。&#xA;人生初アドカレに参加する。&#xA;人間関係 転職してしまったが、前職のメンバーとは定期的に飲み会する機会があり、なんだかんだ交流が続いている。&#xA;現職では、チームメンバーで出社する人が多いため、終業後飲みに行ったり、サウナに行ったりでチームに良い感じに溶け込めた気がする。&#xA;プログラミング 現職ではSpring WebFluxを使っているので、Kotlin Coroutinや非同期周りの造形が深まった。&#xA;また、Springのキャッチアップも積極的に行うようになり、バグ修正パッチを投げたりした。&#xA;Advent of code完走できなかったので、今年は頑張りたい。&#xA;飲酒 クラフトビールをよく飲むようになり、クラフトビールバーの選択肢が増えた。&#xA;地酒も継続的に購入した。&#xA;健康 ついに尿酸値が要検査に引っかかったので、家での晩酌をやめた。&#xA;バイク 5日かけて青森大間崎を往復した。&#xA;その他 後輩の影響でMCバトルを見始めた。11月はSPOTLIGHTにも行った ブーツを履き始めた。最初は靴擦れがきつかったけど、今ではお気に入り。 デスクトップが逝った。 </description>
    </item>
    <item>
      <title>ノンアルコールビールを飲み比べた話</title>
      <link>https://t45k.github.io/blog/non_alcohol_beer/</link>
      <pubDate>Mon, 11 Dec 2023 22:59:05 +0900</pubDate>
      <guid>https://t45k.github.io/blog/non_alcohol_beer/</guid>
      <description>健康の問題で酒が飲めない期間が続いたので、良さげなノンアルコールビールを5本買って飲み比べてみた。 備忘録。&#xA;飲み比べ対象 左からバドワイザー、龍馬1865、ヒューガルデン、Bavaria、NINJA LAGER&#xA;バドワイザー 言わずと知れた有名なビールのノンアルコール版。&#xA;オリジナルのバドワイザー自体が薄めの軽いビールなのも相まって、かなり味が軽く飲みやすい。&#xA;本家に近いっちゃ近かった。&#xA;龍馬1865 麦芽とホップ（と炭酸）しか使っていないかなり本格派のノンアル。&#xA;味もかなりビールに近く、飲んでいて満足感があった。&#xA;プリン体ゼロを明記しているのも健康的に嬉しいところ。&#xA;ヒューガルデン 柑橘系の香りなど、オリジナルに近い雰囲気を感じた。&#xA;原料に液糖が含まれているからかかなり甘く、ビールは苦手だけどジュースは好き、みたいな人も美味しく飲めるかもと思った。&#xA;ビールとは違う飲み物だなぁという印象。&#xA;Bavaria 寡聞にして知らないメーカー。オランダ産らしい。&#xA;龍馬1865と同じく麦芽とホップがメインのビールの原料に近いノンアル。&#xA;味もビールに近かったが、ノンアルや発泡酒特有の謎の酸味があった。&#xA;NINJA LAGER こちらも麦芽とホップしか使っていない本格派ノンアル。&#xA;ハラールの認定を受けているのが売りらしい。&#xA;Bavariaに近い味か。&#xA;総評 ビールに近い原料を使っているものは、ノンアルというか発泡酒というか特有の香りと謎の酸味があった。&#xA;普段飲んでいるビールはアルコールがあるからこれらを感じないだけなのかも知れないと思った。&#xA;やはりアルコールがない分飲みごたえは少ないが、満足感はあった。&#xA;ビールに近いものが飲みたければ龍馬1865、飲みやすく美味しいものが良ければヒューガルデンをおすすめする。</description>
    </item>
    <item>
      <title>「なっとく！関数型プログラミング」読了</title>
      <link>https://t45k.github.io/blog/grokking_functional_programming/</link>
      <pubDate>Mon, 09 Oct 2023 23:22:01 +0900</pubDate>
      <guid>https://t45k.github.io/blog/grokking_functional_programming/</guid>
      <description>「なっとく！関数型プログラミング」を読んだ。&#xA;「純粋関数のシグネチャは嘘をつかない」が再三説明されていて良かった。 純粋関数を取り扱ううえで話題になりがちなIO処理なども丁寧に説明されていた。&#xA;9章の「値としてのストリーム」、10章の「並行プログラム」辺りから内容の厚さが段違いになり、 今回は残念なが読み飛ばさせてもらった。&#xA;なっとく！関数型プログラミング [ Michał Płachta ]&#xA;価格：3,740円（税込、送料無料) (2023/10/9時点)&#xA;楽天で購入 </description>
    </item>
    <item>
      <title>マネーフォワードに入社した話</title>
      <link>https://t45k.github.io/blog/welcome_monery_forward/</link>
      <pubDate>Sun, 01 Oct 2023 00:26:09 +0900</pubDate>
      <guid>https://t45k.github.io/blog/welcome_monery_forward/</guid>
      <description>2023年7月付で株式会社マネーフォワードに入社しました。&#xA;試用期間も終わったので色々書きます。&#xA;マネフォ 「お金を前へ。人生をもっと前へ。」をミッションにしている会社です。&#xA;一般ユーザ向けの帳簿管理アプリである「マネーフォワードMe」や法人向けバックオフィスSaaSである「マネーフォワードクラウド」を提供しています。&#xA;なぜマネフォ 元々、大阪でKotlinを書ける仕事を探していました。&#xA;その中にマネーフォワードがあったのですが、個人的にマネーフォワードは技術レベルが高く、 自分では通用しない、という考えがあったのでスルーしていました。&#xA;そんな中で前職で色々あり本格的に転職を考えるのですが、 そのタイミングで真っ先にマネフォがカジュアル面談の声をかけてくださいました。&#xA;話を聞いてみると、マネフォのMVVCにも共感でき、経験がマッチしそうということで応募し、無事採用に至りました。&#xA;何してるの クラウド連結会計の開発、運用をしています。&#xA;連結会計という複雑なドメインを理解してコードに書き下していくのが楽しいです。&#xA;その他、この3ヶ月でCIのコストカット、R2DBCへの移行、および登壇をしました。&#xA;マネフォの良いところ・悪いところ は、カジュアル面談とかで喋れたらな、と思います。</description>
    </item>
    <item>
      <title>サーバーサイドKotlin LT大会 vol.10で登壇した話</title>
      <link>https://t45k.github.io/blog/server_side_kotlin_meetup_10/</link>
      <pubDate>Sat, 30 Sep 2023 22:25:14 +0900</pubDate>
      <guid>https://t45k.github.io/blog/server_side_kotlin_meetup_10/</guid>
      <description>3ヶ月ぶりに登壇しました。 https://server-side-kotlin-meetup.connpass.com/event/291686/&#xA;Server-Side Kotlin Meetup Server-side Kotlin MeetupはサーバサイドKotlinユーザのコミュニティです。&#xA;前職ではそこまでガッツリKotlinをやっていたわけではなかったので知りませんでした。&#xA;現職では、上司が運営の一人をしており、LTの15分枠が埋まらなさそうなので応募して欲しい、と頼まれたことがきっかけでした。&#xA;僕自身も積極的に登壇活動をしたいと思っていたので、良い機会だと思い快諾しました。&#xA;発表内容 「R2DBCを導入しようとした話」というタイトルでLTしました。&#xA;https://speakerdeck.com/t45k/r2dbcwodao-ru-suruhua&#xA;応募時はK2コンパイラをCIで試してみた話をしようとしていたのですが、 タイトル回収締め切りまでにR2DBCへの移行に着手し始め、そっちの方が盛り上がりそうだったのでネタを変えることにしました。&#xA;様々な詰まりポイントがあるせいで締切までに完了の目処が立たず、タイトルを「しようとした（そしてうまくいかなかった）とした、という経緯がありました。&#xA;会場 UZABASEさんのオフィスにお世話になりました。&#xA;UZABASEさんはNewsPicksなどの開発をしている会社です。&#xA;東京駅の真ん前にオフィスがあり、1階はイベントスペースになっているおしゃれなオフィスでした。&#xA;当日 オフラインイベントで、だいたい30名くらいの方がいたと思います。&#xA;開始時に乾杯があり、発表前にお酒を飲むという、本当に気楽なイベントでした。&#xA;他の会社の方々や、同じ会社の違う拠点の方々と交流でき、とても良かったです。&#xA;ぜひ次回も参加したいと思いました。</description>
    </item>
    <item>
      <title>セミを食べた話</title>
      <link>https://t45k.github.io/blog/cicada/</link>
      <pubDate>Sun, 06 Aug 2023 13:47:19 +0900</pubDate>
      <guid>https://t45k.github.io/blog/cicada/</guid>
      <description>虫の画像注意 セミを食べたのでレポ。&#xA;きっかけ この辺の記事、動画を読んで興味を持ったから。&#xA;セミはソフトシェルのうちに食うべし - デイリーポータルZ 今が旬の超美味しいセミをとって食う - ホモサピ 友達にもホモサピのファンがいたため、&#xA;セミの幼虫をとって 家で羽化させて 揚げ物にして食べよう という話になった。&#xA;セミ捕り 今回は成虫ではなく幼虫のセミをターゲットにした。&#xA;一般的にセミの幼虫は夕方から夜にかけて地面から出てきて、木に登り、羽化を行う。&#xA;なので、夕方頃に集合して近所の森や公園などを歩き回った。&#xA;結果として、セミの幼虫は全然見つからず、最終的に一人一匹捕まえるに留まった。&#xA;セミの美味しさに気づいた人達が乱獲しているのかもしれない。&#xA;羽化 セミの幼虫をカーテンに引っ掛けておくと勝手に羽化するのは有名な話である。&#xA;今回は羽化した瞬間のセミを食べることが目的だったので、捕まえた幼虫は全てカーテンに引っ付けておいた。&#xA;しかし、2時間経っても、片方は羽化途中で完全に停止し、もう片方は羽化すらしていないという状態だった。&#xA;終電の都合があったので、今回はその状態で調理に入った。&#xA;調理 市販の唐揚げ粉を使って唐揚げにした（セミだけでは足りないのが分かっていたので、ついでに鶏の唐揚げを作っていた）。&#xA;ただ、残念なことに、エビなどと同じく、セミもかなり淡白な味なのか、濃い味付けの唐揚げ粉に負けてしまっている感じがした。&#xA;総評 「セミを食べる」という貴重な経験をすることはできたが、決して満足がいく内容ではなかった。 次回以降に備えて、以下に注意したいと思う。&#xA;事前にセミが取れそうな場所を調査しておく セミ捕りや羽化に時間がかかるため、余裕を持って行動する。終電は諦める セミの味を生かした調理を行う。素揚げが良さそう </description>
    </item>
    <item>
      <title>「データ指向プログラミング」読了</title>
      <link>https://t45k.github.io/blog/data_oriented_programming/</link>
      <pubDate>Sat, 01 Jul 2023 19:17:51 +0900</pubDate>
      <guid>https://t45k.github.io/blog/data_oriented_programming/</guid>
      <description>データ指向プログラミングを読んだ。&#xA;本書では、データ指向プログラミングと名付けられた、イミュータブルかつ汎用的なデータ構造で表現されたデータと 参照透過かつジェネリックな関数を使ったプログラミング方法を紹介している。&#xA;イミュータブルなデータと参照透過なメソッドを使ったプログラミングは普段から実践しており、 それらを使って柔軟なシステムを構築する方法を紹介している本書にはとても興味があった。 が、内容としてはかなりがっかりした。&#xA;本書では、データを表現するためにクラスではなくマップを使うことを前提において話が進んでいく。 つまり&#xA;data class Hoge(fuga: Int, piyo: String) val hoge = Hoge(0, &amp;#34;&amp;#34;) を&#xA;val hoge = mapOf( &amp;#34;fuga&amp;#34; to 0, &amp;#34;piyo&amp;#34; to &amp;#34;&amp;#34;, ) で書こうという内容だった。 この方法は確かに柔軟になるかもしれないが、静的型付けによる安全性を完全に無視しており、かなりがっかりした。&#xA;書籍内でもこのことについて触れられていて、以下のように紹介されていた。&#xA;OOP DOP 安全性 高い 低い 柔軟性 低い 高い 汎用性 低い 高い これは各要素を&amp;quot;高い&amp;quot;、&amp;ldquo;低い&amp;quot;のboolで表現しているDOPが良さそうに見えるだけで、 点数を付けるとDOPの安全性が-5000億くらいでトータだとOOPの方が良さそうだなと感じた （また、表では触れられていないが、フィールドアクセス時に保管が効かないので、コーディング中のストレスがとんでもないことになりそう）。&#xA;その他の感想:&#xA;+ JSON Schema便利そう&#xA;+ データの（デ）シリアライズが簡単なので、REPLが使いやすいのは良い&#xA;+ 汎用的な関数を作るという考え方は良さそう&#xA;- 複雑なJSON Schemaを書こうとすると辛そう。OOPならSpecificationパターンとか使える&#xA;- 色んなところでJSON Schema Validationが挟まりそう&#xA;- ポリモーフィズムで、実装忘れを静的に検知できないのが辛い&#xA;データ指向プログラミング [ Yehonathan Sharvit ]</description>
    </item>
    <item>
      <title>2年勤めた楽天を退職した話</title>
      <link>https://t45k.github.io/blog/farewell_rakuten/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0900</pubDate>
      <guid>https://t45k.github.io/blog/farewell_rakuten/</guid>
      <description>2023年6月末をもって楽天グループ株式会社（大阪支社）を退職する運びとなりました。 2021年4月に新卒として入社したので、2年3ヶ月在籍したことになります。&#xA;なぜ入社したか 学生の時に参加したインターンが楽しかったというのが最大の理由です。&#xA;また、日本最大級のサービスを提供している、英語で仕事できるという点に面白みを感じましたし、 カフェテリアが無料というのも魅力的でした。&#xA;どんな会社だったか 技術 大小様々なサービスを展開しているので、大規模なサービスで専門的なスキルをつけることも、 比較的小規模なサービスでフロントからインフラまでフルスタックで面倒を見ることも選択できます。&#xA;新しいサービスが立ち上がることも少なくないので、立ち上げから関わることもできます。&#xA;また、楽天はプライベートクラウド1を持っているため、クラウドの運用側を覗けるのも大企業ならではの面白さではと思います。 パブリッククラウドと比較して格安で使えるので、実際に動かしながらk8sを学ぶこともできます。&#xA;人材 多様な国籍の人達と働けます。 外国人と雑談し、お互いのバックグラウンドを理解し合うのは面白かったです。&#xA;外国人特有の飲み会の騒がしさも好きでした。&#xA;福利厚生 結構充実していると思います。&#xA;何といっても、カフェテリアが朝昼晩無料で利用できるのは強いと感じました。&#xA;また、二子玉川の本社だと、ジムや託児所も備え付けられているそうです。&#xA;現在、週3回程度の出社が義務付けられていますが、僕は顔を合わせて仕事をするのが好きなので、これは歓迎でした （もちろん、家族や健康などの理由があると出社は免除されます）。&#xA;何をしたか 楽天Carというサービスを担当していました。&#xA;新機能の実装だけでなく、CIの導入、オンプレからk8sへの移行など幅広くやっていました。&#xA;その他、短期インターンのメンターをしたり、 社内LTに参加したり、登壇したりもできました。&#xA;また、この職場でSpock2を知ることができたのはとても良かったです。&#xA;むすび 楽天では良い上司、先輩、同期、後輩に恵まれました。この場を借りてお礼申し上げます。 僕は人間関係の大部分が会社に依存しているので、退職はシンプルに寂しいです。&#xA;この2年間で幅広くチャレンジさせてもらえて、様々なことを学べました。 ファーストキャリアに楽天を選んで良かったなと思います。&#xA;次のキャリアでは、エンジニアの実力を伸ばすことに注力できる環境でチャレンジしていきます。&#xA;最後に、楽天モバイルの成功を心からお祈りしております。&#xA;https://xtech.nikkei.com/atcl/nxt/column/18/00001/07478/&amp;#160;&amp;#x21a9;&amp;#xfe0e;&#xA;https://spockframework.org/&amp;#160;&amp;#x21a9;&amp;#xfe0e;</description>
    </item>
    <item>
      <title>JJUG CCC 2023 Springで登壇した話</title>
      <link>https://t45k.github.io/blog/jjug_ccc_2023_spring/</link>
      <pubDate>Mon, 05 Jun 2023 19:48:46 +0900</pubDate>
      <guid>https://t45k.github.io/blog/jjug_ccc_2023_spring/</guid>
      <description>2023年6月4日日曜日に開催されたJJUG CCC 2023 Springで人生初の登壇をしてきました！ めっちゃ緊張した&amp;hellip;&#xA;写真はもらったノベルティの数々。&#xA;JJUGとは https://t45k.github.io/blog/jjug_ccc_2022_fall/&#xA;登壇 業務改善のためにJenkinsとIntelliJのプラグインを作った話をしました。 JenkinsとIntelliJは共にJavaで作られているので、JJUG CCCの目的に沿ったものだと考えます。&#xA;当日はミーティングルームABCという狭めの部屋で発表したのですが、その分聴講されている方との距離が近かったと感じました。 発表中に笑いが起きたり、活発に質疑が行えたりして、初めての発表の環境として良かったなぁと思います。&#xA;登壇資料は、会社のSlideShareに上げてあります。&#xA;https://www.slideshare.net/rakutentech/jenkinsintellij-idea&#xA;余談ですが、僕の登壇は会社の方には知られていなかったようです。&#xA;俺の登壇、会社に認知されてへんくて草&#xA;&amp;mdash; task (@getupmax) June 4, 2023 弊社のブース 他の方のセッションを聴講していたので、合間合間に弊社のブースに居座っていました。&#xA;こんにちは、楽天採用情報部です。&#xA;JJUG CCC 2023 Springは本日開催です！&#xA;本日はブースを出しておりますので現地でお買いものパンダと共にお待ちしております。&#xA;現地にいらっしゃることができない方は、是非記事をご覧ください。&#xA;https://t.co/HXrvahCBs0#jjug_ccc #rakuten #java #engineer&#xA;&amp;mdash; 楽天採用情報（C&amp;amp;Mカンパニー開発部門） (@rhack_commerce) June 4, 2023 山本ユースケさんや岸田さんなど有名な方々にも立ち寄っていただけました。 ありがとうございます。&#xA;楽天お買い物パンダと握手できるのは #jjug_ccc だけ！ pic.twitter.com/kvqyF3kblB&#xA;&amp;mdash; 山本ユースケ (@yusuke) June 4, 2023 その他 今回、オフラインのJJUGには初参加なのですが、いろんな企業さんがブーススポンサーとして参加されていました。&#xA;GMOさんはクイズを企画されていました。 普段業務では意識しないような細かめの知識を問うような問題を出されており、大変賑わっていました。 また、JAVAティーをいただきました。 ありがとうございました。&#xA;サムライズムさんもいらっしゃいました。 個人的にサムライズムさんが開発されたCIcloneにとても感銘を受けており、その話をできました。 また、IntelliJ IDEAとKotlinのステッカーをいただきました。 ありがとうございました。&#xA;他の方のセッションも聴講しました。 印象に残ったのはEdson Yanagaさんの&amp;quot;Revisiting Design Patterns after 20&amp;quot;です。 YanagaさんはGoogleに勤めているJava Championの方です。 セッションは、シンプルなテーマながらも深い知識に裏付けされた説得力があり、終始驚きに満ちていました。 また、英語での発表でしたが、ゆっくり喋っていただけたので、置いてけぼりになることはありませんでした。</description>
    </item>
    <item>
      <title>東日本近似的一周旅行に行った話</title>
      <link>https://t45k.github.io/blog/east_japan_touring/</link>
      <pubDate>Tue, 16 May 2023 16:19:38 +0900</pubDate>
      <guid>https://t45k.github.io/blog/east_japan_touring/</guid>
      <description>西日本編はこちら&#xA;まとまった休みを取ったので、一週間半くらいかけ本州最北端である大間崎までバイクで行って帰ってた。 最終的に五日間で2,600km走った。&#xA;一日目 出発。とりあえず行きは日本海側から向かうことにした。&#xA;昼は金沢の金沢まいもん寿司で高いセットを食べた。&#xA;石浦神社に安全を祈願しに行った。&#xA;そのまま高速で北上して富山の宇奈月温泉へ。 晩ご飯はホテルのビュッフェ。&#xA;二日目 朝ご飯もホテルのビュッフェ。&#xA;お昼は新潟で燕三条ラーメン。 背脂チャッチャ系で旨い。&#xA;その足で弥彦神社に行った。 ここは二礼四拍手一礼で参拝するという結構珍しい神社だった。 こういう大きめの神社は、鳥居から社までの道も神聖な感じがして良かった。&#xA;そのまま下道で山形を通り越して秋田の田沢湖温泉へ。 途中まで日本海パークラインを、佐渡島を眺めながら走っていた。 距離があったのでだいぶ遅くなった + 北の方ということで、とても寒かった。 大阪にいた時の気温しか想定していなかったので大分薄着だったのが災いした。 本当に辛かった。&#xA;三日目 秋田の山を越えて青森に入る。 秋田の山はまだ雪が残っていて辛かった。&#xA;青森に入ってすぐにスウェットパーカーを買った。&#xA;青森では煮干しラーメンを食す。&#xA;廣田神社に参拝した。 ここは疫病の神様を祀ってあるとかなんとか。&#xA;そのまま浅虫温泉で一泊。&#xA;四日目 予定通り大間崎へ向かう。&#xA;大間はマグロの漁獲量が日本一なので、昼飯にマグロ丼を食べる。&#xA;そのまま下道を走って岩手へ。 岩手では盛岡冷麺を頂く。&#xA;そのまま瀬美温泉へ。&#xA;五日目 翌日から二、三日雨が降るとのことだったので、この日中に大阪に帰ろうとする。 その距離1,000km。&#xA;朝5:45に出発。 途中のSAで朝飯を取ったり、休憩したりしながら南下する。&#xA;静岡で一旦高速を降りて、さわやかでハンバーグを食べる。&#xA;そのまま再び高速に乗って大阪へ。 20:00ごろに到着し、今回のツーリング終了。&#xA;振り返り 高速を使ったのは初日と最終日だけで、後は下道だった。田舎は下道でも十分走りやす行くて、かつ下道の方が楽しいし楽。 寒さ、暑さ対策は必要。 天気はどうしようもない。雨の中でも走れる装備を用意した方が良かった。 高速道路で80km/hで走ると大分楽だった &amp;amp; 燃費が良い。 </description>
    </item>
    <item>
      <title>「ソフトウェア見積もり」読了</title>
      <link>https://t45k.github.io/blog/software_estimation/</link>
      <pubDate>Mon, 27 Mar 2023 22:28:20 +0900</pubDate>
      <guid>https://t45k.github.io/blog/software_estimation/</guid>
      <description>Steve McConnellの「ソフトウェア見積もり」を読んだ。&#xA;ソフトウェア見積り 人月の暗黙知を解き明かす [ スティーヴ・マコネル ]&#xA;価格：3,740円（税込、送料無料) (2023/3/27時点)&#xA;楽天で購入&#xA;普段の業務では特に締め切りが存在せず、スケジュールを意識してプロジェクトをやることがあまりないので、 自分で見積もりをやってみたいなぁと思ったのがきっかけ。&#xA;内容は一プログラマから専門家のためのものまで多岐に渡るが、現場で使える知識の提供に一貫している。&#xA;ところどころ読み飛ばしたが、特に参考になったトピックは以下の通り&#xA;範囲で見積もる 最初の方の見積もりほどブレる 「判断」より「計測」と「計算」が重要 過去のプロジェクトから見積もる 規模で見積もる 本自体は20年前近くのものなので、スクラムについては触れられていないが、反復的な開発に関する言及はある。&#xA;とりあえずラフなところから試してみたいなと思った。&#xA;あと、参考文献としてTSEとかISTとかの論文を引いてるのは凄い。</description>
    </item>
    <item>
      <title>シン・仮面ライダーを見た話</title>
      <link>https://t45k.github.io/blog/shin-kamen-rider/</link>
      <pubDate>Sun, 19 Mar 2023 15:45:40 +0900</pubDate>
      <guid>https://t45k.github.io/blog/shin-kamen-rider/</guid>
      <description>シン・仮面ライダーを見たので感想。&#xA;本当に半年以上待った作品だったが、かなりの怪作だったので結構呆気に取られている。&#xA;良かった点 過剰なまでの原作リスペクト。 特にクモオーグ戦。ほとんどテレビ版の1話。 変身シーンも。 ちゃんとショッカーライダーも出てきた。 カッコ良い変身シーンと戦闘シーン。 主にジャンプアクションとライダーキック。 本当に震えた。 仮面ライダーが人間ならざる物になってしまったことに対する葛藤をしっかり描いていたところ。 テレビ版だとナレーションで流されたりしてたので。 庵野はこの辺をやりたかったんやろうなぁと。 令和らしい本郷猛。 一文字隼人の良い意味での性格の軽さ。 ちゃんとおやっさんと滝が出てきた。 綺麗なラスト。 浜辺美波。 微妙だった点 シナリオはちょい微妙か。 未だに人類補完計画が擦られてる。 一般ウケするのはシンゴジ &amp;gt; シンマン &amp;gt; シンライダーかな。 本郷猛の性格は原作好きだと受け入れられない人もいそう。 CG。個人的にはちょっとがっかりした。 若干スプラッタ。 下級戦闘員との戦闘シーンが少ない。 クモオーグ戦みたいなのをもうちょい見たかった。 総合 少なくとも庵野秀明か初代仮面ライダーのどちらかが好きじゃないと楽しめないかも。</description>
    </item>
    <item>
      <title>「ちょうぜつソフトウェア開発入門」読了</title>
      <link>https://t45k.github.io/blog/chozetsu_software_design_introduction/</link>
      <pubDate>Sun, 12 Feb 2023 16:42:09 +0900</pubDate>
      <guid>https://t45k.github.io/blog/chozetsu_software_design_introduction/</guid>
      <description>ひさてるさん著の「ちょうぜつソフトウェア開発入門」を読んだ。 ひさてるさんは Twitter で「#ちょうぜつエンジニアめもりーちゃん」のハッシュタグで不定期に漫画を投稿している人で、そのシニカルな内容が個人的には気に入っている。&#xA;副題に「PHP で理解するオブジェクト指向の活用」とある通り、サンプルコードは PHP で書かれている。 内容は、Clean Architecture と TDD に対するひさてるさんの解釈という感じがした。 また、オブジェクト指向それ自体に意味はなく、それを活用した得られるもの（SOLID、CA、TDD）が大事なのだと述べている。&#xA;こういう著者の考えがダイレクトに出る本は、読み物としても楽しめるので良いなと感じた。 また、最終章の「アジャイル開発」は必読。</description>
    </item>
    <item>
      <title>「読みやすいコードのガイドライン」読了</title>
      <link>https://t45k.github.io/blog/readable_code_guideline/</link>
      <pubDate>Sun, 12 Feb 2023 16:23:45 +0900</pubDate>
      <guid>https://t45k.github.io/blog/readable_code_guideline/</guid>
      <description>LINE に勤めている石川さんが書いた「読みやすいコードのガイドライン」を読んだ。 副題の「持続可能なソフトウェア開発のために」に完全に同意。 継続的なソフトウェア開発には読みやすいコードが必須。&#xA;https://books.rakuten.co.jp/rb/17283015/?l-id=search-c-item-text-01&#xA;「リーダブルコード」などと比べて、少し突っ込んだ内容が多いような印象。 状態遷移や依存関係などの内容は、コードを書き始めたばかりの人には難しいかもしれないが、個人的にはとても勉強になった（特に 7 種類の結合度については初耳だった）。 コードレビューの仕方やコメントの書き方といった、取り上げられている書籍がとても少ない（と思う）事柄についても触れられていて、一読の価値があると感じた。 これらに関してはかなり現場に依存するので完全に同じことをするのは難しそうだが、こういう感じでやってて上手く回っているんだなぁと感じた。&#xA;内容自体もコンパクトにまとまっており、読みやすかった。</description>
    </item>
    <item>
      <title>「Death Stranding」をプレイした話</title>
      <link>https://t45k.github.io/blog/death_stranding/</link>
      <pubDate>Sat, 28 Jan 2023 17:16:09 +0900</pubDate>
      <guid>https://t45k.github.io/blog/death_stranding/</guid>
      <description>Epic でセールになってた Death Stranding（以降、デススト）をクリアしたので感想を書きます。&#xA;デスストとは デスストは 2019 年に PS4 向けに発売されたゲームです。 現在では完全版であるディレクターズカット版が PS5、PC 向けにも出ています。&#xA;制作はメタルギアシリーズを作った小島監督率いるコジマプロダクションであり、 小島監督が KONAMI から独立した後、初めて作ったゲームでもあります。&#xA;自分は MGS シリーズが好きで（1~5、PW、MPO 辺りはプレイした）、 その小島監督が作った新作ということで発売当初からデスストに注目していましたが、 PS4 を持っておらず遊ぶことができないままでした。 しかし今回 Epic Store で無料セールをやっていたため、プレイするに至りました。&#xA;感想 最高でした。 久々にストーリーがしっかりしたアクションゲームをやったのですが（2015 年の MGS5 以来？）、 やはりストーリーがあるゲームは先に進みたいと思わせる強い中毒性があるなと再認識しました。 夜更かしからの寝坊が増えました。&#xA;荷物を運ぶことがメインのゲームなので人によっては退屈に思うかもしれませんが、自分は最後まで楽しむことができました。 広大なオープンワールドでルートを考えたり、アイテムを使って有利に進めたり、他の人の建設物を使うことで繋がりを感じたり、多くのことができます。&#xA;ストーリーを進めるにつれ、配達を楽にするアイテムが公開されていくので、できることの幅が広がっていくのを楽しめました。 特に、アクティブスケルトンを初めて装着した時は、その快適さに感動しました。&#xA;荷物の配達がメインなのでそこまで多くの武器は出てこないだろうなと思っていましたが、想像以上にガンアクションが多かったです。 ただし、狙うキーとトリガーキーが他のキーと重複しているので、設定は事前にいじっておいた方が良さそうです。&#xA;初見のうちはやることが多くて面食らいました。 特に、BT の座礁地帯に入った時はしゃがみと歩きと息止めを同時にやっていたので指がこんがらがりました。&#xA;MGS5 と同じ Fox Engine が使われているため、ところどころ MGS5 で見たことがある表現が出てきました。 時雨で荷物が劣化していくときのエフェクト、BT の座標地帯に乗り込んだときの時間停止等。 また、ボス戦では MGS5 でのスカルズの白刃どりや、MGS4 の殴り合いみたいなアクションもあり、懐かしかったです。&#xA;ノーマンリーダスがカッコよかった。</description>
    </item>
    <item>
      <title>WF-1000XM4を修理に出した話</title>
      <link>https://t45k.github.io/blog/wf-1000xm4_repair/</link>
      <pubDate>Sat, 14 Jan 2023 17:56:18 +0900</pubDate>
      <guid>https://t45k.github.io/blog/wf-1000xm4_repair/</guid>
      <description>結論 WF-1000XM4 の「片方（右側？）だけ異様に充電が減る」問題は、保証期限切れでも無料で新品に交換してもらえる。&#xA;購入した時期 MNG した写真の日付を見た限り 2021 年の 8 月末に購入。 ヨドバシで買ったが、保証期間の延長等はしていなかった。&#xA;症状 イヤホンの右側だけ異様に充電が切れるのが早い。 具体的には、3、40 分程度で 100%から 0%になる。 ちなみに、左側は 80%程度残っている。&#xA;くわえて、どれだけ充電しても 90%までしか充電されない問題も頻繁に起きた（左右問わず）。&#xA;大体 2022 年の秋ごろからこの問題が見られるようになってきた。 症状が出始めた時点で保証期間は過ぎていたので、しばらく様子見をしていた。&#xA;対処法 同様の問題がないか検索してみたところ、わりかし多くのユーザも同じ症状を抱えていたため、修理を依頼することに決めた。 SONY では、修理希望者向けのチャットボットを用意しているので、そこ経由から修理を依頼した。&#xA;https://www.sony.jp/support/inquiry.html&#xA;本来であれば修理費は 1 万円程度だが、SONY 側もこの問題を認識しているらしく、 一度 SONY が預かり、無料修理対象であれば無償で、そうでなければ修理費を依頼者に伝えた上で修理するかを決めるという流れらしい。&#xA;イヤホン回収は SONY が回収サービスを手配してくれるため、回収業者が来たらイヤホンをケース込みで渡すだけで良かった。&#xA;結果 無事無料修理対象だったらしく、イヤホンが SONY に届いてから 2 日ほどで修理が完了し、本日返ってきた。 回収に来てから 1 週間ほど。 ありがとうございました。&#xA;ということで、同様の問題を抱えている方は一度修理に出してみればと思う。</description>
    </item>
    <item>
      <title>2022年の振り返り</title>
      <link>https://t45k.github.io/blog/retrospective_2022/</link>
      <pubDate>Sat, 31 Dec 2022 09:39:23 +0900</pubDate>
      <guid>https://t45k.github.io/blog/retrospective_2022/</guid>
      <description>2022年を振り返る。&#xA;総評 楽しく仕事ができた。 特に、チーム内でやっていることをチーム外に啓蒙するという活動をしてて、それが評価されたという感じ。&#xA;先輩、後輩とのつながりも増えて申し分ない1年間だった。&#xA;仕事 1月 &amp;ndash; 3月 主にインターンのメンターとJenkinsおじさんをやってた&#xA;インターンのメンターは、インターンの子が超絶優秀だったのであまりやることがなかった。 逆に色々教えてもらえて良かった。 リリースが間に合わなかったのはシンプルに申し訳なかった。 JenkinsはIaaS環境に載せてたJenkinsがあまりにも使い物にならなくなってきたので、k8s環境に載せ替えた。 - 一つのコンテナに全ての機能を突っ込む&#xA;- コンテナにcredentialを突っ込む&#xA;みたいなカスみたいなアンチパターンから、&#xA;- 機能ごとにコンテナを分割して、ポートで通信する&#xA;- credentialはコンテナに持たせず、都度Jenkins側から渡す&#xA;に改善できて良い&#xA;&amp;mdash; task@血圧・尿酸 (@getupmax) February 24, 2022 個人的には大満足なマイグレーション。 ちなみにこの話をこの1年間擦り続けてる。 4月 &amp;ndash; 6月 この辺りから、趣味で他のチームのコードレビューにも参加するようになる。 啓蒙活動。 特に汚いソースコードに関してコメントすることが多かった。この辺は個人の思想の押し付けになってたかも。 最終的に綺麗なソースコードを書こうとしても設計が崩壊してると終わりなことに気づいた。 7月 &amp;ndash; 9月 Java8環境に耐えきれなくなり、Java17にアプデするプロジェクトを勝手に立ち上げる。&#xA;PDMに話通して、スケジュール設定 → 実装 → テスト → リリースまでを自分でできたのは良い経験だったなと。 終わった後にLT会でナレッジを共有したり、他のチームのJava17導入に噛んだりできて良かったなと。 チームに自動E2Eテストを書く文化が根付いていたので、マイグレーションがかなりやりやすかった。ありがたい。 夏のインターンのメンター&#xA;1週間 自分も夏のインターンからの採用だったので、その辺も踏まえて会社に貢献できたらという気持ち。 どっちかというと1日の終わりのレビューがメインのお仕事でした。 最終的に優勝してた。すごい。 その辺の話はこちら&#xA;https://commerce-engineer.rakuten.careers/entry/workstyle/0025 以降、インターン経験者かつメンターで優勝みたいな経歴もあって新卒向けイベントみたいなのに呼ばれる機会が増えた。 10月 &amp;ndash; 12月 複数チームにまたがって改善活動をやっていこうぜ的なチームが発足。 -「自チームの改善」 + 「コードレビューを通した他チームへの貢献」みたいなところに目をつけれられて、そのチームに放り込まれる。&#xA;他のチームの人と議論したり、自分がやった改善活動の横展みたいなことをしてた。 これまでやってきたことが認められて昇格。&#xA;特別昇格扱いだとかなんとか。 ほとんど残業せずに昇格できたので、コスパ良かったなぁと。 他のチームに2ヶ月弱移籍。</description>
    </item>
    <item>
      <title>JJUG CCC 2022 Fallに参加した話</title>
      <link>https://t45k.github.io/blog/jjug_ccc_2022_fall/</link>
      <pubDate>Sat, 03 Dec 2022 17:36:13 +0900</pubDate>
      <guid>https://t45k.github.io/blog/jjug_ccc_2022_fall/</guid>
      <description>2022 年 11 月 27 日日曜日に開催された JJUG CCC 2022 Fall に参加しました。&#xA;リンク&#xA;JJUG JJUG は&amp;quot;Japan Java User Group&amp;quot;を指します。 日本最大の Java のコミュニティです。 JJUG CCC は毎年 2 回、春と秋に開催されるイベントで、 様々な参加者が Java に関する技術や事例などの紹介を行います。&#xA;参加者の中には、普段から Java コミュニティで活躍されていられる方も多くいらっしゃります。&#xA;今回僕は聴講側として参加しました。 以下、参加したセッションとそれぞれの感想を書いていきます。&#xA;AWS 環境における Spring Boot アプリケーションの CI/CD を CircleCI で構築した話 株式会社 Red Frasco の篠原さんのセッション。&#xA;https://speakerdeck.com/red_frasco/cdwocirclecidegou-zhu-sitahua&#xA;現在開発中のサービスで、&#xA;CI/CD に Circle CI を 実行環境に AWS を 利用した事例について紹介されていました。&#xA;個人的には CI/CD に興味があったためこのセッションに参加しました。&#xA;Java (Spring) に関連した内容は少なかったですが、Circle CI で AWS にアプリをデプロイする際に注意すべきこと、おすすめの方法等を紹介されており、今後これらのシステムを使う際には参考になりそうだなと感じました。&#xA;path-filteringええな&#xA;Jenkinsにもないかな</description>
    </item>
    <item>
      <title>「現場で役立つシステム設計の原則」読了</title>
      <link>https://t45k.github.io/blog/system_design_principle/</link>
      <pubDate>Sun, 16 Oct 2022 19:33:26 +0900</pubDate>
      <guid>https://t45k.github.io/blog/system_design_principle/</guid>
      <description>現場で役立つシステム設計の原則を読んだ。&#xA;現場で役立つシステム設計の原則 変更を楽で安全にするオブジェクト指向の実践技法 [ 増田亨 ]&#xA;価格：3234円（税込、送料無料) (2022/10/16時点)&#xA;楽天で購入&#xA;「ドメインモデルを設計して、それを中心にプログラミングしよう」という内容だった。&#xA;よく見かける依存性逆転の原則を中心としたオニオンアーキテクチャではなく、 三層アーキテクチャ（コントローラ層、サービス層、データソース層）にドメインモデルを組み込む話を中心にしていたのが特徴的だった。 現在自分のチームも三層アーキテクチャ+トランザクションスクリプト的な設計が主流になっていて、個人的には変更しづらさを感じていたので、この本で紹介されている方法を取り入れられれば良いなぁと感じた。</description>
    </item>
    <item>
      <title>「達人が教えるWebパフォーマンスチューニング」読了</title>
      <link>https://t45k.github.io/blog/web_perfomance_tuning/</link>
      <pubDate>Sun, 16 Oct 2022 19:27:18 +0900</pubDate>
      <guid>https://t45k.github.io/blog/web_perfomance_tuning/</guid>
      <description>2022 年の ISUCON に備えて「達人が教える Web パフォーマンスチューニング」を読んだ。&#xA;内容としては、web サーバや DB の負荷計測からチューニングに関して、ISUCON で使えるテクから現場で活用できる技術まで紹介していた。 パフォチュー経験がない状態で挑む ISUCON だったので、こういった本があってありがたかった。 残念ながら十分な時間をとることができず、全ての内容を消化できなかったが、何となく何をしたら良いかわかるくらいには持っていけたのでよかった。 なお、本番。&#xA;来年また読み直して、ISUCON に再挑戦したい。</description>
    </item>
    <item>
      <title>競プロでKotlinを使わない理由</title>
      <link>https://t45k.github.io/blog/why_not_kotlin_in_kyopuro/</link>
      <pubDate>Mon, 04 Jul 2022 22:38:27 +0900</pubDate>
      <guid>https://t45k.github.io/blog/why_not_kotlin_in_kyopuro/</guid>
      <description>仕事や趣味でソースコードを書く時は Kotlin を使っているが、競プロでは Java を使っている。&#xA;ちょくちょく Kotlin に移行することを考えるのだが、その度に色々な理由で断念するので、その理由を書き出してみる。&#xA;ビット演算子がない 多分これが一番大きい。&#xA;競プロではビット演算をする場面がたびたびある（ビット全探索とか）。&#xA;Java では&amp;lt;&amp;lt;や|などが使えるが、Kotlin ではlhsやorなどの中置関数を使う必要があり、可読性が大きく下がる。&#xA;配列宣言が面倒臭い 競プロの性質上、配列に対してプリミティブな操作を行う場面が多くあるため、配列宣言はなるべく簡潔に済ませたい。&#xA;Java ではint[]のように宣言できるが、Kotlin ではArray&amp;lt;Int&amp;gt;のように宣言する必要がある。&#xA;また、一次元配列では特に問題ないのだが、多次元配列（競プロでは三次元配列を書く場面が多々ある）になると Kotlin の記法は特に面倒になる。&#xA;null チェックが厳しい 仕事で使う分にはありがたいが、競プロのような使い捨てるコードに対しては意義が薄れる感じがする。&#xA;とくに、Map のキーの存在が確定している場合でも何らかのエスケープが発生する。&#xA;!!演算子で無理やり非 null 型に変換することもできるが、個人の信条からあまり使いたくない（!!演算子の利用に慣れたくない）。&#xA;トラディショナル for が使えない Kotlin の for 文はイミュータブルな変数を使った記法なので、トリッキーでアドホックな for 文を書きにくいという欠点がある。 例えば、添字のiを条件によって更新したりしなかったりする場合など。&#xA;暗黙の型変換がない intとlongで足し算したり、char同士の引き算の結果をintにしたりするのが面倒臭い。</description>
    </item>
    <item>
      <title>シン・ウルトラマンを見た話</title>
      <link>https://t45k.github.io/blog/shin-ultraman/</link>
      <pubDate>Sun, 12 Jun 2022 15:48:22 +0900</pubDate>
      <guid>https://t45k.github.io/blog/shin-ultraman/</guid>
      <description>シン・ウルトラマンを 3 回も観てしまったので、感想を書き連ねておく。&#xA;全体的な感想としては、作り手（主に監修）が本当に自分が好きなものを詰め込んでいて、それがオタクに刺さりまくる感じ。&#xA;無印へのリスペクトがすごく、&#xA;1 回目は無印マンを全然知らない状態で楽しむ 家に帰ってから関連する無印マンの情報を漁る 2 回目以降はその知識と比較しながら楽しむ みたいに 2 度美味しく頂ける。&#xA;ウルトラマン 今作のウルトマンは、無印マンと違って&#xA;カラータイマーがない 背びれがない 目の黒点がない という特徴がある。&#xA;そもそも、本来のウルトラマンの造形にそれらはなく、単に放送上の制約で無印には付けざるを得なかったという事情がある （カラータイマーは白黒放送でも弱っていることを見せるため、背びれはファスナーを隠すため、目の黒点は覗き穴）。&#xA;今作では、庵野のこだわりから、本来のウルトラマンのデザインを表現できていると思った。 色合いもマットなシルバーからメタリックなそれになっていて、こだわりを感じた。&#xA;また、弱ると色が薄くなるという表現も良かった。&#xA;ネロンガ戦 スペシウム光線の威力がよく分かる回。&#xA;ちなみに、PV でここのスペシウム光線のシーンが取り上げられているが、この時点でウルトラマンのカラーリングは銀一色なため、 実は PV のシーンは存在しない。&#xA;ガボラ戦 赤いウルトラマンが初めて出てくる。&#xA;冒頭の、飛行ポーズのまま降りてきてキックを決めるシーンはなかなかシュールだった。&#xA;着地からのいつものポーズ。&#xA;最後の正拳突きがキレイで少し感動した。誰がアクターやってたんだろう。&#xA;ちなみに無印では、襟（ドリルの部分）をむしり取るというなかなか暴力的なシーンがある。&#xA;ザラブ戦 ウルトラマン拉致が印象的な回。&#xA;ウルトラマン拉致や偽ウルトラマン、空中戦など無印リスペクトが盛りだくさん。 特に、ザラブを思いっきりチョップするも硬くて痛がるシーンまで再現されている。&#xA;ザラブは、前半身の表面だけが見えており、そこ以外は透明な、なかなかフィギュア化が難しそうな見た目をしている。&#xA;電磁波を操る能力を持っているが、それを使わずに偽ウルトラマンで暴れてからの人類の同士討ちを狙うという、 かなり回りくどい方法を取っているように思えた。&#xA;偽ウルトラマンは無印と比べてかなり似ているが、よく見ると目が角ばっている。&#xA;ちなみに、この回の変身シーンがめちゃくちゃ格好良い（ウルトラマンが神永を掴んで巨大化する）。&#xA;神永とザラブが車内で会話するシーン（ザラブの人類同士戦わせる発言に対して、神永が人類はそこまで愚かじゃないと返す）からは、 現在のウクライナ情勢に対する強烈な皮肉を感じた。&#xA;メフィラス戦 メフィラスが無印に比べてめちゃくちゃシュッとしてて驚いた。&#xA;やはり居酒屋で飲み食いしているシーンが有名。 メフィラス星人本体はウルトラマンの逆になるように黒基調でデザインされているが、 このシーンでは人間状態での見た目も対比状態にあると思った （黒いスーツをパリっと着るメフィラスに対して、ウルトラマンはしわが入った白いカッター）。&#xA;無印では子供に「地球をあげます」と言わせようとして失敗していたが、今回は日本との密約に成功した模様。&#xA;その他、人類側に理解を示したうえでの丁寧な性格、慣用句まで理解しきっている言語能力、削除困難なデータを削除できるなど、 ザラブが小物に見えるほどの人物。&#xA;戦闘シーンでは、向き合っての会話からはじまり、お互い一歩引いてから戦闘を開始する、投げられたら投げ返す、 蹴り上げ、静止状態からの撃ち合い開始、一方的に戦闘終了を宣言するなど、無印再現シーンが多くて見物だった。&#xA;ゼットン戦 PV などでは一切ゼットンに触れられていなかったため、ゼットンが出てくるのを見て驚いた記憶がある。&#xA;無印ではウルトラマンを倒した唯一の怪獣として放送当時は子供たちに絶望感を植え付けたのだろうが、 今作ではその絶望感をサイズ感の時点で味わうことができる。&#xA;原作同様、最後は人類の知恵を持ってゼットンを倒した。&#xA;個人的に無印ゼットンのカミキリムシみたいな背中が好きだったので、背中をもう少し映してほしかった。&#xA;また、満を持してぐんぐんカットが入っており、胸熱だった。</description>
    </item>
    <item>
      <title>デュアルキーボードを試してみた話</title>
      <link>https://t45k.github.io/blog/dual_keyboard/</link>
      <pubDate>Thu, 05 May 2022 21:47:26 +0900</pubDate>
      <guid>https://t45k.github.io/blog/dual_keyboard/</guid>
      <description>概要 入社して 1 年、肩こりに悩まされるようになったのでデュアルキーボードを試してみた。&#xA;肩こり 肩こりには様々な原因があるが、長時間を肩をすぼめたままの姿勢でいることがその一つである。&#xA;一般的なキーボードは肩幅より狭いため、タイピングのために肩をすぼめた姿勢を取らざるを得なくなる。&#xA;また、肩をすぼめると背中が前に曲がるため、腰に負担がかかる可能性が高まる。 そのうえ、頭がディスプレイに近くなるため、眼精疲労も溜まりやすくなる。&#xA;以上の観点から、キーボードをそのまま利用するのは健康上のリスクが大きいと考えられる。&#xA;キーボードを変える？ 以上の背景から、エルゴノミクスキーボードや分離型キーボードが勧められることが多々ある。 これらのキーボードは多くのメリットがあるものの、以下のデメリットをはらんでいる。&#xA;高価&#xA;これらのキーボードは需要が少ないため、一般的なキーボードと比較して高価になる傾向がある。 また、すでに好みのキーボードを買っている人にとっては、余計な出費になる。 配列&#xA;真ん中の境界できれいに分割されているため、特定のキーを左右両方の手で取るタイピングをする人には厳しい。 スイッチの選択肢が少ない&#xA;「青軸が好み」や「静電無接点じゃないとダメ」といったキーボードユーザがいるかも知れないが、そういう人には選択肢が少ない。 デュアルキーボード もう一つの選択肢はデュアルキーボードである。&#xA;読んで時の如く、2 枚のキーボードを左右に配置して、同時に操作する。&#xA;両方のキーボードはフルサイズなので配列を気にしなくて良いのと、自分の好きなキーボードを継続して使えるというメリットがある。&#xA;もう 1 枚のキーボードを買う必要があるため、コストの面では優れているかは分からないが、少なくとも分離型キーボードを新しく買うよりかは安上がりになる。&#xA;コストを優先する場合、もう一つの選択肢がある。&#xA;結論構成 それは、片方はラップトップのキーボードを利用する構成である。&#xA;最近ではラップトップのみを支給し、それをモニターと繋いで、業務に使うという会社も多いと思う。&#xA;ラップトップのキーボードを利用することで、すでに外付けキーボードを持っている場合は新たなコストが一切発生しない （パンタグラフや薄型のキーボードだと違和感なく利用できる。自分は薄型のメカニカルキーボードを使っていたので大丈夫だった）。&#xA;この場合、自分の正面にメインモニタ、ラップトップを左側、サブモニタとキーボードを右側に置くのが個人的に最適だと考えている。&#xA;よくラップトップの上側にモニタを配置する人を見かけるが、これはオススメしない。&#xA;1 つ目の理由は、人間の目は上下移動よりも左右移動に適しているからである。 これは、目が横に細長いことからわかる。 左右方向に見える範囲が広いため、モニタは左右に配置するべきである。 また、首を動かす場合も、上下に動かすより左右に動かす方が物理的な仕事量が少なくなる。&#xA;2 つ目の理由は、モニタの上端が目の位置より下になるように高さを調節すべきだからである。 モニタの上端が目線よりも高い場合、まぶたを大きく開く必要があるため、ドライアイや眼精疲労に繋がることが指摘されている。 ラップトップの画面の上にモニタを配置した場合、よほど座高が高い人間でない限り、モニタの上端が目線よりも高くなってしまう。&#xA;以上の理由から、以下が現時点での個人的な結論構成に落ち着いた。&#xA;肩が死ぬほど開いて気持ち良い。&#xA;ちなみに、トラックパッドは中央に置いている。&#xA;トラックパッドはなるべく使わないで良いように、ブラウザ操作はVimium、 ショートカットやマウスポインタ操作は Karabiner を利用している。</description>
    </item>
    <item>
      <title>「Code Clone Analysis」読了</title>
      <link>https://t45k.github.io/blog/code_clone_analysis/</link>
      <pubDate>Sat, 26 Feb 2022 12:00:56 +0900</pubDate>
      <guid>https://t45k.github.io/blog/code_clone_analysis/</guid>
      <description>Code Clone Analysis を読みました。&#xA;コードクローンとはソースコード中の類似したコード片を指し、修正漏れの原因になることからこれまで多くの研究が行われてきました。 この本は、これまでの研究を総括した学術書です。 学術書なので英語で書かれており、なおかつ（多分）一般流通はされていません。 僕の場合は Springer から直接購入したのですが、送料込みで 2 万弱しました&amp;hellip;&#xA;読んだ感想ですが、学生時代に理解できなかった論文の内容を理解できたり、知らなかった論文を知れたりして面白かったです。 英語で書かれているので読むのは苦労しますが、ソフトウェア開発者は読む価値があると思います。</description>
    </item>
    <item>
      <title>「Java言語で学ぶデザインパターン入門」読了</title>
      <link>https://t45k.github.io/blog/design_pattern/</link>
      <pubDate>Sat, 26 Feb 2022 11:53:22 +0900</pubDate>
      <guid>https://t45k.github.io/blog/design_pattern/</guid>
      <description>「Java 言語で学ぶデザインパターン入門」を読み終えました。 今回は内容を Kotlin で実装してみるということをやっていました。 リポジトリ&#xA;この本自体は割と前からある本なのですが、今回第 3 版が出て内容が新しくなったと聞き、思い切って購入しました。 4,290 円でした。 技術書は高い。&#xA;学生時代は研究室に古い版の本があり、何度か読んだのですが、読むだけでは全然理解できないままでいました。&#xA;やってみた感想ですが、自分が委譲の強力さを全然理解していなかったことを痛感しました。 普段は知らないまま使っていたパターン（Spring bean のプロキシなど）を理解する良い機会になりました。&#xA;一方、やはり Java だと冗長になる部分が多く、Kotlin で再実装すると、コード例よりもすっきり書ける場面が多かったです。</description>
    </item>
    <item>
      <title>ABC239の解説</title>
      <link>https://t45k.github.io/kyopuro/abc239/</link>
      <pubDate>Sun, 20 Feb 2022 13:56:21 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc239/</guid>
      <description>3 ヶ月ぶりのコンテスト参加。ただし Unrated。 6 完&#xA;A - Horizon やるだけ&#xA;B - Integer Division X が負かつ 10 で割り切れないときだけ、X/10 に-1 を加える。&#xA;C - Knight Fork 「二つの点から距離 √5 である格子点が存在する」ということは、 「それぞれの点から距離 √5 である格子点を列挙した時、重なる物が 1 つ以上ある」ということになる。&#xA;なので、それぞれの点の距離 √5 の格子点の集合に対して、共通集合が存在するかを確認すればよい。&#xA;D - Prime Sum Game 高橋君が選べる全ての数字に対して、足すことで素数になるような数字を青木君が選べればよい。&#xA;具体的には、以下のような処理を行う&#xA;A~B の数字を順番に選んでいく。この数字を i とする i に対して、C~D の数字を足していく。この和を j とする j が素数の場合は、1.で選んだ数字の次の数字で 2.以降を試す。逆に、素数となる j が存在しなければ、その時点で高橋君の勝ちが確定する 全ての i に対して j が素数となるような数字を青木君が選べた場合、青木君の勝利 E - Subtree K-th Max Ki は高々 20 なので、愚直に計算していけば良い。 具体的には、各頂点に対して部分木に書かれた値の降順リスト（長さ最大 20）を用意し、以下の手順をボトムアップに繰り返す。</description>
    </item>
    <item>
      <title>「叙述トリック短編集」読了</title>
      <link>https://t45k.github.io/blog/descriptive_trick/</link>
      <pubDate>Mon, 10 Jan 2022 11:35:22 +0900</pubDate>
      <guid>https://t45k.github.io/blog/descriptive_trick/</guid>
      <description>昨年の 12 月には読み終えていたけど感想書くのサボってた&amp;hellip;&#xA;似鳥鶏の「叙述トリック短編集」を読みました。&#xA;叙述トリックとは、語り手（作者）が（意図的に）情報を隠すことで読者を騙すトリックを指します。 よくミステリで使われる他のトリック（密室トリックとか）とは違って、 状況を文字でしか説明できないという特徴を持つ小説特有のトリックなので、結構好きです。 （そのために、映像化不可能などと言われたりする）&#xA;叙述トリックは読者に対してフェアではないという批判を受けがちですが、 この本では題名と冒頭で叙述トリックを利用していることを明示的に示すことで、その批判を回避しています。&#xA;内容としては、叙述トリックであると身構えながら読んでも意外と真相は分からないもので、 作者が用意した偽の誘導に引っかかってしまうことも多々ありました。 最後のあとがきまで楽しめました。&#xA;次は新版が出たデザパタ本をやっていこうと考えています。</description>
    </item>
    <item>
      <title>2021年の振り返り</title>
      <link>https://t45k.github.io/blog/retrospective_2021/</link>
      <pubDate>Fri, 31 Dec 2021 19:46:45 +0900</pubDate>
      <guid>https://t45k.github.io/blog/retrospective_2021/</guid>
      <description>2021 年を振り返っていく．&#xA;総評 20 年間続いた学生生活をようやく終えて，社会人になった節目の年だった．&#xA;研究は良い感じに終えられて，社会人生活もぼちぼち良い感じにやっていると思う．&#xA;一方で，自分の時間をかなり適当に過ごしたのは反省点かなぁと．&#xA;研究 実験自体はほぼ全て 2020 年で終わっていたので，後は修論を書くだけだった．&#xA;暇を持て余した結果，修論を英語で 100 ページ書くという謎のチャレンジをした．&#xA;最終的な戦績は&#xA;論文誌*2 国際会議*3 受賞*1 でかなり満足いく結果になった．&#xA;特に，暇を持て余して，M2 の 9 月くらいから趣味 100%で始めた研究テーマがかなりうまくいって，最終的にトップ会議に通ったのはとても嬉しかった．&#xA;仕事 配属がかなり恵まれて，楽しく仕事で来た．&#xA;チームのメンバーはベテランが多く，チーム自体の練度が高いという印象を受けた．&#xA;また，新卒の自分にも裁量権が十分にあり，提案が通ることも多かった．&#xA;ソースコードは過去の負債が割と残っているように感じたが，それはそれで返済する面白さがあるからヨシ．&#xA;働き方もかなり柔軟に選択でき，自分はずっと 8:00 出社の 16:30 退勤をさせてもらっていた．&#xA;課題としては，今まで個人で適当にプログラミングをしていた影響か&#xA;仕様通りに バグなく 作ることの難しさを感じた．&#xA;趣味 全体的に，仕事の疲れを言い訳にだらっと過ごすことが多かった．&#xA;競プロ 初冬くらいからやらなくなった．&#xA;理由としては&#xA;土曜の 9 時からという時間が悪い． その時間は酒を飲みたい． これ以上実力（レート）が伸びるビジョンが見えない． 競プロをやってる仲間がいない． くらい．&#xA;自分が解けるかどうかくらいの難易度の問題を解くのは好きなので，今後も水 diff の過去問とかは解くかもしれない．&#xA;バイク 今年はコロナの影響や，有休があまりなかったのもあって遠出はできなかった．&#xA;紅葉を見に行ったり，金沢に行ったりしたり．&#xA;来年は東日本を一周したいなぁとか考え中．&#xA;読書 技術書かどうかに限らず，1 ヶ月に 1 冊は本を読んで，ブログにまとめるようにした．&#xA;久々に本を買って読むということをした．&#xA;やっぱり紙の本の方が好き．&#xA;OSS 貢献 今年は Spring Framework とか Groovy とかに PR を投げた．</description>
    </item>
    <item>
      <title>「オブジェクト指向でなぜつくるのか」読了</title>
      <link>https://t45k.github.io/blog/how_objects_work/</link>
      <pubDate>Sun, 28 Nov 2021 19:12:57 +0900</pubDate>
      <guid>https://t45k.github.io/blog/how_objects_work/</guid>
      <description>オブジェクト指向でなぜつくるのかを読みました．&#xA;久々に技術書を買った気がします． 社会人になって自由に使えるお金が増えるのは良いなと思いました．&#xA;この本は，コードの書き方や新技術習得の指南というよりは， 基本に立ち返った内容になっています．&#xA;オブジェクト指向の成り立ちから始まり，オブジェクト指向のメリット，オブジェクト指向により何が可能になったか， などについて説明しています．&#xA;あまり堅い内容ではないため，寝る前などに軽く読んだりといった，普通の読み物としても楽しめました．&#xA;個人的には，「オブジェクト指向は必ずしも現実世界を投影してるわけではない」という主張がしっくりきました． 最終的には再利用，修正が容易でバグが発生しにくいプログラムを書くことが重要なのだなぁというごく当たり前のことを再認識する良い機会になりました．</description>
    </item>
    <item>
      <title>「カーニバル・デイ 新人類の記念日」読了</title>
      <link>https://t45k.github.io/blog/carnival_day/</link>
      <pubDate>Sun, 24 Oct 2021 13:35:14 +0900</pubDate>
      <guid>https://t45k.github.io/blog/carnival_day/</guid>
      <description>2 ヶ月近くかけて，清涼院流水の「カーニバル・デイ」を読みました．&#xA;本作は JDC シリーズのカーニバル三部作の三作目で，何とこの巻だけで 1000 ページ超あります． 一応 JDC シリーズの年表としては一番最後にあたる話で，とりあえず一区切り付いたかなぁという気持ちです．&#xA;感想としては，ミステリとしてはトリックの回収の仕方があまりにも酷くて憤りを感じました． コズミックが壁本（壁に叩きつけられてもおかしくない出来の本）として取り上げられることはありますが，個人的にはこの本が壁本に該当するのかなぁと感じました．結局のところ，トリックのインターフェースだけ公開されてて，実装は一切明らかになりませんでした．&#xA;一方，ファンタジーとして読むとそこそこ楽しめたかなという印象です． 最後のオチのつけ方も，言葉遊びを重視する流水大説としてはアリだと思います．&#xA;本の内容よりも，やっと読み終えられたという安堵感の方が大きかったです（多分大学生くらいの時からずっと読みたいと思ってました）． ちなみに，ラストの Y.T は本文途中に出てくる死亡，行方不明者リストを見るとすぐに分かりました． このために，リストを用意してくれてたとも思えました．&#xA;今後ですが，彩文家事件はしばらく読まないと思います． 次に読むとしたら，積んでる「人間失格」か最近買った「オブジェクト指向でなぜつくるのか」か，横溝正史あたりに入門しようかなぁと考えています．</description>
    </item>
    <item>
      <title>ABC223の解説</title>
      <link>https://t45k.github.io/kyopuro/abc223/</link>
      <pubDate>Sat, 23 Oct 2021 20:31:42 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc223/</guid>
      <description>ギリギリ 4 完． コード&#xA;A - Exact Price 100 で割った余りが 0 になればよい．&#xA;入力例にあるように X=0 である場合に注意．&#xA;B - String Shifting シフトした文字列を全通り用意しておき，ソートする．&#xA;C - Doukasen 両端からシミュレーションするのは難しそうなので他の方法を考える．&#xA;少し考えると，左端と右端両端から同時に火をつけたそれらがぶつかった時， どちらも同じ時間燃えていたことになる． つまり，ぶつかる場所は，左端から火をつけて燃え切るのに必要な時間の半分になる．&#xA;あとは，全て燃える時間を計算して，その半分でどこまで燃えるかを計算すればよい．&#xA;D - Restricted Permutation トポロジカルソートを，優先度付きキューを用いた幅優先探索でやるだけ．</description>
    </item>
    <item>
      <title>ABC222の解説</title>
      <link>https://t45k.github.io/kyopuro/abc222/</link>
      <pubDate>Sat, 23 Oct 2021 18:07:27 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc222/</guid>
      <description>四完． コード&#xA;A - Four Digits 10 未満には 3 個，100 未満には 2 個，1000 未満には 3 個 0 を付けた文字列を出力する．&#xA;B - Failing Grade やるだけ．&#xA;C - Swiss-System Tournament 問題文が長すぎて，飛ばして先に D から解いた問題． やることは&#xA;前から二人ペアでじゃんけんをする 勝ったらその人の勝ち数を増やす 勝ち数でソートする を繰り返すだけ．&#xA;D - Between Two Arrays DP．&#xA;dp[前から何番目を見てるか][c_iの値]=何通りかという DP を組むとdp[i][j]は&#xA;i=1の時，a_1 &amp;lt;= j &amp;lt;= b_1の範囲で 1，それ以外は 0 i&amp;gt;1の時，dp[i-1][a_i]~dp[i-1][j]までの総和 になる．&#xA;総和の計算には累積和を使う．&#xA;E - Red and Blue Tree 場合分けが漏れていて解き損ねた問題．&#xA;基本的なやり方としては，&#xA;全ての辺に対して，全ての移動を行った後に何回通ったかを記録しておく それぞれの辺を赤，青とした場合の R-B の値を DP を使って計算する． R-B=K となる組み合わせの数を求める． ここで注意しないといけないのは以下の 2 点．</description>
    </item>
    <item>
      <title>ドキドキ文芸部をプレイした話</title>
      <link>https://t45k.github.io/blog/ddlc/</link>
      <pubDate>Mon, 18 Oct 2021 19:54:12 +0900</pubDate>
      <guid>https://t45k.github.io/blog/ddlc/</guid>
      <description>ドキドキ文芸部をプレイしました．&#xA;以降，ネタバレ含みます．&#xA;プレイ中の感想としては，&#xA;もうやめてくれよ これ以上いけない あかん 救いはないのですか？ をひたすら繰り返した感じでした．&#xA;特に驚いたのが名前を呼ばれた場面で，PC のユーザ名を本名にしていたのでどこから入手したのか最初は不審に思いました．&#xA;全体的には有名なだけあるなって感じで，久々に（短い間ですが）のめり込んでゲームできました．&#xA;その他思ったこと&#xA;ゲーム内に PC のターミナルがあって，そこからファイルをいじれたりゲームを再起動できるのは面白い仕掛けだと感じた ナツキとユリが言い争った挙句モニカがアップになるシーンに毎回びっくりする ナツキ √ がほしい 今回買ったのはプラスだが，無印版だとさらに色々できるらしい トロコンまでやるかは不明 </description>
    </item>
    <item>
      <title>ABC220の解説</title>
      <link>https://t45k.github.io/kyopuro/abc220/</link>
      <pubDate>Wed, 06 Oct 2021 22:54:53 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc220/</guid>
      <description>5 完．コード&#xA;A - Find Multiple ゴリゴリに計算して答えを出しても良いが，この手の問題は全探索しても間に合う．&#xA;B - Base K 10 進法に直してから計算する&#xA;C - Long Sequence A1 ～ AN までの 1 ループでの和を事前に計算しておき，X とその和の商と余りから k を求める．&#xA;D - FG operation DP&#xA;E - Distance on Large Perfect Binary Tree ある頂点について，ペアの作るための頂点の選び方は以下の 3 通りになる&#xA;自分の子孫から対となる頂点を選ぶ 自分の先祖から対となる頂点を選ぶ 自分の先祖を経由して，その先祖の自分側以外の子孫から対となる頂点を選ぶ また，それぞれに関して，自分の深さを X とすると，以下の条件が設けられる&#xA;自分の深さから N までが D 以上，つまり N-X &amp;gt;= D 1 から自分の深さまでが D 以上，つまり X-1 &amp;gt;= D ある先祖の深さが Y の時，Y を経由しても D に収まる，つまり (X-Y)+(N-Y) &amp;gt;= D あとはそれぞれに関して計算すればよい．</description>
    </item>
    <item>
      <title>ABC219の解説</title>
      <link>https://t45k.github.io/kyopuro/abc219/</link>
      <pubDate>Wed, 06 Oct 2021 22:26:04 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc219/</guid>
      <description>5 完 600 位で青パフォ． コード&#xA;A - AtCoder Quiz 2 やるだけ．誤読して WA を出した&#xA;B - Maritozzo これもやるだけ． S1~S3 を配列に入れて，T の各数字を int 型に変換してからそれぞれの S に map して一つの文字列に結合すると気持ち良く書ける．&#xA;final String s1 = scanner.next(); final String s2 = scanner.next(); final String s3 = scanner.next(); final String[] s = {s1, s2, s3}; final String t = scanner.next(); final String answer = IntStream.range(0, t.length()) .map(i -&amp;gt; t.charAt(i) - &amp;#39;1&amp;#39;) .mapToObj(i -&amp;gt; s[i]) .collect(Collectors.joining()); System.out.println(answer); C - Neo-lexicographic Ordering 初めにバブルソートをやろうとして TLE を食らった問題</description>
    </item>
    <item>
      <title>ABC218の解説</title>
      <link>https://t45k.github.io/kyopuro/abc218/</link>
      <pubDate>Mon, 13 Sep 2021 16:37:09 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc218/</guid>
      <description>初の 6 完で久々に盛れた． コード&#xA;A - Weather Forecast String#charAt使う．&#xA;B - qwerty 問題文内では辞書順という言葉を使っているが，単純に(char)(&#39;a&#39; + P_i - 1)を出力するだけ．&#xA;c - Shapes アルゴリズムは簡単だが実装が割としんどい問題．&#xA;#が存在する座標のリストを取得し，それらを左上詰めしたうえで比較する． 例えば，入力例 1 の S&#xA;..... ..#.. .###. ..... ..... は 0-indexed で(1,2), (2,1), (2,2), (2,3)と表せられる． このとき，行の最小値は 1，列の最小値は 1 なので， 左上詰めするとそれぞれの座標の行，列から 1 ずつ引いて (0,1), (1,0), (1,1), (1,2)と表せられる．&#xA;これを S に対して 90° ずつ回転させたリストと T を比較する．&#xA;D - Rectangles 条件から，求めたいのは， あるx_iをx座標に持つ点の集合と，あるx_jをx座標に持つ点の集合の間で，y座標が一致する点の集合から2つ選ぶ時の組み合わせの数になる． これを実現するため，与えられた点を x 座標をキー，y 座標のリストを値に持つ Map に格納する． この時，リストは事前にソートしておく． あとは x 座標の各組合せに対して，一致する y 座標の数を数えておく． ソートしているので尺取法的に数え上げると，この操作はリストの長さに線形で可能なので十分に間に合う．</description>
    </item>
    <item>
      <title>ABC217の解説</title>
      <link>https://t45k.github.io/kyopuro/abc217/</link>
      <pubDate>Wed, 08 Sep 2021 18:47:29 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc217/</guid>
      <description>ぎりぎり5完． 難しく考えてセグ木で殴りにいくことが多かった． コード&#xA;A - Lexicographic Order JavaはS.compareTo(T)するだけ．&#xA;B - AtCoder Quiz 初めに4つのコンテストをSet等で持っておいて，出てきたものを消す．&#xA;Inverse of Permutation 問題文の解読にちょっと時間がかかった． 転置する．&#xA;D - Cutting Woods セグ木で殴った問題その1． JavaだとTreeSetでOK（lowerとceilingが使えることを知らなかった）． 別解を紹介する．&#xA;まずminを返すセグ木とmaxを返すセグ木を用意する． 木材を切る度に，2つのセグ木のxiの位置をxiで更新する． こうすると，線xiを含む木材の長さは，(出てきた数値のうち，xi以上の最小値)-(xi以下の最大値)と表すことができ， セグ木を使うことでO(log N)で処理できる． 木材の長さは10^9を取りうるので，木材を切る位置で座標圧縮する． つまり，ci=1のクエリを先に全て集めて起き，それらのxiの値でリストを作り， それをもとにセグ木を構築する．&#xA;E - Sorting Queries セグ木で殴った問題その2．&#xA;これも初めに出てくるxを全て集めておきリストに入れる． このリストをセグ木に入れる． 次にクエリを順番にみていき，以下の操作を行う．&#xA;操作1の時，Aの長さを表す変数lengthを更新する． 操作3の時，Aのどの部分までがソート済みかを表す変数sortedPointにlengthを代入する． 操作2の時，次に出力する数字が何個目か（count）によって，操作を変える sortedPoint以下なら，ソート済みの部分を出力するため，countからsortedPointの範囲で最小値を出力する （出力した数字は，次以降の操作で引っかからないように最大値で更新しておく） sortedPointを超過していれば，リストのcount番目の数字をそのまま出力する． </description>
    </item>
    <item>
      <title>ABC216の解説</title>
      <link>https://t45k.github.io/kyopuro/abc216/</link>
      <pubDate>Sat, 04 Sep 2021 20:29:59 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc216/</guid>
      <description>カス4完． コード&#xA;A - Signed Difficulty やるだけ．&#xA;doubleやfloatでなく文字列型で入力を受け取ってピリオドで分割したほうが良い．&#xA;B - Same Name 姓と名を結合した文字列（間に空白を挟む）をSet等で管理し，最終的にSetの要素数とNを比較すれば良い （要素数がNと同じなら同姓同名は存在しない）．&#xA;C - Many Balls 元のNに対して&#xA;Nが奇数なら1引いてから2で割る Nが偶数なら2で割る という操作を行っていき，最後に行った操作を逆順に出力する&#xA;D - Pair of Balls 考え方としては，筒の先頭を順番に見ていき，重複するボールがあればそれを取り除き，改めてその筒を見る，という操作の繰り返しである．&#xA;「操作を行う対象の筒リスト」を用意し，1~Nを初めに挿入する． 次に，リストの先頭から取り出した番号の筒に対して，以下の操作を行っていく&#xA;筒の先頭の数字が「すでに出現した数字」の集合に含まれている場合，筒の先頭と集合中のその数字を取り除き，「操作を行う対象の筒リスト」に今見ている筒の番号を入れる． 筒の先頭の数字が「すでに出現した数字」の集合に含まれていない場合，その数字を集合に入れる． E - Amusement Park ある楽しさXに対して，Σ(max(Ai-X,0)) = KとなるようなXが存在するときに，各アトラクションを楽しさがXになるまで乗るのが最適． なので，そのXを二分探索を用いて探す．&#xA;F- Max Sum Counting Aを昇順に並べたとき，Aiを含む(1,&amp;hellip;,i)の空でない部分集合は必ず最大値がAiになる． このことから，ソートした後の各iに対して，(1,&amp;hellip;,i)の空でない部分集合に対してBiの和を求めて，Ai以下のものの個数を足し合わせていけば良い． 部分集合の和はナップザック問題に帰着し，Aiの最大値は5,000なので，それ以下の範囲で計算すれば良い．</description>
    </item>
    <item>
      <title>「カーニバル 人類最後の事件」読了</title>
      <link>https://t45k.github.io/blog/carnival/</link>
      <pubDate>Wed, 01 Sep 2021 22:47:07 +0900</pubDate>
      <guid>https://t45k.github.io/blog/carnival/</guid>
      <description>重い腰を上げて，清涼院流水の「カーニバル」を読みました．&#xA;本作では，JDC爆破事件を皮切りに，1週ずつ繰り広げられる大規模犯罪のお話が展開されます． また，各事件は作者が定めた順番に並べられており，「ページ通り読む（読者式）」と「時系列順に読む（作者式）」の2通りの方法で楽しむことができます． 今回は読者式で読んだのですが，事前に死んでしまう登場人物が分かっている状態で，その前日にその人物がどういう振る舞いをしているか，という楽しみ方ができるのは珍しいと思いました．&#xA;今作ではこれまでJDCシリーズに出てきた多くの探偵が事件に巻き込まれ死にます． また，トリックすら分からない完全不可能犯罪が多く出てきます． この大風呂敷が次作の「カーニバル・デイ」でどう回収されるのかが楽しみです．</description>
    </item>
    <item>
      <title>ABC215の解説</title>
      <link>https://t45k.github.io/kyopuro/abc215/</link>
      <pubDate>Mon, 23 Aug 2021 20:59:23 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc215/</guid>
      <description>Dで沼って緑パフォ4完． コード&#xA;A - Your First Judge 文字列判定&#xA;B - log2(N) logを使うと誤差で通らなかったりする． N&amp;lt;=10^18からkは高々60程度なので愚直に計算してよい&#xA;C - One More aab aba baa |S|&amp;lt;=8から全てのパターンを列挙しても4*19^5程度なので，全て列挙してからソートすればよい． C++だとpermutationを使えば良いが，Javaだと自分で実装する必要がある． 再帰を使うと楽．&#xA;D - Coprime 2 全然解法が思いつかなかった． 想定解とは別解を紹介する．&#xA;問題の条件から，求めたい数は，各Aiが約数として持たない素数と，それらの合成数であることが分かる． そこであらかじめ2以上M以下の約数を全て列挙した上で，それらの倍数とAiが一致しないかを確認していく． 素数の倍数を列挙するのはエラトステネスの篩と同じ計算量で行え，それらがAiと一致するかはAをSetで持つことでO(1)でできる．&#xA;また，合成数を作る処理だが，合成数の数は高々M個なので計算量はO(M)以下となる．&#xA;E - Chain Contestant 解法は思いついたが時間内に実装できなかった問題．&#xA;SがAからJまでの10種類しかないことに着目すると，2^10をやっても何となくいけそうな気になってくる． 以下のようなdpを組む．&#xA;dp[文字列のどこを見ているか][今までどの文字を通ってきたか][今どこの文字にいるか] ここで，今までどの文字を通ってきたかはbitで表現できる． このようなdp[i][j][k]を組むと，更新式は以下の和となる．&#xA;dp[i-1][j][k]&#xA;jがi番目の文字を含んでおり，かつk==i． これは，i-1番目までのいずれかのコンテストに参加した時に，現在i番目の文字と同じコンテストに最後に参加したことを表している． このとき，そのままi番目の文字のコンテストを受けることができる．&#xA;jがi番目の文字を含んでおらず，かつk!=i． これはi-1番目までのいずれかのコンテストに参加した時に，現在i番目の文字と同じコンテストに参加したことがなく， 初めてi番目の文字のコンテストに参加することを表している．&#xA;+1．これは，i-1番目までのコンテストのいずれにも参加しておらず，i番目のコンテストに初めて参加することを表す．</description>
    </item>
    <item>
      <title>ABC214の解説</title>
      <link>https://t45k.github.io/kyopuro/abc214/</link>
      <pubDate>Sun, 15 Aug 2021 13:45:18 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc214/</guid>
      <description>ABCDの四完．久々にD問題解けた．&#xA;コード&#xA;A - New Generation ABC if文で分岐する&#xA;B - How many? for文で全探索&#xA;C - Distribution 意外と難しかったと感じた割には灰diffらしい．&#xA;まずは簡単のために，時計回りに並んでいない場合を考える． i番目のすぬけ君が初めて宝石をもらう時間をtime[i]とすると， i(&amp;gt;=2)番目のすぬけ君が初めて宝石をもらうのは min(T_i, time[i-1]+S[i-1])となるので， 前から順番に計算していけば良い．&#xA;実際には時計回りに並んでいるため， 1番目のすぬけ君がN番目のすぬけ君から宝石をもらうのが最速である場合がある． これはmin(T_0, time[N]+S[N])となるので，先ほどの式と併せて min(T_i%N, time[(i-1)%N + S[(i-1)%N]])と一般化できる． あとはこの式を2周ループすれば良い．&#xA;D - Sum of Maximum Weights D問題にしては難しかった問題．&#xA;まず，以下のことが言える．&#xA;連結でない頂点u,vに対して辺(u,v)を考える時， その辺を最短パスに含む頂点の組の個数は (uの連結成分の個数)*(vの連結成分の個数) 以上から，u，v連結でなく，辺(u,v)が「uの連結成分中の辺」「vの連結成分中の辺」の重みよりも大きい（つまり，辺(u,v)が重みの最大値）場合， 辺(u,v)を繋ぐことで重みの最大値の合計値は (辺(u,v)の重み)*(uの連結成分の個数)*(vの連結成分の個数)だけ増える．&#xA;よって，重みの小さい辺から順番に連結していくことで，答えを求めることができる． 連結成分の個数はUnion Findなどで管理できる．&#xA;E - Packing Under Range Regulations 解説AC．&#xA;F - Substrings 解説AC．解説が分かりやすい．</description>
    </item>
    <item>
      <title>「世界は密室でできている」読了</title>
      <link>https://t45k.github.io/blog/the_world_is_made_out_of_closed_rooms/</link>
      <pubDate>Thu, 05 Aug 2021 17:05:34 +0900</pubDate>
      <guid>https://t45k.github.io/blog/the_world_is_made_out_of_closed_rooms/</guid>
      <description>近所の図書館の図書カードをようやく作ったので， 舞城王太郎の「世界は密室でできている」を借りて読みました．&#xA;思ったこと&#xA;一冊のページ数が少ない上に，それぞれの話も短いので，作者の文体もあいまってサクサク読める 「ルンババ12」や谷口氏の名前が出てきて，舞城作品だなってのを実感する 珍しく分かりやすい気がする ちゃんとしたミステリ </description>
    </item>
    <item>
      <title>ABC211の解説</title>
      <link>https://t45k.github.io/kyopuro/abc211/</link>
      <pubDate>Mon, 26 Jul 2021 22:41:46 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc211/</guid>
      <description>4完速解き失敗でレートが微減．コード&#xA;A - Blood Pressure けつあつそくてい．doubleで計算する．&#xA;B - Cycle Hit セットを使うなり事前にソートするなりする．&#xA;C - chokudai 一部で炎上していた問題．簡単なDP&#xA;D - Number of Shortest paths 基本的にはダイクストラ．&#xA;距離とは別に経路数の情報を持っておき，ある節点に到達したとき，&#xA;その節点での距離の最小値を更新した場合，経路数をその経路の値に置き換える その節点での距離の最小値と同じ距離だった場合，経路数を足し合わせる という操作を行う&#xA;E - Red Polyomino 解説AC．解きたかった． 赤に塗った盤面を全て記録しておいても十分メモリに余裕がある．</description>
    </item>
    <item>
      <title>ABC210の解説</title>
      <link>https://t45k.github.io/kyopuro/abc210/</link>
      <pubDate>Sun, 18 Jul 2021 14:18:29 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc210/</guid>
      <description>四完青パフォ。 今回は D 速解きがそこそこ上手くいった一方で、E に歯が立たなかったので精進したい。 コード&#xA;A - Cabbages A &amp;gt; Nになりうるのがポイント&#xA;A が N よりも小さい場合、A 個を X 円で買って、(N-A)個を Y 円で買う A が N 以上の場合、N 個を X 円で買う と場合分けする。&#xA;B - Bouzu Mekuri 愚直にシミュレーションする。 文字列を先頭から見ていき、初めに坊主を引いた方が負け。&#xA;Stream#findFirstを使うとすっきり書ける。&#xA;C - Colorful Candies 範囲内の飴ちゃんの種類を最大にする問題&#xA;範囲をスライドさせていく。 具体的には、&#xA;まずは先頭 K 個の飴の色と出現回数を辞書等を使って数えておく。この時の種類数をXとする。 K+1 個目の飴の出現回数を 1 増やし、1 個目の飴を出現回数を 1 減らす。 この時、K+1 個目の飴が初登場ならXを 1 増やし、1 個目の飴の出現回数が 0 になったらXを 1 減らす。 上の操作を、範囲をずらしながら繰り返す Xの最大値が答え D - National Railway 意外と難しかったらしい。&#xA;まずは簡単のために 1 行しかない場合を考える。</description>
    </item>
    <item>
      <title>ABC209の解説</title>
      <link>https://t45k.github.io/kyopuro/abc209/</link>
      <pubDate>Sat, 10 Jul 2021 23:14:52 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc209/</guid>
      <description>四完速解きで青パフォ． コード&#xA;A - Counting 基本的にはB-A-1だが，A&amp;gt;Bの時に限り0となる. max(B-A-1, 0)とすれば多少は楽．&#xA;B - Can you buy them all? 偶数番目の商品だけ-1して総和を計算するだけ．&#xA;C - Not Equal まず，整数列を昇順にソートしても求めたい値は変わらない．&#xA;1番目の値は全ての値から選ぶことができる． 2番目の値は1番目に選んだ値以外の値を選ぶので，C2 - 1通りから選べる． このとき，昇順にソートしているので選ぶ値の上限を考える必要がない． このように考えると，i番目の値はCi - (i-1)から選ぶことができる． このとき，(i-1) &amp;gt;= Ciとなると値を選べなくなるので答えは0になる．&#xA;そうでない場合，答えは全ての選べる値を掛け合わせた値になる．&#xA;D - Collision 問題文から，与えられたグラフが木構造であることが分かる．&#xA;木構造の場合，ある節点(a,b)の距離の偶奇は，頂点を一つ定めたときの(頂点からaまでの距離)-(頂点からbまでの距離)となる．&#xA;これは，例えば(a,b)の最小共通祖先をc，頂点（適当な節点）をd，二つの節点の距離をdis(x,y)と表す時，(頂点からaまでの距離)-(頂点からbまでの距離)の偶奇は&#xA;(dis(d,a) - dis(d,b)) % 2 = (dis(d,c) + dis(c,a) + dis(d,c) + dis(c,b)) % 2 = (dis(d,c) * 2 + dis(c,a) + dis(c,b)) % 2 = (dis(c,a) + dis(c,b)) % 2 でa，b間の距離の偶奇と一致するからである．</description>
    </item>
    <item>
      <title>ABC208の解説</title>
      <link>https://t45k.github.io/kyopuro/abc208/</link>
      <pubDate>Sun, 04 Jul 2021 23:45:41 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc208/</guid>
      <description>5完．初の黄パフォ．コード&#xA;A - Rolling Dice Bの平均値について考えればよい． 平均が1以上6以下なら達成可能．&#xA;B - Factorial Yen Coin 大きい硬貨から貪欲に計算していく&#xA;C - Fair Candy Distribution 初めに国民番号で国民をソートしておく． 国民番号の上位K%N人は余計に1個多くもらえる．&#xA;D - Shortest Path Queries 2 ワーシャルフロイドを応用する．ワーシャルフロイドについてはこちらを参照． ワーシャルフロイドの中継点をkとすると，Math.min(graph[i][j], graph[i][k] + graph[k][j])はiスタートjゴールでk以下の箇所を経由した際の最短距離となるので，問題に適当．&#xA;E - Digit Products たまたま解けた問題．桁DP．&#xA;桁DPとは，ある値Nが与えられたときに各桁に対する遷移を以下のように行うDPを指す．&#xA;一つ前で見ている桁の時点で，数字がN以下であることが確定している場合，0~9に遷移する 数字がN以下であることが確定していない場合，0~(今見ている桁の数-1)への遷移（つまり，状態1に遷移する）と今見てる桁への遷移（状態2）への遷移を行う 今回は，各桁の積がK以下になれば良いのだが，このとき積は十分に疎になるので連想配列などで持てば良い．</description>
    </item>
    <item>
      <title>Keychron K3を購入した話</title>
      <link>https://t45k.github.io/blog/keychron/</link>
      <pubDate>Fri, 11 Jun 2021 22:35:53 +0900</pubDate>
      <guid>https://t45k.github.io/blog/keychron/</guid>
      <description>Keychron K3を購入しました．&#xA;経緯 研究室ではRealforceを使っていたのですが，会社からはキーボードが支給されないと聞いたので，仕事用のキーボードを購入する必要が発生しました． 家では青軸のメカニカルキーボードを使っているので，その経験を踏まえて以下の要件を満たすキーボードを探しました．&#xA;会社はフリーアドレスなので持ち運びに困らない．具体的には以下の通り． 軽い 薄い 十分にコンパクト．個人的にはmagic keyboardと同じ配列がベスト もちろんUS配列 Fn必須 赤か茶軸のメカニカル，あるいは静電容量無接点 できればmac対応 新卒のお給料でも買える．1万円前後 Fnが必要なことからHHKB，携帯性からRealforceは簡単に除外できました． Nizも割と魅力的だったのですが，右下の配置が独特なことと高いことから除外しました． メカニカルキーボードで上記の要件を満たすキーボードはいくつか見つかったのですが， 最終的に多機能かつ安価で評判も良いKeychron K3にしました．&#xA;注文から到着まで 注文は公式サイトからできます． 英語での住所&amp;amp;電話番号入力が必要なので事前に調べておくと良いと思います．&#xA;値段は本体74\$ + 配送料20\$の計94\$でした． paypalで支払いしたところ2021年6月現在で10,802円でした．&#xA;6月5日（土）の23時過ぎに注文して到着したのが10日（木）の夜でした． 日曜を挟んでいたのを考えると割と早く届きました．&#xA;使用感 ファーストインプレッション&#xA;感想&#xA;- サイズ感: 最高&#xA;- 打鍵感: 茶軸やけどロープロのせいで反発が弱め。同時押しになったり2回押しがうまくいかんかったりする&#xA;- キートップ: 柔らかめ、爪が食い込む感覚&#xA;- 傾斜: 低め、違和感ある&#xA;- レスポンス: 若干もっさりしてる&#xA;総評: サイズ感は最高やけどそれ以外は慣れが必要かなぁ&#xA;&amp;mdash; task@FSE (@getupmax) June 10, 2021 一日使ってみましたが，本当に慣れだと思います． 仕事が終わった後に家のキーボードを触ると，逆に重くてびっくりしました． 使っていくうちに好きになっていくと思います． 個人的にはdeleteを推すときのペチペチ音が好きです．&#xA;総評 良い買い物をしたと思います． 現在は在宅なのですが，会社で使うのを楽しみにしています．</description>
    </item>
    <item>
      <title>ABC200の解説</title>
      <link>https://t45k.github.io/kyopuro/abc200/</link>
      <pubDate>Sun, 16 May 2021 11:57:55 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc200/</guid>
      <description>祝200回． 4完．&#xA;A - Century やるだけ． X00年はX世紀であることに注意．&#xA;B - 200th ABC-200 やるだけ．十分間に合う．&#xA;C - Ringo&amp;rsquo;s Favorite Numbers 2 Ai-Aj=200ということはAi≡Aj(mod 200)であることなので， 各Aを，200で割ったあまりでグルーピングして組み合わせを計算すればよい．&#xA;D - Happy Birthday! 2 解説が賢い．&#xA;先頭8個のAを見ると，2^8-1&amp;gt;200から鳩の巣原理から必ずmod200が被る和の組み合わせが存在する． bit全探索するだけ．&#xA;E - Patisserie ABC 2 きれいさ，おいしさ，人気度をそれぞれa,b,cとする．&#xA;a+b+cの小さい順に何通りあるかを確認していく(3 &amp;lt;= sum &amp;lt;= 3*N)． b,cが1以上N以下でないといけないことから，aの範囲は max(1,sum-2n) &amp;lt;= a &amp;lt;= min(n,sum-2)． このとき，bの範囲は max(1,sum-a-n) &amp;lt;= b &amp;lt;= min(n,sum-a-1)． a,bが決まればcは一意に定まる． このことから，a+b+cの和がsumの時， Σ(a=max(1,sum-2n)~min(n,sum-2))(min(n,sum-a-1)-max(1,sum-a-n)+1) 通りの選び方がある． これをO(1)で求める．&#xA;まず，bの値をaで場合分けする（min，maxを固定する）と&#xA;a &amp;gt;= sum-n-1 の時，b = sum-a-1 a &amp;lt;= sum-n-1 の時，b = 2n+a-s+1 となる そこで，aの最小値と最大値から累積和の公式を用いてsumの時の選び方を求められる </description>
    </item>
    <item>
      <title>ZONeエナジー プログラミングコンテスト “HELLO SPACE” の解説</title>
      <link>https://t45k.github.io/kyopuro/zone2021/</link>
      <pubDate>Sat, 15 May 2021 20:51:42 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/zone2021/</guid>
      <description>奇跡的に5完． コード&#xA;A - UFO襲来 やるだけ&#xA;B - 友好の印 UFOとタワーの頂上を通る直線のy切片を求める．&#xA;C - MAD TEAM 通したけど嘘解法っぽい． 想定解法は二分探索．&#xA;3人選ばないといけないのに対してN=3,000から二重ループまでしか回せない． 各要素が大きい人を選ぶほど良い結果を期待できる． つまり，各要素でソートして，上三つだけ残しておく． そして，ある二人を選んだ後に各要素のトップを加えてみて総合力を計算すれば良い．&#xA;D - 宇宙人からのメッセージ 両端キューなどに対して文字を突っ込んでいく． このときに重複を排除する．&#xA;E - 潜入 ダイクストラをする．</description>
    </item>
    <item>
      <title>第二回日本最強プログラマー学生選手権の解説</title>
      <link>https://t45k.github.io/kyopuro/jsc2021/</link>
      <pubDate>Sun, 02 May 2021 17:02:14 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/jsc2021/</guid>
      <description>5完393位でパフォーマンス爆盛りした回。 コード&#xA;A - Competition X,Y,Z&amp;lt;=10^3から、整数iに対してY/X &amp;gt; i/Zを満たす最大の値を探す。 X=1,Y=1000,Z=1000の時i=999999で最大になるので、そこから降順に探す。&#xA;B - Xor of Sequences やるだけ。 Set等で管理する。&#xA;C - Max GCD 2 2からBの間で、AからBの間に2つの倍数を持つ最大の整数を求めれば良い。 ある整数をiとすると、A以上の最小のiの倍数は(A + i - 1) / i * i、 B以下の最大のiの倍数はB/i*iで求まるので、この二つの値が異なる最大のiを求める。&#xA;D - Nowhere P まずA_1は1からP-1のP-1通り選べる。 次にA_2については1からP-1で、P-A_1でないP-2通りが選べる。 A_3以降についても、P-sum%P以外のP-2通りが選べるので、答えは(P-1)*(P-2)^(N-1)&#xA;E - Level K Palindrome 基本的には、回文で対応する文字に対して、一番出現する文字に書き換えていく。&#xA;まずはレベルを満たす最小の文字列に分解していく。 基本的には文字列を半分にするのを繰り返していく。 この時、各折り返し点が異なっている場合は書き換える。&#xA;次に、それぞれの文字列を同一にしていく。 これは、各文字列の同じ位置に存在する文字のうち、マジョリティに書き換える。&#xA;最後に各文字列が回文だった場合、そうならない様に書き換える。 これは、一つ前のマジョリティに書き換える処理を行う際に2番目に多い文字を記録しておき、 （中間点以外の）どこか一箇所をそれに書き換えれば良い。&#xA;F - Max Matrix 解説AC&#xA;出現した値をインデックス、出現回数をバリューとしたセグ木を構築するとうまくいく。</description>
    </item>
    <item>
      <title>JavaでN個の入力を良い感じにリストにする方法</title>
      <link>https://t45k.github.io/kyopuro/stream/</link>
      <pubDate>Sun, 18 Apr 2021 18:05:46 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/stream/</guid>
      <description>これが多分ベスト&#xA;Stream.generate(scanner::nextInt) .limit(N) .collect(Collectors.toList()); 配列にしたいときは&#xA;Stream.generate(scanner::nextInt) .limit(N) .mapToInt(Integer::intValue) .toArray(); </description>
    </item>
    <item>
      <title>ABC198の解説</title>
      <link>https://t45k.github.io/kyopuro/abc198/</link>
      <pubDate>Sun, 18 Apr 2021 17:47:27 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc198/</guid>
      <description>ABCEの4完。 その後Dを通した。 惜しかった。 コード&#xA;A - Div A君1個B君N-1個~A君N-1個B君1個までのN-1通り&#xA;B - Palindrome with leading zeros 意外と面倒臭い&#xA;後ろの0を全て削ってから回文確認をする&#xA;C - Compass Walking 点(X,Y)までの距離がRの倍数だったらそのまま割る。 そうでなければ、直前まで直線に向かい、そこから2歩使って到着するのが最善。&#xA;点(X,Y)がR未満の時答えが2になることに注意。&#xA;D - Send More Money 覆面算の条件から、使えるアルファベットは10種類以内になる（逆に、アルファベットが11種類以上の時、鳩の巣原理から数字が被ってしまう）。 あとは0~9までの順列をアルファベットに対応させて検証すれば良い。&#xA;E - Unique Color 木を深さ優先探索する。 今までに出現した色を記録する配列をboolean[10^5+1]とすると、以下のようなdfsで答えが求まる。&#xA;頂点xに到達した時、xの色に対応する配列の値がfalseだった場合、 xと頂点1からのパスにxの色が存在しないので、xはよい頂点になる。 逆に配列がtrueだった場合、よい頂点ではない。 xの色に対応する配列の値をtrueにする。 xの子に対して再帰的に上の手順を当てる。 xから登っていく（再帰関数を抜ける）時、xがよい頂点だったら、配列の値をfalseにしておく。 </description>
    </item>
    <item>
      <title>作ったもの</title>
      <link>https://t45k.github.io/product/</link>
      <pubDate>Thu, 25 Mar 2021 11:07:17 +0900</pubDate>
      <guid>https://t45k.github.io/product/</guid>
      <description>GitHubContributionBot GitHub のコントリビューション（草の生え具合）について Twitter で報告してくれるボット． 0 時になると&#xA;その日のコントリビューション数 その日までの連続コントリビューション日数（Streak） を呟いてくれる．&#xA;技術的には定時に GitHub のトップページをスクレイピングしてるだけ．&#xA;何か似たようなサービスが出てきて草が生えた． サービスとして公開しておくべきだった 🤔&#xA;CLIONE 類似コードの修正漏れを教えてくれるボット． GitHub Apps を用いて設計されていて，PR の作成ごとに勝手に通知を飛ばしてくれる．&#xA;論文はこちら&#xA;NIL 類似コード検出ツール．&#xA;既存のツールでは検出が難しかった「コピペされた後に大量の変更が行われた類似コード」を検出できるように設計されている． また，N-gram と転置索引を組み合わせることで高速な検出が可能となっている．&#xA;論文はこちら&#xA;Bitbucket-Server-Code-Insights-plugin BitBucket Server で、PR の diff 上にコメントのようなものを表示できる機能、Code Insights を利用するための Jenkins プラグイン。 Checkstyle や SpotBugs といった静的解析ツールや、SonarQube と行ったシステムの実行結果を PR の diff 上に表示できる。&#xA;Back-Merge-plugin main ブランチが更新された時に、main ブランチから各派生ブランチ向けへの PR を作成する Jenkins プラグイン。&#xA;Approve-LGTM-plugin Bitbucket Server 上で PR を承認した際に、LGTM な画像を投稿する Jenkins プラグイン。&#xA;Coverage Uploader for Bitbucket Server Bitbucket Server の PR の画面上にカバレッジ情報を表示するために、 IntelliJ IDEA 上で計測したカバレッジ情報を Bitbucket Server に送信する IntteliJ プラグイン。</description>
    </item>
    <item>
      <title>大阪大学大学院情報科学研究科修士課程を修了した話</title>
      <link>https://t45k.github.io/blog/graduation/</link>
      <pubDate>Wed, 24 Mar 2021 21:17:20 +0900</pubDate>
      <guid>https://t45k.github.io/blog/graduation/</guid>
      <description>2021年3月24日をもって修士課程を修了しました．&#xA;3年間の戦績は&#xA;論文誌採録*1&#xA;論文誌条件付き採録*1&#xA;国際会議採録*2&#xA;国際会議査読中*1&#xA;研究会原稿*3&#xA;で現状不採録0です&#xA;対ありでした&#xA;&amp;mdash; task@減塩 (@getupmax) March 24, 2021 研究室に所属して3年間色んなことがあった気がするので書き留めておきます．&#xA;所属前 大学に入学してからプログラミングを始めたが結構楽しめていたので，「ソースコードを書くこと」について研究できれば良いなぁと漠然と考えていた． 阪大基礎工学部情報科学科では3回生の時に各研究室の先生に着いてゼミが行われるので，前期後期ともにソフトウェア工学の研究室のゼミに参加した． 前半は「リファクタリング」について，後半は「ソースコードメトリクス」についてのゼミで，前半にゼミを担当していた先生が何となく面白そうだったので，その研究室の配属を目標にした．&#xA;B4 4月 無事目標の研究室に配属． 配属後リファクタリング的なネタをやりたいと伝える． 論文を渡されてネタを探すように言われる． 当然研究室に入ったばかりで自分ですんなりネタを決めれるわけもなく， 指導教員の先生とミーティングをするも会話が噛み合わないことが多く， 険悪な雰囲気になることが多かった気がする （主観的だが，口調が若干きつかったと感じることが多かった）． この頃から何となく「この先生とは一生分かり合えないんだろうなぁ」って思うようになり，苦手になる．&#xA;6月 ネタが決まる（先生が決めてくれた）のでとりあえずやっていく． 相変わらずミーティングでは嚙み合わないことが多かった． まあB4のはじめの頃はみんなこんなもんだろうと思い込んで過ごす． 「研究室 辛い」などで検索するようになる． 自分の打たれ弱さを実感する．&#xA;7月 院試休み． 研究室行かずに済んでラッキーくらいの気持ちでいた． 院試で研究室変えるのも手だったが負けた気分になるのでそのまま出した． 院試後はそのまま夏休みだったのでしばらく研究のことを忘れる．&#xA;10月 研究が再開する． 少しずつ進めていくが，コミュニケーションも含めて上手くいかないことが圧倒的に多くなり，常に辛い状態になる． この頃から常に死にたいと思うようになる． バイク運転中に信号無視した車が突っ込んできたらなぁみたいなことをずっと考えていた． しばらくそんな感じ．&#xA;同時期に，たまたまTwitter上でPaizaの広告を見かける． プログラミング能力を客観的に評価してもらえることがそれまでほとんどなかったことと， 研究が辛くなった時のために就職も考えないとということでとりあえずやってみる． Paizaは解答解説がないので，プログラミング力を付けるのには不向きだと思い， AtCoderをやり始める．&#xA;1月 論文を書き始める． 先生と添削のやり取りをするのだが，常に詰められてるように感じて辛くなる． 悪いことは続くもので，比較実験を行う必要があるのだが 既存研究が使ってたツールが上手く動かなくて全然実験が進まなくなる． 時間がないのでとりあえず不完全なまま卒論と研究会論文を書き上げる．&#xA;あと自分の実装を見てもらう機会があったのだが， あまりにもひどかったため研究が一段落着いたらツール作り直したほうが良いかもねって話になる． 今思えば草．&#xA;3月 研究会発表をする．&#xA;ツール作り直しをする． 作り直しに際して，研究室の実装が得意な先輩に付きっ切りで見てもらいながらプログラミングを一から叩き込んでもらう． この指導，本当にありがたく，プログラミングの基礎的ながらも重要な要素をいくつも教えてもらった． これがなかったら実装力が重視されるウェブエンジニアを職業にするという選択肢は取れなかったと思う．&#xA;M1 4月 同期が増える． またこれまで必要な日にしか研究室に来てなかった同期と，授業の関係でほぼ毎日顔を合わせてコミュニケーションを取るようになった． 他人とコミュニケーションを取るのは本当に大切で，研究の辛さが和らいでいく感じがした．</description>
    </item>
    <item>
      <title>ABC196の解説</title>
      <link>https://t45k.github.io/kyopuro/abc196/</link>
      <pubDate>Sat, 20 Mar 2021 23:48:43 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc196/</guid>
      <description>惜しくも4完． E問題で一ヵ所凡ミスがあって1WAだった． コード&#xA;A - Difference Max x-yが最大になるのはxが最大かつyが最小の時． xの最大値はbであり，yの最小値はcなので，答えはb-c．&#xA;B - Round Down 100桁の小数が与えられるので，Xを数値として読み込むのは厳しい． 一旦文字列として読み込み，それの整数部を計算する． 文字列中に.が存在しないならその文字列をそのまま， 存在するなら.で分割し，前半の文字列を出力すれ良い．&#xA;C - Doubled 一見難しそうに見えるが，全探索すれば良い． 12桁の整数全ては調べられないが，条件は前半と後半が等しいなので， 下6桁まで(1~999,999)だけを確認すれば良い． 1~999,999までの数値を2回繰り返した整数がNよりも小さいかを判定する．&#xA;D - Hanjo HW &amp;lt;= 16という条件から，全探索をしてみる． 1畳の畳の置き方の問題なので，半畳の方は考えなくて良い（余った箇所に詰めれる）． 部屋を1メートル毎に分割し(i,j)と表現するとすると， 各(i,j)に対して，&#xA;（置けるけど）畳を置かない 畳を縦に置く 畳を横に置く の3通りの選び方があるので，再帰関数等を使って， 深さ優先探索で全てを試せば良い．&#xA;E - Filters N&amp;lt;=2*10^5，Q&amp;lt;=2*10^5から全てのxiに対して各関数を当てると間に合わないので， 1つの関数を全Xにlog(Q)に当てることを考える． そうすると，先にXをソートしておいて， 関数を当てる箇所を二分探索で探せば良いことが何となく分かる．&#xA;ti=1のとき，aiの値は最後に加算しても問題ない． sumなどの変数に加算しておき，最後に計算する． ti=2(max)のとき，&amp;ldquo;ソート済みXのai以下の値が全てaiになる&amp;quot;と考える． 二分探索でai以下の値の場所を求めて，その場所から左側の値は全てaiになることを記録しておく． ti=3(min)のときも同様． </description>
    </item>
    <item>
      <title>ARC113の解説</title>
      <link>https://t45k.github.io/kyopuro/arc113/</link>
      <pubDate>Mon, 22 Feb 2021 15:03:58 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/arc113/</guid>
      <description>ABCの3完で緑パフォ．コード&#xA;A - ABC 実は一番時間がかかった問題． Aを固定した時に，BとCの組み合わせはO(K)で求まる （BがNの時，Cは1~K/Nの値を取りうるので，組み合わせの個数はK/Nになる）． よって，Aを1からKまで動かしつつ，B*C&amp;lt;=K/Aを満たすB*Cの組み合わせを求めることになる． Aを動かしてもK/Aが変わらないときは，B，Cの組み合わせの個数も変わらない． なので，B，Cの組み合わせの個数をメモしておく．&#xA;個人的には計算量の見積もりが厳しい． 入力を考えるのは簡単なので，とりあえず実装してみて一番時間がかかりそうな入力（2*10^5）を突っ込んで時間計ってみるのが良さそう．&#xA;B - A^B^C A^B^Cの1の位は10で割った余りなので，(A%10)^B^Cと答えは同じ． 次にA%10の累乗の1の位がループする回数を求める． 例えば，2の場合，2の累乗の1の位は2 -&amp;gt; 4 -&amp;gt; 8 -&amp;gt; 6 -&amp;gt; 2と4回毎にループすることが分かる． これから，ループする回数をNとすると，B^CをNで割った余りを求めれば良い． 繰り返し二乗法を使えばO(log(C))でB^C % Nを求められるので十分間に合う．&#xA;C - String Invasion あるアルファベットαが二回連続で並んでいるときに，その後ろにあるアルファベットを全てαに置換できると考えると楽． このとき，αの後ろにある全てのアルファベットの内，αではないアルファベットの個数回操作を行える． この操作はなるべく後ろからしていくのが最適なので，以下の手順で解けばよい．&#xA;後ろからアルファベットを見ていく．この時，アルファベットの種類毎の個数を記録する． 二回連続しているアルファベットαがあれば，これまで記録してきたαではないアルファベットの個数回操作を行える． 操作を行うと，今見ている以降の全てのアルファベットがαになるので，そのように個数を記録し直す． </description>
    </item>
    <item>
      <title>鶏白湯ラーメンの作り方</title>
      <link>https://t45k.github.io/blog/toripaitan/</link>
      <pubDate>Mon, 22 Feb 2021 14:28:05 +0900</pubDate>
      <guid>https://t45k.github.io/blog/toripaitan/</guid>
      <description>ラーメンが好きなので，鶏ガラを使って鶏白湯ラーメンを作りました．&#xA;材料（1人前） スープ 鶏ガラ2羽分 玉ねぎ半個 ニンニクひとかけ ショウガ適量 （お好みで手羽元とかネギの青い部分とか） タレ 醤油100cc みりん100cc （半分ずつでも良さそう） 具材 鶏モモ1枚（鶏チャーシュー用） 玉ねぎ半個（薬味用） 卵一個（味玉） （お好みでメンマ等） 麺は既製品を使いました&#xA;作り方 タレの材料を混ぜ合わせて煮切る． できたものを室温程度に冷ます． 鶏ガラは解凍しておく． 鍋に水を張り鶏ガラを茹でる． アクが出てきたら水を替える． 鍋にスープの材料と新しい水を入れ，8時間くらい炊く （水が減ってきたら適宜足していく）． 具材の鶏モモはスープと一緒に30分程度茹でる． 茹であがったものを冷ましておいたタレに漬けておく． 卵は半熟に茹で，これもタレに漬けておく． 玉ねぎはみじん切りにし，分量外の酢に漬けておく． スープを8時間程度炊いたら，中の具材を取り除いたうえで， 一人分のスープの量になるくらいまで煮詰める． 器にスープ，タレ（全部使うと濃いので適量で），麺，具を入れて完成． 感想 スープ: 100点．メチャウマ．その辺のラーメン屋より旨い気がする&#xA;麺: 縮れてないほうが好き．まぁ既製品なので&#xA;チャーシュー: パサい．鶏肉をしっとり仕上げるのはむずそう&#xA;煮卵: 硬い．茹ですぎた&#xA;玉ねぎ酢漬け: 適量やと口がさっぱりしてええ感じ．若干主張が強い&#xA;&amp;mdash; 教授のおごりで寿司@SIGSE (@getupmax) February 20, 2021 </description>
    </item>
    <item>
      <title>ABC192の解説</title>
      <link>https://t45k.github.io/kyopuro/abc192/</link>
      <pubDate>Sun, 21 Feb 2021 17:56:33 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc192/</guid>
      <description>研究も一段落付いたので競プロに復帰します．&#xA;今回はABCDの4完． コード&#xA;A - Star Xは高々10^5なのでごり押しでもできますが， 100からXを100で割った余りを引くとO(1)で求まります．&#xA;B - uNrEaDaBlE sTrInG for文で回すだけ． 大文字，小文字判定はJavaだとCharacter#isUpper(Lower)Caseを使うと一発．&#xA;C - Kaprekar Number 一見難しそうに見えますが，N&amp;lt;=10^9からNをソート対象の要素は高々9個なので， K=10^5から毎回f(x)を計算しても十分間に合います． ということで&#xA;xをchar型配列に変換する g1がxを降順にソートして得られる値，g2が昇順ソートで得られる値になる x = f(x) をK回繰り返せばOK D - Base n E問題より解いた人が少なかったD問題．&#xA;まずXが一文字の時，何進数であってもXのn進数表記の値は変わらないため， X &amp;lt;= Mなら1，そうでなければ0を出力する．&#xA;次にXが二文字以上の時は，伝家の宝刀二分探索をする． dから10^18+1の範囲から初め， XをN進数表記にしたときにMを超過しない最大のNを求める． ちなみにXのN進数表記を計算するときはBigIntegerを使うことをオススメします （オーバーフローを考慮したうえでlongを使うと1WAになった）．&#xA;E - Train 出発できる時刻を考慮したうえでDijkstraをするだけ．</description>
    </item>
    <item>
      <title>情報処理学会論文誌に論文が採録された話</title>
      <link>https://t45k.github.io/blog/ipsj_journal/</link>
      <pubDate>Sun, 17 Jan 2021 17:38:48 +0900</pubDate>
      <guid>https://t45k.github.io/blog/ipsj_journal/</guid>
      <description>情報処理学会論文誌に卒論でやっていた研究が採録されました．情報はこちら．&#xA;論文誌とは 研究をしている以上，その成果を論文としてまとめる必要があります． 論文は大きく分けて以下の4種類に大別されます（僕が知る限り）．&#xA;論文誌論文 別名: ジャーナル（journal） 研究の最終成果を投稿する場 採録されると雑誌として掲載される 学術的貢献が求められる 査読が行われる（査読とは，投稿された論文が学術的な有用性，信頼性に足るものかを他の研究者が判断するプロセスを指す） 一般的に採録率は低いらしい．電子情報通信学会だと5割弱． 投稿時に惜しくも採録に至らないと判定されても，条件付き採録として論文の修正を求められることが多い． 国内だと情報処理学会や電子情報通信学会の論文誌に投稿することが多い 会議論文 別名: 予稿集（inproceedings） レベルがピンキリ．採録率もピンキリ 投稿目的もピンキリ．研究の最終成果発表から，アイデアの議論まで 基本的に査読がある トップの会議だと条件付き採録もあったりするらしい．普通は一発採録 採録されると開催場所での発表が求められる．海外旅行に行ける 学術的貢献だけじゃなくてアイデアの面白さ，発表映えするかとかも重要 発表がある都合上，投稿締め切りが設けられる 研究会論文 別名: 技術報告（report） 基本的に研究途中での成果の報告，アイデアの議論が目的 査読がない 発表がメイン．国内旅行に行ける 学位論文 別名: thesis 学位を取得するための論文 卒論，修論は査読がない ので，書けば大丈夫 今回は論文誌論文として採録されました．&#xA;道のり 2019年に書いた卒論の内容が2021年に採録されたことから察せられるように， 採録までの道のりが非常に長かったです． そもそも卒論を書いてから国際学会投稿，論文誌投稿とステップを踏むことが多いのですが， 僕の場合は作ったツールのクオリティが低すぎたため，ツールを作り直して実験をし直すとこから始まりました． この時プログラミングを指導してくれた一つ上の先輩には本当にお世話になりました． このプログラミング指導のおかげで修士では特にツール作りに苦労することがなく研究を進められました．&#xA;一方，既存のツールが動かないという問題のせいで実験は全然進みませんでした． 本当にM1のほとんどはツールを動かすのに苦心していたと思います． 結局技術的に強い友人に相談したところ，3日で動いたのでもったいない時間の使い方をしたなぁって気分になりました．&#xA;結局論文を投稿できたのが2020年の2月初めで，条件付き採録通知が来たのが11月， 修正と再投稿を行い，採録されたのが2021年の1月となりました．&#xA;感想としては，嬉しいのが半分，ようやく終わったと安心したのが半分です． 自分としてはこの研究テーマに自身がなかったので，早く終わらしたかったという気持ちもありました． 本当に時間がかかったので，採録されたのは達成感があります．&#xA;最後に，論文投稿のきっかけをくれた教授， 何度も論文を添削してくれた指導教員， そしてプログラミングを教えてくれた先輩に心から感謝します．</description>
    </item>
    <item>
      <title>APSEC2020に参加した話</title>
      <link>https://t45k.github.io/blog/apsec_2020/</link>
      <pubDate>Sat, 05 Dec 2020 00:12:03 +0900</pubDate>
      <guid>https://t45k.github.io/blog/apsec_2020/</guid>
      <description>12/2~4にオンラインで開催されたAPSECに参加してきました．&#xA;APSECとは APSEC2019に参加した話参照．&#xA;M2の4月終わりから研究し始めた，重複コードの修正支援ボットの論文をERA（Early Research Achievement）に投げました（論文）．&#xA;Acceptance rateはTechnical Researchが36.9%（45/122），ERAが46.2%（12/26）らしかったです．&#xA;ERAのacc. rateが高いのでレベルは推して知るべしという感じです．&#xA;感想 コロナの影響で，APSECに限らず国際会議は軒並みオンラインになってしまいました．&#xA;国際会議は，成果発表の他に観光という側面もあるので，そういった意味ではモチベーションはあまり高くなかったです．&#xA;一方，オンラインのおかげ喋る内容を覚えずに済むという利点もありました．&#xA;発表ですが，チェアの方すら質問しないという謎の現象が発生したおかげで，良くも悪くも英語での質疑応答がなかったです．&#xA;オンライン会議の悪い側面として，聴衆が参加しにくいというのが挙げられるかなと感じました．&#xA;現地開催の場合，現地にいるのであまり興味がないトラックに参加したり，その結果質疑が盛り上がったりすることがあると思います．&#xA;一方，オンラインの場合は自分と関係ない発表を聞く必要がないので，あまり盛り上がらないと感じました（僕も自分のトラック以外一切参加しませんでした）．&#xA;コロナが一刻も早く収束して，元のように会議ができればと思います．</description>
    </item>
    <item>
      <title>「九十九十九」読了</title>
      <link>https://t45k.github.io/blog/999/</link>
      <pubDate>Thu, 26 Nov 2020 16:19:02 +0900</pubDate>
      <guid>https://t45k.github.io/blog/999/</guid>
      <description>苦しさを感じるなら、僕なんて愛さなくていいんだ&#xA;舞城王太郎の「九十九十九」を読みました． この本はJDCトリビュートの一冊となっており， 清涼院流水のJDCシリーズに登場する登場人物九十九十九と同じ名前を持つ人物が主役となっています．&#xA;内容としては， やっぱり舞城王太郎特有のスピード感と超メタ表現のせいで難解になっていました． とりあえず二周しましたが，全然分からなかったです． 作中作と再帰的な構成が本当によく分からなくなります．&#xA;ただ，これがディスコ探偵水曜日の前に書かれた本だと言われると納得します（書き方や登場人物を含めていろんな共通点がある）． ディスコ探偵水曜日が楽しめる人なら楽しく読めるのではないでしょうか． 繰り返し読むと理解が深まりそうではあるので， 購入を検討してむ良いかなと思いました．&#xA;次は清涼院流水の「カーニバル・イブ」を読む予定です．</description>
    </item>
    <item>
      <title>西日本近似的一周旅行五日目</title>
      <link>https://t45k.github.io/blog/tour_day5/</link>
      <pubDate>Sat, 05 Sep 2020 18:49:05 +0900</pubDate>
      <guid>https://t45k.github.io/blog/tour_day5/</guid>
      <description>五日目は帰宅の日でした． 走行距離は500kmほどです．&#xA;まずはUFOラインを通って高知まで行きました． UFOラインは愛媛と高知を結ぶ山道です． UFOラインは天空の道とも呼ばれるほど，道の標高が高いです（1,700mくらい）． なので，周りの山々を一望でき，とても景色を楽しめました． 道自体は非常に狭いので，車で行く際には注意してください．&#xA;高知では，ひろめ市場でカツオのたたきをいただきました． カツオのハランボ（お腹の部分．マグロで言うトロ）が脂が乗っておりとても美味しかったです．&#xA;お昼ご飯を食べ終わってから，大阪に帰りました． 途中大雨に振られたので，PAで休み休みしながら帰りました．&#xA;一日目 二日目 三日目 四日目 五日目</description>
    </item>
    <item>
      <title>西日本近似的一周旅行四日目</title>
      <link>https://t45k.github.io/blog/tour_day4/</link>
      <pubDate>Fri, 04 Sep 2020 18:48:58 +0900</pubDate>
      <guid>https://t45k.github.io/blog/tour_day4/</guid>
      <description>四日目は指宿からフェリーを使って道後まで行きました． 走行距離は500kmくらいでした．&#xA;まずはじめに宮崎県にある青島神社に行きました． 青島神社は島全体が神社になっています． また，島の周りの独特な形状をした岩は，自然にできたものだそうです． フェリーの時間を考えてお昼ご飯は食べませんでした（が，実はこの後高速で道を間違えたので，結局ギリギリになりました）．&#xA;大分の佐賀関からフェリーに乗り，愛媛へ向かいました． バイクでフェリーに乗るのは初めてだったので，ワクワクしました．&#xA;愛媛に着いてからは道後温泉を目指しました． 途中で海に近い駅として有名な下灘駅があったので立ち寄ってきました． 綺麗な夕焼けをバックにエモい写真を取りたかったのですが，曇っていたためうまく映えませんでした． また，この駅は海のすぐ隣にあると思っていたのですが，実は道路を一本挟んでいます．&#xA;夜は道後温泉の近くに止まりました． お風呂は道後温泉本館に行きました． 道後温泉本館はおそらく現存する最古の大衆浴場で，お風呂や扉の作りから古くからあるのが見て取れました． 全国的に有名ですが，現在も伝統を守っており，不必要な拡張などは行われていませんでした （逆に言うと，思ったよりしょぼかったです． 中はシャワーと大きな湯船が一つだけでした）．&#xA;一日目 二日目 三日目 四日目 五日目</description>
    </item>
    <item>
      <title>西日本近似的一周旅行三日目</title>
      <link>https://t45k.github.io/blog/tour_day3/</link>
      <pubDate>Thu, 03 Sep 2020 16:17:59 +0900</pubDate>
      <guid>https://t45k.github.io/blog/tour_day3/</guid>
      <description>三日目は熊本を経由して鹿児島の指宿に行きました． 走行距離は400kmくらいです．&#xA;大分から熊本へは，やまなみハイウェイを使いました． やまなみハイウェイは景観が良いことで有名なのですが， あいにく天気が崩れてしまい，霧がかって何も見えませんでした． バイクで雨の中を移動したため，体がとても冷えた上に バイクを傾けたら滑りそうになったこともあって死ぬかと思いました．&#xA;熊本県では研究室の先生おすすめの天外天さんのラーメンを食べました． かかっているニンニクパウダーの香りが良く，美味しかったです．&#xA;その後ひたすら南下し指宿温泉まで行きました． また，指宿温泉の近所の龍宮神社に行きました． 龍宮神社はその名の通り，浦島太郎の物語の発祥となった神社です．&#xA;晩御飯は近所のイオンで買った鶏のたたきと芋焼酎にしました． イオンで普通に生食用の鶏肉が売ってたり，焼酎の品揃えが異様に良かったりしたところに鹿児島を感じました． イオンから桜島が見えました． 一日目 二日目 三日目 四日目 五日目</description>
    </item>
    <item>
      <title>西日本近似的一周旅行二日目</title>
      <link>https://t45k.github.io/blog/tour_day2/</link>
      <pubDate>Wed, 02 Sep 2020 19:28:19 +0900</pubDate>
      <guid>https://t45k.github.io/blog/tour_day2/</guid>
      <description>2日目は広島県を経由して大分まで行きました． 1日で500km以上移動したので結構疲れました．&#xA;厳島神社（修理中の姿） 大鳥居が見れなくて残念でした．&#xA;お昼ご飯の「あなごめし うえの」さんの穴子めし 今まで，穴子は鰻の下位互換と考えていましたが，ここの穴子めしは本当に美味しくて， その考えが覆されました． 穴子が肉厚で弾力があり，それが炭火で焼かれていて香ばしかったです．&#xA;次に，山口にある錦帯橋に行きました． 本来予定にはなかったのですが，どうやら広島，山口ツーリングではそこに行くのが鉄板らしかったので．&#xA;その後，福岡を素通りして大分にある別府温泉に行きました． 本州と九州を繋ぐ橋で風が強すぎて半車線くらい流された時は死ぬかと思いました． 高速道路で道を間違えて次のICでUターンする経験もしました． 晩御飯は近くの居酒屋で取りました． 大分名物のとり天や豊後アジ，豊後サバを楽しみました． 一日目 二日目 三日目 四日目 五日目</description>
    </item>
    <item>
      <title>西日本近似的一周旅行一日目</title>
      <link>https://t45k.github.io/blog/tour_day1/</link>
      <pubDate>Tue, 01 Sep 2020 19:28:19 +0900</pubDate>
      <guid>https://t45k.github.io/blog/tour_day1/</guid>
      <description>1日目は島根県に行きました． 1日で400km近くバイクで移動しましたが，高速がメインだったのでそこまで疲れませんでした． 高速を降りてからヘルメットを確認してみると，移動中にぶつかったであろう小さい虫の死骸がたくさんへばりついていました&amp;hellip;&#xA;出雲大社 お昼ご飯の出雲そば． 出雲そばはそばを3つの器に分けて提供するのが特徴的です． チェックインまで時間があったので松江城にも行きました． 宿に着いた途端に立ちゴケしてブレーキレバーを壊しました． 夕飯は，松江のイオンで買った地酒とお寿司でした． 一日目 二日目 三日目 四日目 五日目</description>
    </item>
    <item>
      <title>ABC177の解説</title>
      <link>https://t45k.github.io/kyopuro/abc177/</link>
      <pubDate>Sun, 30 Aug 2020 16:35:35 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc177/</guid>
      <description>5完． コード&#xA;A - Don&amp;rsquo;t be late 規定の時間歩き切った際の距離が待ち合わせ場所までの距離以上であれば良い．&#xA;B - Substring 制約が緩いのでSの0以上|S|-|T|以下文字を先頭とした部分文字列とTを比較すれば良い．&#xA;C - Sum of product of pairs 愚直にやると時間に間に合わない．&#xA;答えはA1 * (A2 + A3 + ... An) + A2 * (A3 + ... + An) + ... + Ai * (Ai+1 + ... + An) + ...なので， A2からAnまでの累積和を取ってから掛け算を行えば良い．&#xA;D - Friends Union-Findで殴る．&#xA;問題文から，Union-Findを使うと友達グループは簡単に求まる． 全ての人について「同じグループの中に友達がいない」という状況を達成するためには， 一番大きい友達グループと同じサイズのグループに分割すれば良い．&#xA;E - Coprime まず全てのAiに対してGCDをとって，与えられた数字列がnot coprimeか否かを判定する． not coprime出ない場合，次にpairwise coprimeかどうかを判定する． ここで，「全ての組が互いに素である」とは，与えられた数字列の数字を素因数分解した際に，素数が約数となるのは高々1回までと同意である． Ai&amp;lt;=10^6から，素数の最大値は1000以下，あるいは1000以下の素数で割り切った後に残る数字（1以外）となる． なので，先に1000以下の素数をエラトステネスの篩などで用意しておき， 各Aiに対して各素数で割れるかどうかを判定する． 割れる場合，その素数を記録する． すでに記録した素数で割り切れた場合，互いに素でない数字の組が存在することになる．</description>
    </item>
    <item>
      <title>ABC176の解説</title>
      <link>https://t45k.github.io/kyopuro/abc176/</link>
      <pubDate>Mon, 24 Aug 2020 17:05:57 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc176/</guid>
      <description>気持ち良く5完． コード&#xA;A - Takoyaki 日本語をきちんと噛み砕かないと解けない問題． 答え自体は(X + N - 1) / N * Tするだけ．&#xA;B - Multiple of 9 各桁の合計を9で割るだけ&#xA;C - Step 前から順番に見ていき，今見ている人の身長が前の人以上になるように踏み台を使うのが最適．&#xA;なので，人iが見てきた中で最大の身長より小さければ，その差を足し合わせ， それより大きければ身長の最大値を更新すれば良い．&#xA;D - Wizard in Maze 意外と解ける人が少なかった問題&#xA;． 移動をコスト0，ワープをコスト1としてダイクストラすれば良い．&#xA;E - Bomber これが緑diffなの意外．&#xA;最初に各列，行ごとの爆破対象の個数を数えていく． 次に，列，行ごとで爆破対象が最大のもののみをフィルターする． 最後に残った列，行を組み合わせた際に爆破対象が最大となるものを選ぶ． この時，選んだ列，行の交差点に爆破対象がない場合合計個数は列の値 + 行の値， そうでない場合は列の値 + 行の値 - 1になる． なので，交差点に爆破対象がないように選びたい． 爆破対象の数は高々M個なので，交差点がMを超過するとき，必ず爆破対象が存在しない交差点がする． 逆にM以下の場合は，全ての交差点を確認しても制限時間に間に合う．</description>
    </item>
    <item>
      <title>ABC175の解説</title>
      <link>https://t45k.github.io/kyopuro/abc175/</link>
      <pubDate>Sun, 16 Aug 2020 19:58:10 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc175/</guid>
      <description>オンタイム参加せず． バチャやると3完だったので参加しなくてよかった&amp;hellip;&#xA;コード&#xA;A - Rainy Season 高々3文字なので全ての場合を列挙した方が良さそう．&#xA;B - Making Triangle 高々N &amp;lt;= 100なので3重ループでOK．&#xA;C - Walking Takahashi 個人的に結構難しかった問題．&#xA;Xは最初から絶対値として扱って良い． X &amp;gt;= K * Dの場合はX - K * Dが最適となる．&#xA;そうでない場合．まず　K2 = X / Dとすると0 &amp;lt; X - K2 * D &amp;lt; Dを満たすK2が得られる． ここからK2の偶奇がKと一致する場合そのKを，一致しない場合はK2+1が答えとなる．&#xA;K * Dが64bitに収まらないに注意．&#xA;D - Moving Piece 場合分けが面倒くさくて実装量が多くなる問題&#xA;． まず初めにマスのグループ分けを行う． というのも始める場所によっては行けないマスが存在することもあるからである（例えば2 1 4 3だと1からスタートすると1 -&amp;gt; 2 -&amp;gt; 1を繰り返す）． グループ分けは愚直にシミュレーションしても良いし，UnionFindTreeを用いてもできる．&#xA;分けたグループそれぞれに対して，スコアを計算する．&#xA;Kがグループのサイズ以下の場合&#xA;グループに含まれる各値をスタート地点にして，シミュレーションする． シミュレーションの途中のスコアも全て記録しておき，最大値を取得する Kがグループのサイズを超過する場合 グループの各数値iに対するCiの総和が 0より大きい場合</description>
    </item>
    <item>
      <title>ABC174の解説</title>
      <link>https://t45k.github.io/kyopuro/abc174/</link>
      <pubDate>Tue, 04 Aug 2020 13:48:43 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc174/</guid>
      <description>5完． Fが水diffだったのに解けなくて厳しい． コード&#xA;A - Air Conditioner 条件分岐するだけ&#xA;B - Distance 与えられたN個の座標の原点からの距離を計算していくだけ．&#xA;また，こういう時，小数点の計算などは誤差が発生しやすいので，平方根をとる計算はせず， 全て二乗で計算した方が良い． int型だとオーバーフローするので注意．&#xA;C - Repsept 証明が難しい問題．&#xA;C問題なので，時間いっぱい（10^7くらい）計算して答えが見つかれば答えを，見つかれなければ-1を出力する方針で解いた． 計算じたいは，最初にX = 7, i = 1として，XがKで割れればiを出力し， 割れなければX &amp;lt;- (X * 10 + 7) % K, i &amp;lt;- i + 1と更新すれば良い．&#xA;D - Alter Altar なんとなく解けた問題．&#xA;答えは次のいずれかの小さい方&#xA;玉を赤か白に統一する swapして左側に赤，右側に白を揃える 下の方法だと，最左の白玉と最右の赤玉の間にある玉の赤と白の少ない方の個数が答えになる．&#xA;E - Logs なんとなく解けた問題．想定解はにぶたん．&#xA;まずK &amp;lt;= 10^9という条件を無視すると，丸太iとその切断回数jに対して， i/jの天井関数の降順に並べるようにした 優先度付きキューに丸太を入れて，K回先頭の割る回数を増やすという操作で解ける(以降，操作O)． なので，Kを10^5くらいにできれば，この操作で大丈夫である． Kを減らす方法として，はじめに丸太iの長さに応じて適切な切断回数を決めておき， その切断回数の総和をKから引いた上で，操作Oに入ればよい． 初期切断回数として，丸太の長さの総和に対する割合を利用できる． つまり，丸太の長さの総和Sに対して，丸太iの長さがLiの時， K * (Li / S)を初期切断回数とすれば良い．&#xA;F - Range Set Query 解説AC．クエリをソートするという発想．</description>
    </item>
    <item>
      <title>「きまぐれロボット」読了</title>
      <link>https://t45k.github.io/blog/kimagure_robot/</link>
      <pubDate>Sat, 25 Jul 2020 20:46:40 +0900</pubDate>
      <guid>https://t45k.github.io/blog/kimagure_robot/</guid>
      <description>星新一のきまぐれロボットを読みました．&#xA;この本を読んだ経緯ですが，楽天で買い物をしたときにもらった 電子書籍の割引券の使い道に困っていたところ， 友人に星新一を進められたのがきっかけです．&#xA;ついこの間までしばらく本をあまり読んでいなかったうえに， ここ最近は長めのミステリばかり読んでいたので， ショートショートは本当に久しぶり（もしかしたら初めて）でした． 伏線を積み重ねまくって最後にひっくり返すミステリに対して， ショートショートは長くても3ページ程度でオチがつくので， スッと読み進められました． また，すぐ話が切り替わるので，飽きることなく最後まで読めました．&#xA;思ったよりショートショートが面白かったので， また電子書籍のクーポンをもらえたら星新一の本をもう一冊買っても良いかなと思いました．</description>
    </item>
    <item>
      <title>「ジョーカー 旧約探偵神話」読了</title>
      <link>https://t45k.github.io/blog/joker/</link>
      <pubDate>Sat, 18 Jul 2020 00:30:49 +0900</pubDate>
      <guid>https://t45k.github.io/blog/joker/</guid>
      <description>清涼院流水の「ジョーカー 旧約探偵神話」を読みました．&#xA;全編を通して「メタミステリ」「過去のミステリに対する挑発」がひしひしと伝わってくる内容でした． 特にミステリ四大奇書である「ドグラマグラ」「匣の中の失楽」「虚無への供物」「黒死館殺人事件」は文中で何度も言及されており， リスペクトが感じられました． 本文中でミステリの30の原則を挙げ，それを達成しようとする姿勢から，ミステリの総決算だと評されるのもうなずけました．&#xA;内容自体は前作コズミックと被っている部分もありましたが（作中作など），どんでん返しからのどんでん返しなど目を見張るような場面もいくつもありました． ラスト（真犯人）自体は読了直後はあまり納得いきませんでしたが，この直後にコズミックの内容がくることを考えるとなんとなく理解できました．&#xA;少し残念なところは，今作は時系列的に前作の前の話であり，前作中で今作の事件内容が言及されることもあったため， 誰が殺されないかなどが薄々わかってしまったことです．&#xA;次回は，同じく清涼院流水のカーニバル・イブを読む予定です． そろそろ目的だった舞城王太郎の九十九十九を読んでも良いかもです． また，いつかミステリ四大奇書も読める日が来ればなぁとは感じています．</description>
    </item>
    <item>
      <title>エイシングプログラミングコンテスト2020の解説</title>
      <link>https://t45k.github.io/kyopuro/aising2020/</link>
      <pubDate>Mon, 13 Jul 2020 18:19:23 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/aising2020/</guid>
      <description>4完． コード 実装が重かった印象．&#xA;A - Number of Multiples for文で回すだけ&#xA;B - An Odd Problem for文で回すだけ&#xA;C - XYZ Triplets ゴリ押し全探索&#xA;N&amp;lt;=10^4から，x,y,zそれぞれの最大値は10^2になることが分かる． なので，x，yを1から10^2まで全探索しても計算量は全体で10^8に抑えられる．&#xA;計算方法だが，xとyが決まればあとはzの二次方程式となるため，解の公式を使えば条件を満たすzが存在するかがO(1)で分かる．&#xA;D - Anything Goes to Zero 意外と難しかったらしい問題&#xA;条件から，各Xiを最初に割るのは，popcount(X)±1となる． また桁iが0の時，Xi = X + 2^i，1の時，Xi = X - 2^1となることから， Xの値と各2^iの値を最初に求めておけば，最初の余を求めるところ以降は愚直にやっても間に合う． Xの値と各2^iの値は非常に大きくなる可能性があるので，何らかの値で割った余りを利用したい． ここで，条件から，各Xiを最初に割るのは，popcount(X)±1となるので，popcount(X)±1で割った余りを記録して， 桁iの値で使い分ければ良い.</description>
    </item>
    <item>
      <title>ABC173の解説</title>
      <link>https://t45k.github.io/kyopuro/abc173/</link>
      <pubDate>Mon, 13 Jul 2020 17:52:00 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc173/</guid>
      <description>4完． コード&#xA;A - Payment 愚直にforループを回しても良いが，Nが最大10,000なのを踏まえて， 10,000 - Nをしてお釣りを1000で割った余りを求めると早い．&#xA;B - Judge Status Summary switch文で数え上げるだけ．&#xA;C - H and V 典型的なbit全探索の問題． 縦，横でbit全探索して，該当行を赤く塗った後に盤上の黒いマスの個数を数える．&#xA;D - Chat in a Circle なぜ解けたかよくわからなかった． 直感的には，Aiをソートした後に&#xA;A1 A2を列に加える A3，A4を交互に列に加える．A1 A3 A2 A4となる A5，A6，A7，A8を交互に列に加える．A1 A5 A3 A6 A2 A7 A4 A8となる これを繰り返す． みたいな．</description>
    </item>
    <item>
      <title>「コズミック 世紀末探偵神話」読了</title>
      <link>https://t45k.github.io/blog/cosmic/</link>
      <pubDate>Wed, 01 Jul 2020 11:05:57 +0900</pubDate>
      <guid>https://t45k.github.io/blog/cosmic/</guid>
      <description>清涼院流水の「コズミック 世紀末探偵神話」を読みました．&#xA;清涼院流水は，僕が敬愛する作家である西尾維新や舞城王太郎が影響を受けたと公言している作家なので，どんな本を書いているのか昔から非常に興味がありました．&#xA;読んだ感想ですが，久しぶりにページを捲る手が止まらない本を読んだ気がします． 最初は分厚い上に延々と殺人事件が続くので若干退屈でしたが，探偵の推理パートに入ると一気に面白くなりました． 特に，最後の九十九十九が推理をする直前，読者への挑戦状あたりはずっと興奮していました．&#xA;犯人は実は作者みたいなメタ的な展開を予想していたのですが，きれいに納得のいく形で完結していたのも良いと思いました． 前半の作中作が大きなヒントになっていたとは思わなかったです．&#xA;この流れで，次も清涼院流水のジョーカーを読む予定です．</description>
    </item>
    <item>
      <title>ABC172の解説</title>
      <link>https://t45k.github.io/kyopuro/abc172/</link>
      <pubDate>Wed, 01 Jul 2020 10:38:47 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc172/</guid>
      <description>C，D問題に緑diffが出て結構阿鼻叫喚な人が多かった回． 4完．&#xA;コード&#xA;A - Calc 計算するだけ&#xA;B - Minor Change 問題文から，SとTの同じ位置で文字が異なる回数を数え上げれば良いことが分かる．&#xA;C - Tsundoku 貪欲だと解けない問題．&#xA;A，Bどちらの本も上限が10^5なので，全ての組み合わせを見ると時間が足りなくなる． ここで，本は上から見ていくというルールから，累積和をとっても問題ないことに気付ける． 累積和が取れるので，Aは前から見ていき，Bは二分探索できることに気付けるので，あとは実装するだけ．&#xA;D - Sum of Divisors 最近流行のエラトステネス的問題．&#xA;全ての数字の約数の個数をそれぞれ求めていたら遅いので，前から素数を見て，その素数を約数として持つ値に約数として加えていく方針でやる．&#xA;実装としては，以下のようにする．&#xA;長さNの配列を2つ用意する． 配列Aは1で，配列Bはその添字で初期化する． 配列Aは約数の個数を，配列Bは素数かどうかを判定するのに使う． 2 &amp;lt;= i &amp;lt;= √Nとして，配列を順番に見ていく． Biが2以上の時，iは素数となる．なので，iの倍数jに対して，jがiでk回割れる(= log(i,j))とすると Ak *= k + 1 Bk /= i ^ k と更新する Biが1の時，iは素数なので何もしない 配列Aに約数の個数が記録できたので，√N以上の素数に注意しながら欲しい値を計算する． </description>
    </item>
    <item>
      <title>ABC171の解説</title>
      <link>https://t45k.github.io/kyopuro/abc171/</link>
      <pubDate>Tue, 30 Jun 2020 22:33:15 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc171/</guid>
      <description>難易度が暴落した回．&#xA;5完．&#xA;コード&#xA;A - αlphabet やるだけ． JavaならCharacter#isUpperCaseとかが使える．&#xA;B - Mix Juice ソートして前からK個選ぶ．&#xA;C - One Quadrillion and One Dalmatians 与えられた数字を26進数に変換する問題．&#xA;Nをデクリメントし Nを26で割ったあまりを求め(これを使う) N /= 26 をする を繰り返す．&#xA;D - Replacing C問題よりわかりやすい．&#xA;最初に全ての和Sと，それぞれの数字が何回出てくるかを記録しておく． 各クエリ毎に以下の操作をすれば良い．&#xA;与えられたCに対して，SからC*(Cの出現回数)を引く 与えられたDに対して，SにD*(Cの出現回数)を加える Dの出現回数にCの出現回数を加える Cの出現回数を0にする E - Red Scarf まさかの茶diff．Nが偶数という制約があるのを知らんかった&amp;hellip;&#xA;すぬけ君iのスカーフに書かれた整数をbiとすると&#xA;a1 = b2 ^ b3 ^ ... ^ bn a2 = b1 ^ b3 ^ ... ^ bn a3 = b1 ^ b2 ^ ... ^ bn .</description>
    </item>
    <item>
      <title>ABC170の解説</title>
      <link>https://t45k.github.io/kyopuro/abc170/</link>
      <pubDate>Sat, 20 Jun 2020 11:52:18 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc170/</guid>
      <description>無念の3完． コード&#xA;A - Five Variables やるだけ． Listを作ってList#indexOfで探すと楽．&#xA;B - Crane and Turtle ツルカメ算． ループを回す．&#xA;C - Forbidden List 解答が燃えた問題．&#xA;Xが100以下なので，答えは101以下になる． したがって，0から101までの，数列に含まれていない数字に対してXとの差を計算するだけ．&#xA;D - Not Divisible 解けなかった．&#xA;エラトステネスの篩のイメージ． 数列A中の最大値をAmaxとすると，数列Aを昇順に見てsqrt(Amax)までの数字の倍数を全て消す作業をする． 最後に残った数字の中でダブりがないものが答え．&#xA;E - Smart Infants データ構造で殴る問題． Javaの標準ライブラリにMultiSetはないので少し考える必要がある． 今回は各幼稚園の園児のレートをTreeSetで，全ての幼稚園の最小値をセグ木で持つと，転園は以下の操作で行われる． また，各園児が現在所属している幼稚園の情報を持つとする．&#xA;Cjの園児が所属している幼稚園(TreeSet)からCjを消す． その幼稚園に関してセグ木の値を更新する．もし幼稚園に園児がいないならInteger.MAX_VALUEとする． 幼稚園DjにCjを加える． 幼稚園Djに関してセグ木の値を更新する． セグ木の全ての範囲に対してクエリを投げる．これが平等さになる． </description>
    </item>
    <item>
      <title>東京海上日動プログラミングコンテスト2020の解説</title>
      <link>https://t45k.github.io/kyopuro/tokiomarine2020/</link>
      <pubDate>Sun, 14 Jun 2020 18:55:26 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/tokiomarine2020/</guid>
      <description>3完． コード&#xA;A - Nickname 与えられた文字列の先頭3文字を抜き出すだけ．&#xA;B - Tag 非鬼が鬼より右側にいる場合，BはAに捕まらいためには右側に逃げるのが最適となる． 鬼と非鬼がT秒移動した時にいる箇所は，&#xA;鬼: A + V*T 非鬼: B + W*T となる． 鬼の座標が非鬼の座標以上に右側にいる(=より座標が大きい)と捕まるので，それを判定するだけ&#xA;C - Lamps いもす法をすると1回の操作はO(N)で達成できるので，K回やるとO(NK)となる(いもす法のやり方: Aiの値がdの時，座標i-dに+1，座標i+d+1に-1を加え，最後に累積和する)． O(NK)なので，最大で4*10^10程度の計算量となってしまいそうだが，ここで問題文から以下のことが言える．&#xA;全ての電球の明るさがNとなった場合，それ以降の操作で明るさは増えないため，そこで操作を打ち切って良い&#xA;操作回数が最大になるのはN=10^5，K=10^5，全ての電球の明るさの初期値が0の時なので，これを試してみると時間に十分間に合う．&#xA;あとはやるだけ．&#xA;解答を見ると，操作回数はO(log N)で抑えられるらしい．</description>
    </item>
    <item>
      <title>ABC169の解説</title>
      <link>https://t45k.github.io/kyopuro/abc169/</link>
      <pubDate>Mon, 01 Jun 2020 13:25:09 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc169/</guid>
      <description>久々のABC水パフォ． コード&#xA;A - Multiplication 1 読み込んで掛け算して出力するだけ．&#xA;B - Multiplication 2 与えられた数字の中に0があれば確定で0． それ以外の場合，それぞれ掛けて10^18を越えるかを確認すれば良い． JavaだとBigIntegerが使える． 比較はBigInteger#compareToで，0より大きければ1が返るっぽい．&#xA;C - Multiplication 3 罠．&#xA;JavaだとBigDecimalが使える． 解説通りにやるとするなら，一旦文字列で読み込んで，小数点を消した上で整数に変換すると良さそう．&#xA;D - Div Game まずは素因数分解する． 問題の条件から素数pに対して，p^1，p^2，p^3，&amp;hellip;，p^kと割っていくのが最適となる． したがって，各素数の出現回数からkを求めれば良い． p^kまで作るには，出現回数は1+2+3+...k=k(k+1)/2個必要となる． これは，kを1から全部列挙して探せば良い． 出現回数の最大値は，N&amp;lt;=10^12≒2^40から高々40回程度なので，全列挙しても十分間に合う．&#xA;E - Count Median たまたま解けた．&#xA;とても単純化してみる．&#xA;Nが奇数の時 N=3で，以下のような時を考える．&#xA;|---| |---| |---| a b c d e f この時，明らかに中央値はc~dの整数値になる．&#xA;このことから，何となく中央値は(0-indexedで)前からN/2番目の開始位置と後ろからN/2番目の終了位置の間の整数値であると考えられる．&#xA;Nが偶数の時 N=4で，以下のような時を考える．&#xA;|---| |---| |---| |---| a b c d e f g h この時，中央値は((c~dの値)+(e~fの値))/2となる． また，片方を1動かせば，中央値は1/2変化するので，中央値は1/2刻みとなる． 中央値候補の最小値は(c+e)/2，最大値は(d+f)/2となるので，その間の1/2刻みの値が中央値になると考えられる．&#xA;一般性は，あります！&#xA;F - Knapsack for All Subsets 解説AC．</description>
    </item>
    <item>
      <title>NOMURA プログラミングコンテスト2020の解説</title>
      <link>https://t45k.github.io/kyopuro/nomura2020/</link>
      <pubDate>Sun, 31 May 2020 15:57:56 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/nomura2020/</guid>
      <description>何とか3完． コード&#xA;A - Study Scheduling 時間を分に直して引き算するだけ．&#xA;B - Postdocs 例えば，?をPにした場合，その右側にDがある時だけ指数が1増えるのに対して，Dにすると確実に指数が1増えることから，全ての?をDに変換するのが最適になる．&#xA;C - Folia 解けてる人多くてびっくりした． 厳密な証明はeditorial参照．&#xA;初めに木を上から下の方へ見ていって，それぞれの深さでの葉でない頂点(以降，節)の最大値数を求めていく． 深さiの葉の数がAiの時，深さi-1での節の数がAi/2未満の時，Ai個の葉を生成できないので条件を満たす木は存在しない．&#xA;次に，木を下から上へ見ていき，各深さでの節の数を最適化していく． 木の頂点数を最大にするためには，各深さiに対して節の数を最大化したい． 節の数は，深さi+1の頂点数より大きくできない（全ての節は1つ以上の子を持つ），また，初めの操作により，深さiの節の個数から(深さi+1の頂点)個の子を産めることが分かっている． したがって，深さiでの節の数の最大値はmin(深さiでの節の数，深さi+1での頂点の数)となる． あとはこれを再帰的に計算して足し合わせるだけ．&#xA;この解き方だと，n=0がコーナーケースになることに注意(n=0, A0=1の時のみ答えが1で，それ以外は-1)</description>
    </item>
    <item>
      <title>「阿修羅ガール」読了</title>
      <link>https://t45k.github.io/blog/ashura-girl/</link>
      <pubDate>Thu, 28 May 2020 00:23:42 +0900</pubDate>
      <guid>https://t45k.github.io/blog/ashura-girl/</guid>
      <description>舞城王太郎の阿修羅ガールを読みました．&#xA;一人称視点で進んでいくのですが，主人公の心の声の喋り方がとても真に迫った感じだったのが印象的でした． 特に，第二部の後半の進め方がすごく理解しやすく，場面をイメージしやすかったです． 他に，ディスコ探偵水曜日でも登場した桜月淡雪が出てきたのはニヤリとしました． 舞城王太郎の作品で西暁が出てこないのは珍しいのではないでしょうか．&#xA;今回，人生で初めて電子書籍を試してみました． 読んだページの量で達成感を感じる人なので，どのくらいのページ読んだのかが直感的にわからない電子書籍は読書の達成感は薄かったです．&#xA;次は，舞城王太郎と西尾維新が崇拝している（であろう）清涼院流水の「コズミック」を読む予定です．</description>
    </item>
    <item>
      <title>AGC044の解説</title>
      <link>https://t45k.github.io/kyopuro/agc044/</link>
      <pubDate>Wed, 27 May 2020 23:41:26 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/agc044/</guid>
      <description>太陽でしたがNoSubなのでレートは変わらなかったです(NoSubというシステムをよく理解していなかったので，入力するのではないかとドキドキしてました)． A，Bの解説． コード&#xA;A - Pay to Win 400点問題だと高を括って望んだら痛い目にあった．&#xA;簡単に説明するとNから2，3，5で割っていくだけ． メモ化(b|d)fs． メモは値をキー，コストをバリューとしたMapで持つ． bfsで解く場合は，キューから取り出した値Kに対して&#xA;2で割れるか試す 割れる場合: 現在のコスト+min(a,d*K/2)（2で割るか，同じ値だけ1を引くかのコストが小さい方）がメモ[K/2]を更新できなければ何もしない．更新できれば，K/2をキューに追加する． 破れない場合: K+1とK-1は2で割れるので，割れる場合と同じ処理をする． 3で割れるか試す 割れる場合: 現在のコスト+min(b,d*2*K/3)がメモ[K/3]を更新できなければ何もしない．更新できれば，K/3をキューに追加する． 破れない場合: K-K%3とK+3-K%3はKで割り切れるので，割れる場合と同じ処理をする 5で割れるか試す．略 をやるだけ．&#xA;B - Joker 計算量の見積もりが難しい問題．&#xA;N&amp;lt;=500に対して，与えられる座標の数はN^2なので，座標が与えられる度に(d|b)fsすると間に合わないように見える． しかし，実は間に合う． 1回の(b|d)fsでいくつかの座標の端からの距離が減る では全ての走査で行われる操作は合計でO(n^3)で収まる 例えばN=6の時，最初の各座標の端からの距離は以下のようになる&#xA;0 0 0 0 0 0&#xA;0 1 1 1 1 0&#xA;0 1 2 2 1 0&#xA;0 1 2 2 1 0&#xA;0 1 1 1 1 0&#xA;0 0 0 0 0 0</description>
    </item>
    <item>
      <title>ABC168の解説</title>
      <link>https://t45k.github.io/kyopuro/abc168/</link>
      <pubDate>Tue, 19 May 2020 19:54:50 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc168/</guid>
      <description>速解き回だったけど速解き失敗． 4完． コード&#xA;A - ∴ (Therefore) switch文を使う問題． コードが長くなりがち． Kotlinだと気持ちよく書ける．&#xA;fun main() { Scanner(System.`in`) .run { when (this.nextInt() % 10) { 3 -&amp;gt; &amp;#34;bon&amp;#34; 0, 1, 6, 8 -&amp;gt; &amp;#34;pon&amp;#34; else -&amp;gt; &amp;#34;hon&amp;#34; }.apply(::println) } } B - &amp;hellip; (Triple Dots) やるだけ． Sの長さがKを上回っているとき，S.substring(0, K.length)．&#xA;C - : (Colon) 数学．&#xA;極座標か余弦定理を使うと簡単に解ける． 意外と二つの針の間の角度を求めるのが曲者．&#xA;D - .. (Double Dots) 嫌な気持ちになります．&#xA;問題の条件から何となく根付き木のような構造が思い浮かぶので，幅探するだけ．&#xA;E - ∙ (Bullet) 解説AC&#xA;解く手順としては&#xA;仲の悪いイワシを組み合わせないようにする方法 最終的な組み合わせを数え上げる方法 の2つを考える． 1. 仲の悪いイワシを組み合わせないようにする方法 Ai * Aj + Bi * Bj = 0という条件から，美味しさと香り高さがどちらも0のイワシは全てのイワシと仲が悪い． それ以外のイワシについて考えると，仲が悪くなるにはAi = a, Bi =bの時，Aj = kb, Bj = -kaとなる必要がある(kは0以外の整数)． なのでイワシを2種類のグループに分ける．</description>
    </item>
    <item>
      <title>ABC167の解説</title>
      <link>https://t45k.github.io/kyopuro/abc167/</link>
      <pubDate>Mon, 11 May 2020 11:43:31 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc167/</guid>
      <description>4完． コード&#xA;A - Registration 文字列Sと文字列Tの最後の文字を消した文字列が同等か確認する． javaだと S.equals(T.substring(0, S.length))&#xA;B - Easy Linear Programming A,B,Cの順番になるべく多くカードを取ると最大値になるので&#xA;KがA以下なら1のカードをK枚取って和はK Kが(A+B)以下なら，1のカードをA枚，0のカードを取れるだけ取って和はA それ以外なら1をA枚，0をB枚，-1を(K-(A+B))枚取って和は2A+B+K C - Skill Up bit全探索するだけ問題．&#xA;N&amp;lt;=12なので，全て試しても2^12≒4000通りなので十分間に合う．&#xA;D - Teleporter ABC030_Dとほぼ同じ問題．&#xA;K&amp;lt;=Nのとき K回のテレポートを愚直に計算しても間に合う．&#xA;K&amp;gt;Nの時 鳩の巣原理的に考えると，必ずどこかでループが発生することになる． なので，1ループで訪れる町の数でmodを取る．&#xA;E - Colorful Blocks 時間内に解けなかった．&#xA;全て隣り合わない組み合わせは m*(m-1)^(n-1)になる． 1組隣り合う場合，その隣り同士は同じ色なので ↑/(m-1) ↑に組み合わせをかける．一つ右とペアになると考えれば n-1C1 通り 2組以降も同じように考える．</description>
    </item>
    <item>
      <title>「クビシメロマンチスト 人間失格・零崎人識」読了</title>
      <link>https://t45k.github.io/blog/easy_love_easy_no/</link>
      <pubDate>Wed, 06 May 2020 20:45:52 +0900</pubDate>
      <guid>https://t45k.github.io/blog/easy_love_easy_no/</guid>
      <description>西尾維新の戯言シリーズ2作目であるクビシメロマンチストを読みました． amazon&#xA;高校生くらいの時に一度読んだのですが，面白かったのを覚えていたため古本で購入しました． 2度目でしたがやっぱり面白くかったです． 中二臭い言い回し，叙述トリック，そして完璧なラストと個人的にツボにはまる部分が多く，24年間生きてきて面白かった本暫定一位です． 西尾維新といえば物語シリーズが有名ですが，このシリーズも負けず劣らず面白いのでぜひ皆さんに読んで欲しいとは思います． 区分的にはライトノベルになるので，10年後，20年後にはまた違った感想を抱くかもしれません．&#xA;アニメ化期待してます．</description>
    </item>
    <item>
      <title>競プロ</title>
      <link>https://t45k.github.io/kyopuro_index/</link>
      <pubDate>Wed, 06 May 2020 18:26:46 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro_index/</guid>
      <description>競プロの解説とか． Java でやっているのでコード例は Java になります．&#xA;リポジトリはこちら．&#xA;自作ライブラリのドキュメントはこちら．</description>
    </item>
    <item>
      <title>ブログ</title>
      <link>https://t45k.github.io/blog_index/</link>
      <pubDate>Wed, 06 May 2020 18:26:39 +0900</pubDate>
      <guid>https://t45k.github.io/blog_index/</guid>
      <description>近況や今まで読んできた本の感想などを書いていきます．</description>
    </item>
    <item>
      <title>ABC166の解説</title>
      <link>https://t45k.github.io/kyopuro/abc166/</link>
      <pubDate>Mon, 04 May 2020 22:58:09 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc166/</guid>
      <description>二日連続ABCの二日目． ABCEの4完． コード&#xA;A - A?C 分岐するだけ．&#xA;B - Trick or Treat 数え上げるだけ&#xA;C - Peaks 結構誤読してた人が多かった問題&#xA;． 問題文から，i番目の展望台が地震を含めて繋がっている展望台の中で一番高ければ良いことが分かる． つまり，繋がっている展望台のどれか一つでも自身より高いものが良い展望台となる． なので，各A,Bに対して大きい方だけ残していくという戦略を取れば，残ったものが良い展望台である．&#xA;D - I hate Factorization 解けませんでした&#xA;問題文を誤読しないように． 任意のXについて成り立っているのではなく，テストケースとして与えられるXについて成り立つ． およそ200くらいが上限となるらしいので，それについて全探索するだけ．&#xA;E - This Message Will Self-Destruct in 5s 条件は添字i,jに対してi - j = Ai + Ajであり，これを式変形するとi - Ai = j + Ajとなる． つまり，(添字と身長の差)と(添字と身長の和)が同じ値になるペアが条件を満たす． なので各Aに対して添字との差と和をあらかじめ計算しておけば解ける</description>
    </item>
    <item>
      <title>ABC165の解説</title>
      <link>https://t45k.github.io/kyopuro/abc165/</link>
      <pubDate>Mon, 04 May 2020 22:58:03 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc165/</guid>
      <description>二日連続ABCの一日目． 3完． コード&#xA;A - We Love Golf きちんと数学して解くこともできるが，制約が小さいので全探索しても間に合う． AからBまでの閉区間内にKの倍数があるか確認する．&#xA;B - 1% これもきちんと数学して解けるけど全探索で解ける系． 入力例から分かるように，10^18が与えられても出力は3760になるので，1~3760までの区間を探索するだけで良い．&#xA;C - Many Requirements 解けませんでした&#xA;これも全探索するだけ問題． 考えられる数列を全列挙して特典の最大値を探す．&#xA;全列挙に必要な計算量が10^10だと思っていたので試さなかったが，実際にはボールとしきりの要領で組み合わせを考えると計算量は*O(N * C(N+M-1,N))*なので，全列挙しても十分間に合う．&#xA;D - Floor Function 数学．editorialが分かりやすいです．&#xA;E - Rotation Matching 同じ組み合わせを避けていく問題．&#xA;例えば，組み合わせ(1,N)は(1,2)と同じ組み合わせになる． したがって，(組み合わせの方の大きい方)-(小さい方)を組み合わせの距離と定義すると，距離N-iと距離iは同じ組み合わせである． これを念頭に入れてN-1からN-mまでの組み合わせを考えていく． (1,N)(2,N-1)&amp;hellip;と作っていくと距離N-1,N-3&amp;hellip;と1飛ばしに組み合わせを作れる． 途中で折り返しをうまく調整して距離N-2,N-4&amp;hellip;の組み合わせを作る．</description>
    </item>
    <item>
      <title>ABC164の解説</title>
      <link>https://t45k.github.io/kyopuro/abc164/</link>
      <pubDate>Mon, 27 Apr 2020 23:38:04 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc164/</guid>
      <description>4完．コード&#xA;A - Sheep and Wolves if文で分岐するだけ&#xA;B - Battle 割った余りを求めるのがスマートだけで，先攻後攻の概念があるので愚直に互いに引いていった方が安全．&#xA;C - gacha JavaだとSetに打ち込めば良い． Stream#distinctからのStream#countで多少スマートに書ける．&#xA;D - Multiple of 2019 各桁に対して，i桁目の数字がDiとしてSi = (10 ^ i * Di + Si-1) % 2019を計算すると，Siが同じ値の桁間の数字は2019の倍数になる．&#xA;E - Two Currencies むずかしかった．&#xA;(頂点番号, 所持金)を一つの頂点としてダイクストラする．</description>
    </item>
    <item>
      <title>K-Shoot MANIAが正しく動かなくなった原因とその対策</title>
      <link>https://t45k.github.io/blog/k-shoot_mania/</link>
      <pubDate>Sat, 25 Apr 2020 17:05:30 +0900</pubDate>
      <guid>https://t45k.github.io/blog/k-shoot_mania/</guid>
      <description>K-Shoot MANIAの挙動がおかしい原因が分かったのでメモ&#xA;症状 キーボードの入力が異様に遅くなる． キーボードを押しっぱなしにして10秒後くらいにようやく反応する． もちろんプレイもままならない． Windowsのpreview版を使っていたのでそれが原因かなと思っていたが，違うPCでも同じ症状が出たためOSは関係なかった．&#xA;原因 キーボードの入力を書き換えるソフトを使っていたのが原因． keyhacとalt-imeを使っていたが，これのせいでキーボードの入力がケーシューに正しく反映されなくなってたっぽい． 対策は簡単で，該当ソフトを落とすだけ．&#xA;終わりに LR2の反応がおかしかったのもこれが原因かも． 自宅ゲーセン環境で快適なひきこもり生活を．</description>
    </item>
    <item>
      <title>「ディスコ探偵水曜日」読了</title>
      <link>https://t45k.github.io/blog/disco_detective_wednesdayyy/</link>
      <pubDate>Fri, 24 Apr 2020 19:01:51 +0900</pubDate>
      <guid>https://t45k.github.io/blog/disco_detective_wednesdayyy/</guid>
      <description>この世の出来事は全部運命と意志の相互作用で生まれるんだって、知ってる？&#xA;舞城王太郎の「ディスコ探偵水曜日」を読みました． 10年以上前の本なのでおそらく新品ではもう手に入りません． 僕はBook Offをはしごしました．&#xA;上中下の3巻構成なのですが，下巻が異様に長い上にとても難解． この本を読むのは2回目ですが，今回も内容を理解しきれませんでした．&#xA;粗筋は割愛します． 個人的には中間の，名探偵が次々と推理を披露して死んでいくシーンと，そしてディスコが最後の推理をするシーンが， 舞城王太郎特有のスピード感があって好きです．&#xA;1年に1回，イベントとしてこの本を読むことをありかなぁと思いました．&#xA;次は西尾維新の「クビシメロマンチスト」を読む予定です．</description>
    </item>
    <item>
      <title>ABC163の解説</title>
      <link>https://t45k.github.io/kyopuro/abc163/</link>
      <pubDate>Tue, 21 Apr 2020 16:22:58 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc163/</guid>
      <description>3完． unratedで良かった&amp;hellip; コード&#xA;A - Circle Pond やるだけ．&#xA;円周は2 * r * 円周率． Javaだと円周率はjava.lang.Math.PIが使える．&#xA;B - Homework 全ての宿題をやるにはΣ Ai日かかるので，それをMと比較する．&#xA;C - management 問題文が若干ややこしい． やることは特定の数字が何回出てくるかを数えるだけ． はじめに配列array[N + 1]を用意して，各Aiに対してarray[Ai]++する．&#xA;D - Sum of Large Numbers 時間内に解けなかった． 組み合わせの問題だと思ってライブラリを引っ張ってきたけど使わなかった&amp;hellip;&#xA;各数字が10^100以上と十分大きいので，足し合わせる個数が違うとき同じ値になることはない． あるiに対してfront_sumを0からi-1までの和，back_sumをn-i+1からnまでの和とすると， i個選択する時の組み合わせによって得られる和はi * 10^100 + front_sumからi * 10^100 + back_sumまでの間に収まる． つまり，back_sum - front_sum + 1通りになる． front_sumとback_sumは累積和で取れるので，iをKからNまで動かして足し合わせれば良い．&#xA;E - Active Infants 原始的なDP（ほんまか？）．&#xA;活発度が高い順に左か右に移動させる． 活発度を降順にソートした時，dp[i][j]を，(i+j)番目の園児を移動させた結果左側にi人，右側にj人の時の嬉しさという風に考える． そうすると，dp[i][j]は左側にi-1人，右側にj人いるときに(i+j)番目の園児を左側に移動させるか左側にi人，右側にj-1人いるときに(i+j)番目の園児を右側に移動させるの嬉しさが大きい方になる．</description>
    </item>
    <item>
      <title>MacでIntelliJを使っているとクラッシュする問題と解決法</title>
      <link>https://t45k.github.io/blog/fix_mac_fault/</link>
      <pubDate>Mon, 13 Apr 2020 17:38:19 +0900</pubDate>
      <guid>https://t45k.github.io/blog/fix_mac_fault/</guid>
      <description>MacBook Air 2020を買いました．詳しくはここ．&#xA;普段はJavaやKotlinを書いているので迷いなくIntelliJ IDEAをインストールしたのですが，どうも挙動がおかしい．&#xA;というのも，結構な頻度でIntelliJがクラッシュするし，場合によってはOSがクラッシュ強制的に再起動がかかります． ひどい時にはOSがクラッシュして再起動がかかり，それが開けた2分後に再びクラッシュしたこともあります．&#xA;実はLINEのインターンで借りていたMacBook Pro 15inchでも似たような問題が起こっていたので，2度目の経験でした．&#xA;インターンで借りていたパソコンは5日間で返すので我慢して使っていましたが，今回は長らく使っていく予定なので流石に直す必要がありました．&#xA;修理も視野に入れながら解決法を探しました．&#xA;解決法 結論からいうと原因は分かりませんでしたが()，OSを再インストールすることで解決しました．詳しくはこちら．&#xA;原因が分からないので全ての人がこれで直るかは分かりませんが，OS再インスコでデータが消えることはないため真っ先に試す価値はあります．</description>
    </item>
    <item>
      <title>MacBook Airを購入した話</title>
      <link>https://t45k.github.io/blog/macbook_air/</link>
      <pubDate>Mon, 13 Apr 2020 17:21:02 +0900</pubDate>
      <guid>https://t45k.github.io/blog/macbook_air/</guid>
      <description>念願のMacBook Airを購入しました! 構成は&#xA;CPU: 1.1GHzクアッド メモリ: 16GB SSD: 256GB 数ヶ月後に出ると噂のMacBook Proを待っている人もいるかもしれませんが，僕は以下のような理由でmbaを選びました．&#xA;1 - もう待てなかったから ずっと新しいmacが欲しいと思っていたのでこれ以上待てませんでした&#xA;2 - そこまでスペックを必要としていないかったから 研究室からmbpを借りていますし，研究などでマシンパワーが必要な時は研究室のワークステーションを使えば良いだけなので&#xA;3 - Touch barが嫌いだから バタフライキーボードはともかく，Touch barは賛否両論ありますが，僕はあまり好きになれませんでした． たまに反応しなくなったりするし．&#xA;4 - 安いから 税込み13万で買えました． mbpはこんなものじゃすまないと思います．&#xA;理由としてはこんなところです． 付け加えるなら，自分の理想にとても近かったというのもあります． これは去年の12月のツイート&#xA;はよmacbook air，13インチ，cpu4コア，RAM16GB，SSD256GB，ファンクションキー，シザーキーボードで10万くらいのやつ出てくれや&#xA;&amp;mdash; task (@getupmax) December 8, 2019 使い心地 ある一点を除いたら最高です（その一点も結局解決しました）．&#xA;主にmbpとの比較になるのですが，&#xA;軽い 薄い 開けやすい(mbaは切り欠けが下まで貫通している) みたいなところです．&#xA;最後に こうなりました． </description>
    </item>
    <item>
      <title>ABC162の解説</title>
      <link>https://t45k.github.io/kyopuro/abc162/</link>
      <pubDate>Mon, 13 Apr 2020 16:57:30 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc162/</guid>
      <description>祝参加者1万人越え．無念の4完．コード&#xA;A - Lucky 7 やるだけ．文字列で読み込んでString#containsを使うと早い．&#xA;B - FizzBuzz Sum これもやるだけ．LongStreamできれいに書ける．&#xA;LongStream.rangeClosed(1, scanner.nextInt()) .filter(i -&amp;gt; i % 3 != 0 &amp;amp;&amp;amp; i % 5 != 0) .sum(); C - Sum of gcd of Tuples (Easy) 三重ループを回すだけ．&#xA;D - RGB Triplets N &amp;lt;= 4,000なので二重ループで回すことを考える． ある座標以降のそれぞれの色が何個あるかを記録する． これは後ろから累積和をとることで可能． こうすることで，例えばiが赤色，jが緑色のとき，j+1以降の青色の個数をO(1)で得られる． また，k-j ≠ j-iの条件を満たすために，k-j = j-iとなるkに対して(j+1以降の数) - (k以降の数) + (k+1以降の数)と計算すれば良い(累積和の性質から)．&#xA;E - Sum of gcd of Tuples (Hard) 解法は思いついていたが計算量的にダメだと思っていて放置していたやつ&#xA;． 解答が詳しいのでそちらを参照． 繰り返し二乗法などを使うと速くなる．</description>
    </item>
    <item>
      <title>ABC161の解説</title>
      <link>https://t45k.github.io/kyopuro/abc161/</link>
      <pubDate>Sat, 04 Apr 2020 22:53:03 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc161/</guid>
      <description>100-200-300-400-600の5完． 人生初のオンサイト600点問題AC． コード&#xA;A - ABC Swap Z，X，Yを順に出力するだけ&#xA;B - Popular Vote やるだけ．&#xA;割り算の結果を比較するときは，a &amp;gt; b / cではなくa * c &amp;gt; bのように書いたほうが正確．&#xA;C - Replacing Integer 方針立てるのに時間かかった問題．&#xA;直感的には分かりづらいけど以下のように言い換えられる(chokudaiさんのツイート)．&#xA;C問題、数学の問題といえばそうなんだけど、「無限に長いすごろくがあります。ゴールまでの距離がxです。Kマスずつ進めますが、ゴールを通り過ぎてしまう場合は折り返します。最もゴールに近づく時の残りマス数を答えなさい」みたいにすると、まぁ一応ちゃんとしたストーリーはつくよね。&#xA;&amp;mdash; chokudai(高橋 直大)🌸🍆🍡 (@chokudai) April 4, 2020 というわけで，N % Kと(N - (N % K)) % Kの小さい方を求める．&#xA;D - Lunlun Number 想定解が天才すぎる．愚直に解いた．&#xA;i番目の数字に対して，i + 1番目の数字を次のように決める．各桁を下から順番に見ていく．もし見ている桁が9でなく，かつ次の桁の数字より1小さいか同じなら，その桁をインクリメントし，それ以降の桁をルンルン数かつ最小となるように調整(つまり，&amp;lsquo;上の桁 - 1&amp;rsquo;か&#39;0&amp;rsquo;)した値がi + 1番目の数になる．どの桁も条件に当てはまらなければ，一番大きい桁をインクリメントする．&#xA;各桁を確認，操作する場合は，数字をいったんchar型配列にするとやりやすいかも．&#xA;E - Yutori 解説AC．&#xA;前から貪欲と後ろから貪欲の結果を比較するだけ．解説に登場する配列L，Rを求めなくても，二分探索しても十分間に合う．&#xA;F - Division or Substraction E問題よりACが多いF問題．&#xA;まずNに対して以下の数字は必ず条件を満たす</description>
    </item>
    <item>
      <title>AtCoderで水色になりました</title>
      <link>https://t45k.github.io/blog/nyusui/</link>
      <pubDate>Sun, 29 Mar 2020 00:16:31 +0900</pubDate>
      <guid>https://t45k.github.io/blog/nyusui/</guid>
      <description>先日行われたABC160にて無事に入水を果たしたのでポエムを書きます． 感じたこと 一つの目標だった水色に到達してほっとしています． 人によっては10回かそこらでなる人もいる中，53回目でようやくなれた自分の才能とセンスのなさには本当に辟易しています． 精進が大事． 蟻本は最初の章しか読めてないけど結構役に立ちました．&#xA;次は せっかくなので青色を目指します． ここ2回のABCは青パフォが出てるので，この調子で頑張っていきたいです．&#xA;最後に 毎回楽しいコンテストを開催してくれているAtCoder社と，その問題を用意してくれているWriter，Testerの皆様に心から感謝します．</description>
    </item>
    <item>
      <title>ABC160の解説</title>
      <link>https://t45k.github.io/kyopuro/abc160/</link>
      <pubDate>Sat, 28 Mar 2020 23:27:57 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc160/</guid>
      <description>5完．コード&#xA;A - Coffee 書かれてることをするだけ．String#charAtを使う&#xA;B - Golden Coins なるべく多くの500円に換金した方が良いので，まずはXを500で割る． 余りを50で割って，それぞれの商に1000と5を掛けて出力．&#xA;C - Traveling Salesman around Lake ある家からその一つ手前の家までをぐるっと一周回ってくるのが最適となる． 1番目の家からN番目の家までに移動距離はAi - AN，それ以外の家iから家i - 1まではK - Ai + Ai-1になるので，その中の最小値が答え．&#xA;D - Line++ ワーシャルフロイドっぽい問題．&#xA;まず初めにX，Yを経由しない場合の全ての頂点間の距離を求める． これはグラフを隣接行列で表すとgraph[i][j] = |i - j|となる．&#xA;次に，XまたはYを経由した場合を考えた上で，全ての頂点間の最短距離を求める． これはgraph[i][j] = min(graph[i][j], graph[i][X] + graph[X][j])となる．&#xA;最後に，隣接行列の中で各距離の出現回数を記録し，それを出力する．&#xA;E - Red and Green Apples 貪欲にやるだけ．&#xA;美味しさを最大化したいとき，赤リンゴを降順に並べたときのX+1つ目以降と緑リンゴを降順に並べたときののY+1つ目以降は捨ててもよい． 後はそれぞれのリンゴの小さいものを順番に無色のものと入れ替えるだけ．</description>
    </item>
    <item>
      <title>ABC159の解説</title>
      <link>https://t45k.github.io/kyopuro/abc159/</link>
      <pubDate>Sun, 22 Mar 2020 22:48:22 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc159/</guid>
      <description>奇跡的に5完．コード&#xA;A - The Number of Even Pairs 和が正になるのはeven + evenかodd + oddの時なので，偶奇それぞれに対して組み合わせ(n * (n - 1) / 2)を計算して足し合わせる．&#xA;B - String Palindrome 書かれてることをするだけ． 回文系の問題は以下のようなメソッドを作っとくと便利かも．&#xA;private static boolean isPalindrome(final int start, final int end, final String s) { for (int i = 0; ; i++) { if (start + i &amp;gt;= end - i) { return true; } if (s.charAt(start + i) != s.charAt(end - i)) { return false; } } } C - Maximum Volume Lの1/3の3乗</description>
    </item>
    <item>
      <title>AGC043の解説</title>
      <link>https://t45k.github.io/kyopuro/agc043/</link>
      <pubDate>Sat, 21 Mar 2020 23:37:35 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/agc043/</guid>
      <description>1完．コード&#xA;A - Range Flip Find Route 全探索の計算量をいかに減らせるかがポイント．DPは思いつかんかった&amp;hellip;&#xA;右か下にしか移動できない時，黒ゾーンに入ってから出るまでの経路を一回の操作で白にできる（公式参照）． なので，白から黒に入る経路のコストを1，それ以外を0とみなした最短経路問題に落とし込むことができる． ダイクストラ法を使うと計算量は頂点数Vと辺数Eに対してO(V * log(E))となる． 今回の頂点数VはV &amp;lt;= H * W = 10 ^ 4となる． また，一つの頂点に対して辺の数はたかだか2(右に移動するか下に移動するかの2通り)なので，十分間に合う．&#xA;B - 123 Triangle 誰がこんな解法思いつくんでしょうね&amp;hellip;(解説AC)&#xA;答えは0，1，2のいずれかになるので，初めに答えの偶奇を判定する． 各aは先に1引いといても問題ない． 偶奇判定なので，abs(a - b)ではなくa xor bで良い． そうすると， x n,1 = ( C 0 n-1 ⁢ x 1,1 ^ C 1 n-1 ⁢ x 1,2 ^ &amp;hellip; ^ C n-1 n-1 ⁢ x 1,n ) % 2 となる． そのため，各組み合わせを計算すれば良い．&#xA;今回は偶奇が欲しいので，各組み合わせの2で割った余りだけで十分である． そこでLucasの定理を用いる(リンク参照)． 定理に従うと手順はこう．</description>
    </item>
    <item>
      <title>「みんな元気。」読了</title>
      <link>https://t45k.github.io/blog/all_fine/</link>
      <pubDate>Fri, 20 Mar 2020 12:00:53 +0900</pubDate>
      <guid>https://t45k.github.io/blog/all_fine/</guid>
      <description>みんな大丈夫。みんな元気。&#xA;舞城王太郎の「みんな元気。」を読みました．Amazon&#xA;この本は，表題である「みんな元気。(副題: Cuckoos &amp;amp; The Invisible Devil)」と短編4編で構成されています． 例によってきっかけはDJ Technorch．&#xA;粗筋は，空飛ぶ家族が主人公の妹を拐いに来てなんやかんやある感じです． 相変わらず難解だった気がします． この物語は，「選択」が主題の一つだと思います． 副題のカッコウから，拐われた妹が実は托卵だったみたいな展開を予想しましたが全然そんなことありませんでした． 風呂敷をめちゃくちゃに広げたうえで畳むことなく急に終わる感じなのですが，終わり方が納得できるというかとても爽やかでした．&#xA;短編集の中では，「スクールアタック・シンドローム」が好きです．&#xA;なんとなく，舞城王太郎特有のスピード感的なものを理解してきた気がしました．&#xA;次はおそらく「九十九十九」を読みます．&#xA;最後に</description>
    </item>
    <item>
      <title>パナソニックプログラミングコンテスト2020の解説</title>
      <link>https://t45k.github.io/kyopuro/panasonic2020/</link>
      <pubDate>Sat, 14 Mar 2020 22:56:44 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/panasonic2020/</guid>
      <description>4完．コード&#xA;A - Kth Term 実装するだけ． Javaの場合は問題文をコピペしてfinal int[] array = {1, 1, ...};と宣言すると早い．&#xA;B - Bishop ここに一番時間を吸われた．&#xA;問題例を見ると最終的に(h * w + 1) / 2でいけそうに見えるが，hまたはwが1の時角は一切移動できなくなることに気付けるかがポイント．&#xA;C - Sqrt Inequality ここにも時間を吸われた．&#xA;Math#sqrtを使うと解けそうな気がするが，精度の都合上間違いになることがある． 今回は式変換を行うと4ab &amp;lt; a^2 + b^2 + c^2 + 2ab - 2bc - 2caに持っていけるので，そこに代入するだけ． あるいはBigDecimalを使っても大丈夫らしい．&#xA;D - String Equivalence 偶然通った問題．&#xA;左側から文字を決めていくが，使える文字は自身より左に存在している一番大きい文字 + 1までしか使えないことに注意．&#xA;E - Three Substrings 全探索の問題．ここを参考にした．&#xA;Editorialではa，b，cの順番を考慮せずにやる方法を紹介しているが，考えることが増えるので素直に全ての順列で場合分けした方が良さそう． 以降，(aの先頭) ≦ (bの先頭) ≦ (cの先頭)の場合を考える．&#xA;まず，a中のどの箇所がbと被っているかを全探索して，配列か何かに記録する(O(n^2))．これをaとc，bとcに対してもやる． コードだとこんな感じ．&#xA;private static boolean[] init(final int length, final String a, final String b) {// 配列の初期化 final boolean[] array = new boolean[length]; // lengthは十分大きい値 Arrays.</description>
    </item>
    <item>
      <title>ABC061#Dの別解</title>
      <link>https://t45k.github.io/kyopuro/abc061_d/</link>
      <pubDate>Sun, 08 Mar 2020 20:39:29 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc061_d/</guid>
      <description>ABC061 D - Score Attackの別解．コード&#xA;問題内容 正負の重みの辺で構成された，閉路を含む有向グラフの単一始点終点の最長経路を求める問題． 解説では，初めに辺の重みの正負を逆転してからベルマンフォード法で最短経路を求めている． また，経路に影響を与えうる閉路の存在を確認するために，フラグを使った方法を採用している．単純に負の閉路の存在が最短経路に影響を及ぼすわけではないことに注意．&#xA;別解 最長路検出と閉路検出について異なる方法を紹介する．&#xA;最長路検出 今回頂点数が1,000と比較的少ないので，BFSを用いた全探索が可能である． BFSを用いる場合は，閉路を含むことから，キューが空にならない可能性があるので，繰り返し回数を制限する必要がる． BFSであることから，n ^ 2 回繰り返せば十分である．&#xA;閉路検出 解説ではbool型配列を用いてフラグ管理をしているが，そもそもフラグ管理をする必要はない． 各辺に対する経路長の更新を頂点の個数回繰り返し，結果が変わっていればinfを出力すれば良い．</description>
    </item>
    <item>
      <title>ABC158の解説</title>
      <link>https://t45k.github.io/kyopuro/abc158/</link>
      <pubDate>Sat, 07 Mar 2020 22:42:19 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc158/</guid>
      <description>四完．コード&#xA;A - Station and Bus 連想配列にぶちこむ．&#xA;B - Count Balls n に対する (A + B) の商と余りを求めておき，ごちゃごちゃする．&#xA;C - Tax Increase 1から20,000くらいまでの整数が条件を満たすか全探索．&#xA;D - String Formation 現在文字列が正順なのか逆順なのかを記録しておくフラグを用意する． クエリが1ならフラグ反転，クエリが2の場合は，&#xA;正順ならクエリ通りに文字追加 逆順ならクエリとは逆に文字追加 をやる． 最終的にフラグを参照してから正しい方向で出力．&#xA;StringBuilder#insertを使うとTLEになりました．</description>
    </item>
    <item>
      <title>「好き好き大好き超愛してる。」読了</title>
      <link>https://t45k.github.io/blog/love_love_love_you_i_love_you/</link>
      <pubDate>Tue, 03 Mar 2020 16:20:18 +0900</pubDate>
      <guid>https://t45k.github.io/blog/love_love_love_you_i_love_you/</guid>
      <description>愛は祈りだ。僕は祈る。&#xA;舞城王太郎の「好き好き大好き超愛してる。」を読みました．Amazon&#xA;きっかけはDJ Technorchの楽曲「Love Love Love You I Love You」．&#xA;舞城王太郎作品は，以前「ディスコ探偵水曜日」を読んでめちゃくちゃ読みにくいなと思っていたので，読む前に少し構えました．&#xA;「愛は祈りだ。」の一文から始まるこの本は，一貫して「愛」と「物語」についての小説です． 一文目がこれほど全体を象徴している作品は個人的にはこれが初めてで，おそらく長く記憶に残るんだろうなぁという感じです（余談ですが，最後の一文が一番記憶に残っている作品は西尾維新の「クビシメロマンチスト」）． 読みやすい方ではありますが，理解するのは難しいと感じました．&#xA;次は「みんな元気。」を読みます．&#xA;最後に，きっかけとなった楽曲を貼っときます．</description>
    </item>
    <item>
      <title>ABC157の解説</title>
      <link>https://t45k.github.io/kyopuro/abc157/</link>
      <pubDate>Sun, 01 Mar 2020 22:53:59 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc157/</guid>
      <description>なんとか四完．コード&#xA;A - Duplex Printing nに1足して2で割るだけ&#xA;B - Bingo 実装するだけだが実装量が多くなりがちな問題&#xA;C - Guess The Number 条件に合う数字を生成する方針をとるもWAになったので全探索する方向に変更． 桁数を満たす整数を昇順に条件を満たすか確認する． 余談だが，WAの原因はおそらく1桁の数字は0でも大丈夫なのを考慮していなかったため．&#xA;D - Friend Suggestions Union-Find Treeで殴る問題． 友達関係を取得する時にUnion-Find Treeを構築します． 同時に，それぞれの人が何人友達がいるかを記録します．&#xA;ブロック関係を取得する際に，それぞれの人に何人ブロックしている人がいるか記録します． この時，友達候補でない人を記録する必要はありません．&#xA;最終的に，Union-Find Treeから自分，友達，ブロック関係を含めた自分と繋がっている人を得られるので，そこから友達の人数とブロックしている人数と自分自身の人数を引くことで答えが求まります．&#xA;余談ですが，Setをfor文で回すと異様に遅いので，for文を使う場合はListを使った方が良いです．</description>
    </item>
    <item>
      <title>最小全域木メモ</title>
      <link>https://t45k.github.io/kyopuro/min_spanning_tree/</link>
      <pubDate>Sat, 29 Feb 2020 22:37:36 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/min_spanning_tree/</guid>
      <description>最小全域木という概念を知ったのでメモ．&#xA;最小全域木とは 無向グラフが与えられた時に，その部分グラフで任意の2頂点を連結にする様な木を全域木(Spanning Tree)と言います．辺にコストがある場合に，使われる辺のコストの和を最小にする全域木を最小全域木(MST : Minimum Spanning Tree)と言います．（蟻本より）&#xA;つまり，グラフが連結であることを保ったまま，コストの大きい辺を間引いてできたグラフを指します．連結であり，かつ辺のコストの和が最小なので，グラフは木となります．&#xA;ABC065-Dがこの問題に該当します．&#xA;解き方 有名なアルゴリズムとして，クラスカル法とプリム法があります． 今回はクラスカル法を紹介します．&#xA;クラスカル法は至って単純で，各辺をコスト順にソートし，その辺が繋ぐノードが連結でなければその辺を採用，そうでなければ不採用としMSTを作ります． ノード同士が連結であるかどうかは，Union-Find Treeを用いて確認します．&#xA;// edges は Edge(int label1, int label2, long cost) のリスト edges.sort(Comparator.comparingLong(o -&amp;gt; o.cost)); final UnionFindTree unionFindTree = new UnionFindTree(n); // 要素数nのUnion-Find Treeを構築 long sum = 0; for (final Edge edge : edges) { if (!unionFindTree.isSame(edge.label1, edge.label2)) { unionFindTree.unit(edge.label1, edge.label2); sum += edge.cost; } } 辺のソートに一番計算量を食われます．</description>
    </item>
    <item>
      <title>ワーシャルフロイド法メモ</title>
      <link>https://t45k.github.io/kyopuro/warshallfloyd/</link>
      <pubDate>Sun, 23 Feb 2020 01:54:16 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/warshallfloyd/</guid>
      <description>ワーシャルフロイド法というアルゴリズムを知ったのでメモ．&#xA;ワーシャルフロイド法とは グラフのある一点から任意の点への最短距離を求めるアルゴリズム． 計算量は点の個数nに対してO(n^3)． 似たようなアルゴリズムにダイクストラ法があるが，あちらはある2点の最短距離をO(n^2)で求めるアルゴリズムである． 計算量が重ためなので，使う場面はかなり限られるが，知っておくと便利だと思った．&#xA;実装 このアルゴリズムは，動的計画法を用いて最短距離を計算するというアイデアに基づいており，実装がとても簡単． 二次元配列を用いた例がこちら．&#xA;public static void main(final String[] args) { final int[][] graph = new int[n][n]; // 初めに無限大の値で各要素を初期化 for (int i = 0; i &amp;lt; graph.length; i++) { Arrays.fill(graph[i], Integer.MAX_VALUE / 2); // Integer.MAX_VALUEでないことに注意 graph[i][i] = 0; } // グラフの各辺を与えられた値に変更 // ここからワーシャルフロイド for (int k = 0; k &amp;lt; graph.length; k++) { // 中継する点 for (int i = 0; i &amp;lt; graph.length; i++) { // 出発する点 for (int j = 0; j &amp;lt; graph.</description>
    </item>
    <item>
      <title>ABC156の解説</title>
      <link>https://t45k.github.io/kyopuro/abc156/</link>
      <pubDate>Sat, 22 Feb 2020 22:17:59 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc156/</guid>
      <description>4完．解答&#xA;A - Beginner 算数&#xA;B - Digits nが0になるまでkで割り続ける&#xA;C - Rally 座標は100までなので，1~100までの座標についてそれぞれ距離の総和を全探索する．&#xA;D - Bouquet 組み合わせの問題．&#xA;組み合わせの総和(nCkのkを1からnまで時の和)からaとbそれぞれの組み合わせ時の場合の数(nCaとnCb)を引く． 組み合わせの総和は2^n - 1になる． a，bの組み合わせ計算の際には，modを考慮する必要があるため，フェルマーの小定理などを利用すると良い(modInvなどでググると出てくる)．&#xA;modInvのJava実装の例</description>
    </item>
    <item>
      <title>ABC155の解説</title>
      <link>https://t45k.github.io/kyopuro/abc155/</link>
      <pubDate>Sun, 16 Feb 2020 22:48:43 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc155/</guid>
      <description>無念の三冠．&#xA;A - Poor 重複を調べる問題．&#xA;愚直に比較しても良いけど，Setを使うのが早そう．&#xA;JavaだとIntStreamからの各値にmapしてdistinctするとちょっとかっこいいかも．&#xA;B - Papers, Please fizzbuzzみたいな問題．&#xA;これもIntStreamからのfilterでallMatchすると多少カッコよく書ける．&#xA;C - Poll 連想配列を使って数え上げる典型的な問題．&#xA;StringのListのソート方法をド忘れして時間を無駄に使ってしまった(正しくはCollections#sort)． C#だと文字列ソートが遅いらしく発狂している人がちらほらいた．&#xA;D - Pairs E問題より難しいD問題． 以下の要素が重なりあってきつい．&#xA;決め打ち二分探索 決め打ち二分探索とは，単調性がある問題に対して，その問題を満たす最小の数字を探す二分探索法を指す． 単調性とは，ある数 x に対してその問題が成り立つならば，x 以降の数字に対しても成り立つような性質を指す．&#xA;実装的な視点で言うと，まず最初に単調性を満たし，真偽値を返す関数 isOk(...) を用意する． D問題だとある値 x と K が与えられた時に，積が x 以下となるペアの個数が K 以上の場合は真のようになる．&#xA;次に，二分探索の対象を用意する．このとき，始点は isOk が偽となり，かつ終点は真となるような範囲を用意する． 今回だと，例えば出力が正となるような場合分けをした時，0は必ず偽なので 0 ~ 10^18 のようになる．&#xA;そして二分探索する． 二分探索では通常範囲を指定するが，この時始点は isOk が偽，終点は真となることを意識する． 通常の二分探索と同じく対象範囲の真ん中の値((始点 + 終点) / 2)をとり，それの真偽を判定する． 真の場合は始点から真ん中の値までを，偽の場合は真ん中の値から終点までを再起的に計算する． この操作で，常に始点は偽，終点は真となる． 最終的に始点と終点が連続した値になるため，その終点を解として出力する．&#xA;要約すると，isOk() を満たす範囲の下界を求める操作だと言える．&#xA;Lower Bound / Upper Bound Editorialでは条件を満たす積を求めるのにしゃくとり法を用いていたが，個人的には二分探索を使った方が直感的だと感じた． 計算量もそこまで気にする必要はない． 今回は数字の重複があるため，普通に二分探索すると正しい答えが求まらない場合がある． そのため，Lower BoundやUpper Boundを用いる必要がある．</description>
    </item>
    <item>
      <title>ABC154の解説</title>
      <link>https://t45k.github.io/kyopuro/abc154/</link>
      <pubDate>Sun, 09 Feb 2020 22:40:15 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc154/</guid>
      <description>A~Dまで．コード&#xA;A - Remaining Balls Uで分岐&#xA;B - I miss you&amp;hellip; 入力の文字列の長さの回数&amp;rsquo;x&amp;rsquo;を出力&#xA;C - Distinct or Not 連想配列を使って数字が出現したかを確認&#xA;D - Dice in Line 毎回期待値計算をすると遅いので，1000(&amp;gt;= pi)までの累積和を計算しておく． あとは連続したKの要素の期待値の合計をそれぞれ求めるだけ．&#xA;E - Almost Everywhere Zero 桁DP&#xA;0でない(= 1 ~ 9)の数字がK回出る回数を数える． 桁を上から決定していき数え上げる． 桁の決定の仕方は，その桁を決める前の時点でNより小さいことが確定しているかどうかで変わる．&#xA;確定している場合をdp[|N|][K + 1]と表現した時に，桁iでの状態遷移は以下のようになる&#xA;桁i-1での状態 桁iでの状態 確定している 0を選択する: dp[i][k] += dp[i - 1][k]&#xA;0以外を選択する: dp[i][k] += dp[i - 1][k - 1] * 9 確定していない 桁iが0の時: Nより小さくすることはできないので何もしない&#xA;桁iが0でない時: 1 ~ (桁iの数字 - 1)までを選択することで確定している状態に持っていくことができるので，桁i-1までに0以外の数字が出現した回数をjとするとdp[i][j + 1] += (桁iの数字 - 1) 桁を上から見て行った時に，0でない数字がK回出た時点で，それ以降の数字の決め方はNより小さいことが確定することに注意．</description>
    </item>
    <item>
      <title>ICSE2020の面白そうな論文をピックアップしてみた</title>
      <link>https://t45k.github.io/blog/icse2020_abst/</link>
      <pubDate>Sat, 01 Feb 2020 18:59:35 +0900</pubDate>
      <guid>https://t45k.github.io/blog/icse2020_abst/</guid>
      <description>ICSEはInternational Conference of Software Engineeringの略です． ソフトウェア工学の国際学会の中で一番ランクが高い会議です． 会議自体は5月に行われるのですが，再録された論文一覧とアブストが公開されているので， 面白そうな論文をピックアップしてみました．&#xA;Is Rust Used Safely by Software Developers? RustはC，C++に取って代わることを目指した，メモリ安全性や実行速度を売りにしているプログラミング言語です． その特徴から，ソフトウェア開発界隈からの注目度が高まりつつあります．&#xA;この論文では，メモリ安全性を放棄する代わりにパフォーマンスを上げる Unsafe Rust についての調査を行っています．&#xA;Securing UnSafe Rust Programs with XRust これもRustの論文です．&#xA;XRustという，Unsafe Rustを通常のRustに移行する手法を提案しています．&#xA;ICSEに(Unsafe)Rustに関する論文が2本採択されていることから，ソフトウェア開発におけるRustの盛り上がり具合が分かります．&#xA;Big Code != Big Vocabulary: Open-Vocabulary Models for Source code キャッチーなタイトルだったのでピックアップしてみました．&#xA;変数名などのユーザー定義の識別子があるため，ソースコードは自然言語に比べて，大規模になるとコーパスが巨大になってしまいます． この論文では，コーパスがスケールするように，新しい言語モデルを提案しています．&#xA;DLFix: Context-based Code Transformation Learning for Automated Program Repair 最近のソフトウェア工学の大きなトピックの一つであるAPRの論文．&#xA;機械学習ベースのAPRは過去のバグ修正の学習に制限があるのに対して，DLFixでは学習のレイヤを2層に分けることでうまくこの制限を回避したらしいです．&#xA;A Cost-efficient Approach to Building in Continuous Integration CIの論文．&#xA;CIのコストはビルドを回している時間だけかかってしまい，かつ，CIの目的はバグを発見することなので， 多くのバグを発見するビルドをなるべく早い段階で回す手法を提案しています．&#xA;Here We Go Again: Why Is It Difficult for Developers to Learn Another Programming Language?</description>
    </item>
    <item>
      <title>ABC153の解説</title>
      <link>https://t45k.github.io/kyopuro/abc153/</link>
      <pubDate>Sun, 26 Jan 2020 22:32:42 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc153/</guid>
      <description>けもフレチックでした．&#xA;A~Eまで&#xA;A - Serval vs Monster (H + A - 1) / A するだけ&#xA;B - Common Raccoon vs Monster 必殺技の総和をとって大小比較&#xA;C - Fennec vs Monster 体力が高い順にモンスターに必殺技を使い，残ったモンスターには通常攻撃&#xA;D - Caracal vs Monster 等比数列の和&#xA;E - Crested Ibis vs Monster DP&#xA;ソースコード&#xA;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC153</description>
    </item>
    <item>
      <title>研究室のパソコンがmacbook proになった話</title>
      <link>https://t45k.github.io/blog/mbp/</link>
      <pubDate>Tue, 21 Jan 2020 18:11:41 +0900</pubDate>
      <guid>https://t45k.github.io/blog/mbp/</guid>
      <description>組織特有の，年末に予算を使い切る目的で，新しいmacbook proを貸してもらえることになった． モデルはMid2019の13インチモデル． 研究室内で大した業績を上げていない自分にしてはとても良いものを貸してもらえたと思う．&#xA;以下，使ってみた感想&#xA;良いとこ 速い 今まで2015年モデルのmacbook airを借りていた． mbpと比べるとマシンパワーが段違いであり，作業にかかる時間が大幅に短縮された．&#xA;画面が綺麗 マジで全然違う． 4年でここまで変わるのかって感じ．&#xA;良くないとこ 日本語入力がもっさりしてる mbaでは起きていなかった現象． 英語入力から日本語入力に変更した直後が，なぜか入力してから画面に表示されるまで0.5秒くらいかかる． ググったら結構記事がヒットしたので，何かしらの解決法はあると思う．&#xA;キーボードがヤバイ 使う前からバタフライキーボードがやばいことは理解していたが，使ってみるとやっぱりやばかった． 普段RealForceや青軸のゲーミングキーボード等のしっかりと押し込むタイプのキーボードを使っているので違和感が凄い．&#xA;多分ボタンの押し方にコツが必要なのだと感じた． バタフライキーボードは指先で押すと指先を痛めやすい（インターンでmbpを借りていたときはマジで一日の終わりは指先が痛かった）ので，指の腹で押すのが大事だと思う． 今でも&amp;rsquo;return&amp;rsquo;を押す右小指が痛くなってきた． 普段からmbpを使っている友達曰く，なぞるように押すのが良いらしいので慣れるしかないかなぁって気持ち．&#xA;また，バタフライキーボードは薄さにわりに押す際に力が必要なので，小指などで押す&amp;rsquo;A&amp;rsquo;や&amp;rsquo;P&amp;rsquo;などが押せてないことが頻発した．&#xA;エスケープが使いづらいのも地味に辛い．&#xA;まとめ 研究室ではRealForceに接続して使うのでバタフライキーボードはまだマシだと思う．</description>
    </item>
    <item>
      <title>ABC152の解説</title>
      <link>https://t45k.github.io/kyopuro/abc152/</link>
      <pubDate>Mon, 20 Jan 2020 00:27:48 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc152/</guid>
      <description>A~E問題まで．&#xA;A - AC or WA if文で分岐するだけ&#xA;B - Comparing Strings 辞書順なので，どれだけ長くても答えは必ず2数の小さい方の値で構成される． 2数の大きい方の値の回数だけ，小さい方の値を出力する．&#xA;C - Low Elements 数字を順番に見て行った時に，今見ている数字が今まで見てきた中で最小の値以下であればカウントして，最小の値を更新．&#xA;D - Handstand 2 与えられた数の範囲内で，数字の先頭と末尾だけを見た際に同じ数を数え上げていく． 例えば334は34，398は38という感じ． あとは組み合わせの数同士(例えば34なら43と，38なら83と)を掛け合わせるだけ．&#xA;E - Flatten modの逆元を知らないと厳しい問題．参考&#xA;この手の問題はユークリッドの互除法でGCDを求めてからLCMを求めるパターンがよくあるが，今回はオーバーフローの可能性があるため，素因数分解してからmod付きLCMを求める． LCMがmod計算してあるので，単純に各値で割るのではなく，modの逆元を計算した上で各値をLCMにかける必要がある．&#xA;ソースコード&#xA;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC152</description>
    </item>
    <item>
      <title>自己紹介</title>
      <link>https://t45k.github.io/about/</link>
      <pubDate>Tue, 14 Jan 2020 22:32:06 +0900</pubDate>
      <guid>https://t45k.github.io/about/</guid>
      <description>こんにちは 中川 将（なかがわ たすく）。 大阪のウェブエンジニア。&#xA;好き Java、Kotlin、IntelliJ、Jenkins 車輪が 2 つ付いてるもの バイクは Kawasaki Ninja 250SL チャリンコは SPECIALIZED TARMAC 競プロ AtCoder 水色 酒 ビールだと一番搾りとヒューガルデンとブルックリンラガー 日本酒 DJ Technorch と Masayoshi Minoshima 嫌い JavaScript クソコード コーディングポリシー イミュータブル 非 null メソッドチェーン 呟き </description>
    </item>
    <item>
      <title>APSEC2019に参加した話</title>
      <link>https://t45k.github.io/blog/apsec_2019/</link>
      <pubDate>Thu, 05 Dec 2019 20:19:32 +0900</pubDate>
      <guid>https://t45k.github.io/blog/apsec_2019/</guid>
      <description>12/3~5にマレーシアで開催されたAPSECに参加してきました．&#xA;APSECとは Asia-Pacific Software Engineering Conferenceの略です． 要するにソフトウェア工学の国際会議です． 会議ランクについては詳しくは知らないのですがそこまで高くないと思います． 投稿前に先生が，「APSECは塩漬けのネタを投稿するのにちょうど良い」と語っていたのが印象的でした．&#xA;マレーシアとは こんな国です．&#xA;マレーシア&#xA;+ 物価が安い&#xA;+ 時差が1時間&#xA;+ 英語が通じる&#xA;+- 暑い&#xA;- 酒を飲める場所がかなり限られる&#xA;- 用を足した後に紙を使わない文化&#xA;&amp;mdash; task (@getupmax) December 6, 2019 感想 投稿前はあまり気乗りしなかったし，正直通るとも思ってませんでしたが，結果的には国際学会で発表できて良かったなと感じました． 質疑対応がかなりグダッてしまったので英語力（特にリスニング）を鍛えるのが重要だと思いました．</description>
    </item>
    <item>
      <title>LINE DEVELOPER DAY2019に参加した話</title>
      <link>https://t45k.github.io/blog/devday/</link>
      <pubDate>Thu, 21 Nov 2019 20:16:05 +0900</pubDate>
      <guid>https://t45k.github.io/blog/devday/</guid>
      <description>11/20，21に開催されたLINE DEV DAYに参加してきました．&#xA;DEV DAYとは LINEが開催している社内の技術などを公開するエンジニア向けのイベントです． 今年は二日に分けて開催し，エンジニアだけでなくデザインやプロダクト的な話も盛り込んだそうです．&#xA;参加したきっかけ LINEのインターンに参加した時のメンターさんがLINE SDKのリードテックになられたらしく，DEV DAYでの登壇の際にインターン中に作ったプロダクトを紹介するかもみたいな話を小耳に挟んだのがきっかけです． また，LINEは学生向けに金銭的援助を行っており，インターン生は（交通費として）無条件で3万円もらえるというのも結構魅力的でした．&#xA;感想 20日は違う会社の採用面接に参加していたため，21日だけ参加しました． 思ったより規模が大きく，たくさんの人が参加していたのが印象的でした． 感想ですが，実は当日頭痛が酷く，話を聞く余裕がなかったというのが正直なところです． 例のメンターさんの発表で，唐突にライブコーディングが始まったのだけはっきり覚えています． また，国際学会前というのもあり，慌ただしく帰ることになってしまいました．&#xA;今年はゆっくり聞く時間がなかったので，来年機会があればもう少し余裕を持って参加したいなと感じました．</description>
    </item>
    <item>
      <title>インターン総括</title>
      <link>https://t45k.github.io/blog/intern/</link>
      <pubDate>Sat, 14 Sep 2019 18:26:04 +0900</pubDate>
      <guid>https://t45k.github.io/blog/intern/</guid>
      <description>2019年，M1の夏休みに行ってきたインターンの所感を書きます．&#xA;参加したインターン AWS LINE KYOTO 楽天 参加しなかったインターン NTT DATA 参加できなかったインターン NSSOL cookpad インターン全体の所感 意識高い学生が多い&#xA;学部の時は普段からゴリゴリ開発してるような友人はあまりいなかったため，意識の高い学生がこんなにもいることに驚きました 彼らと就活で戦うことを考えるとすでに辛い 結構B3，B4で参加してる人も多い&#xA;意識高い 当時の僕はインターンなんて考えたことなかったので 実力も高い&#xA;AtCoder青とかがゴロゴロいる また，自分のスキルアップ（特にweb周りの知識）に繋がったのでよかったです．&#xA;反省点としては，フロントなどの今までの自分が全くやったことがないような分野に挑戦することがなかったことが挙げられます． 自分の知らない分野を一から勉強した上できちんとしたものを作ることを，期限が短いインターン中にやり切るのは難易度が高いと感じました． こういうことは普段から興味を持って勉強した方が良いのだと考えさせられました．</description>
    </item>
    <item>
      <title>楽天のインターンに参加した話</title>
      <link>https://t45k.github.io/blog/rakuten/</link>
      <pubDate>Fri, 13 Sep 2019 18:21:32 +0900</pubDate>
      <guid>https://t45k.github.io/blog/rakuten/</guid>
      <description>9/9~13の間，大阪で開催された楽天様のインターンに参加してきました． 写真はインターン中に頂いた無料朝食です．&#xA;楽天とは 説明不要だと思います． 日本発のメガベンチャーで，ECの楽天市場などが有名です． 会社としては，外国人を積極的に採用しており，社内公用語が英語であることが特徴です．&#xA;選考フロー 選考は面接だけでした． 面接の内容もそこまで突っ込んだ話はしなかったです． 面接官の社員さんと趣味が合い，ずっとバイクの話をしていました．&#xA;面接に通過した後，Springを使うための簡単な事前課題が出されました．&#xA;インターン 外国人向けサービスを作ってみようという題目でハッカソンを行いました． 学生4人 + メンターの社員さん2名で開発を行っていくという方式でした． 今までメンターの社員さんは困ったり質問があったら訊きにいく程度の存在だったので，ここまでがっつり開発に参加してくれるのは新鮮でした． 他のインターンでは作るものが指定されていたので，アイデアソンから始めるというのは初めての出来事でした（余談ですが，アイデアが他の班と完全に被っていました）．&#xA;開発を始めたのは2日目の朝からでしたが，班のメンバーにはgitを使ったことなかったり，Javaを書いたりしたことがない人もいたため，午前中はそこら辺の知識の共有から始めました（これのおかげで，その後スムーズに開発することができました）． 仕様などを決める際にも，社員さんと相談しながら決めました． AWSの時はまったく理解できなくて着いていけなくなった経験から，分からないことは質問して理解してから先に進むようにしました． 開発自体はスムーズに進み，プロダクト自体も個人的には満足いくものが作れました． 技術的な面では，空いている時間でCIやDockerなどのモダンな技術を導入できました． しかしプレゼンがグダリすぎてしまい，コンペでは最下位という結果でした． プロダクト自体には満足していたので，結構悔しかったです． ただ開発は楽しかったし，会社としての楽天も食堂が無料など良い点が多くインターンには非常に満足しました．&#xA;追記 インターン中のパフォーマンスが評価されて，M1の10月ごろに採用面接をしていただけました． 合計3回の面接を経て，内定を頂けました．</description>
    </item>
    <item>
      <title>LINE KYOTOのインターンに参加した話</title>
      <link>https://t45k.github.io/blog/line/</link>
      <pubDate>Fri, 30 Aug 2019 18:13:39 +0900</pubDate>
      <guid>https://t45k.github.io/blog/line/</guid>
      <description>8/26~30の間，京都で開催されたLINE KYOTOのインターンに参加してきました．&#xA;LINE KYOTOとは LINEが何なのかは説明不要だと思うので割愛します． LINE KYOTOは開発部しか持っていない，純粋な開発拠点であることが特徴の一つです． また，京都という土地柄，外国人が多く所属しているのも特徴です（社員さんの半分以上が外国籍の方でした）．&#xA;選考フロー 選考は技術試験と面接です． 技術試験はいわゆるプロコンみたいな問題で，普段から勉強しておくと多少有利かもしれません． 面接は，今まで自分がやってきたことを5枚程度のスライドにまとめて，その内容も踏まえて面接を行うというものでした． 僕はこれまで大規模な開発などを経験したことがなかったので，これまでやってきた研究について話しました． 結構倍率は高いようでしたが何とか通りました．&#xA;インターン LINEが開発しているLIFF SDKを用いて，LINE上で動くサービスを開発してみようという内容でハッカソンを行いました． 3人で一つの班を組み，4つのテーマから1つ選択するという形式で，僕たちの班はUNOを選択しました． 僕達が参加した一週間前にも同じインターンがあり，その時UNOを選択した班は結局完成しなかったと散々脅されましたが，結果的に4班中3班がUNOを選択していました．&#xA;僕達の班はフロントの描画担当の子がKotlinで書くということなので，フロントからサーバまですべてKotlinで書くことにしました． 僕は楽天のインターンの事前課題でSpringを触っていたのでサーバを書くことにしました． また，3人班のもう一人の子が超絶優秀で，最初に仕様とDB設計を行い，サーバとフロントの手伝いをしつつ，サーバとフロントと外部APIを繋げてちゃんと動くようにするという一番難しい部分を担ってくれたおかげで，僕たちの班はちゃんと動くものを作ることができました． 結果的に他の2班は完成させることができず，とても達成感と満足感を得ることができました．&#xA;社員さん達もそれぞれの分野に精通した人が揃っていて，問題が発生してもすぐに解決できることが多かったです． 残業禁止で定時には全員帰られるというのもとても魅力的でした．&#xA;インターン中の様子は以下の以下のLINE公式ブログにも取り上げられています． https://engineering.linecorp.com/ja/blog/kyoto-intern2019/&#xA;追記 せっかくインターンに参加したので，本選考も受けることにしました． 本選考は技術テストが1回，技術面接が1回，最終面接でした． 最終面接にて無事不採用となりました．</description>
    </item>
    <item>
      <title>AWSのインターンに参加した話</title>
      <link>https://t45k.github.io/blog/aws/</link>
      <pubDate>Tue, 20 Aug 2019 18:07:41 +0900</pubDate>
      <guid>https://t45k.github.io/blog/aws/</guid>
      <description>8/19~13の間，東京で開催されたAmazon Web Serviceのインターンに参加してきました．&#xA;AWSとは AWSとは，Amazon Web Serviceの略です． AWSはAmazonのクラウド事業を担当している会社です． Amazonのマーケットプレイスを筆頭に，様々な会社がAWSのクラウドを利用しています（クラウド事業ではシェア1位です）． 今，世界で最も勢いのあるIT会社の一つだと言えます．&#xA;選考フロー HP上には技術試験 + 面接と書いてあったのですが，なぜか面接が行われませんでした． 技術試験では実際にEC2インスタンスが与えられ，そこの上でAPIサーバを立てるという内容でした． 今までサーバ開発をしたことがなかったので，簡単にサーバが書けると噂のPHPを急いで勉強して何とか提出にこぎつけました． 問題的には明らかにDBを使わせようとしていましたが，そこまで手が回らなかったのでjsonファイルを読み書きするという手段をとりました． 結果的に通ったので良かったです．&#xA;インターン 実際に存在するサービスを模倣してアーキテクチャを設計するという題目で，5日間グループワークを行いました． 仕事内容的には魅力的だったのですが，いかんせん僕にネットワークの知識がなさすぎて2日目くらいから早くも着いていけなくなりました． 東京まで来て何してるんだろうって結構辛い気持ちになりました． ただしっかり勉強した上で望めば本当に楽しいのだろうなと感じました．&#xA;追記 このインターンは採用直結型だったので，インターン後そのまま本選考に応募しました． 技術試験，技術面接，最終面接を経て，12/24に無事不採用となりました．</description>
    </item>
    <item>
      <title>cookpadのインターンに参加できなかった話</title>
      <link>https://t45k.github.io/blog/cookpad/</link>
      <pubDate>Thu, 01 Aug 2019 18:32:27 +0900</pubDate>
      <guid>https://t45k.github.io/blog/cookpad/</guid>
      <description>cookpadのインターンに参加できませんでした．&#xA;cookpadとは 料理のレシピを提供するサービスで有名な会社です． あまり知られていないのですが（僕が知らなかっただけかもしれませんが），ITに力を入れており，技術力があるエンジニアが多く所属しています．&#xA;選考フロー 技術試験 + 面接です．&#xA;技術試験はプロコンのようにテストケースが用意されているわけではなく，仕様のみが与えられてそれに一致するようなコードを書くという問題でした． 仕様を満たすようにコードは書いたつもりでしたが落ちてしまいました．&#xA;原因として考えられるのが，問題中APIを叩く部分があって，通常であれば言語仕様に則ってPOSTなどをすると思うのですが，当時はAPIって何?って状態だったので，直接コマンドからcurlを呼び出すように書きました． その辺から技術不足が見抜かれたのかなぁって感じです．&#xA;結構悔しかったです．</description>
    </item>
    <item>
      <title>NSSOLのインターンに参加できなかった話</title>
      <link>https://t45k.github.io/blog/nssol/</link>
      <pubDate>Thu, 01 Aug 2019 18:32:21 +0900</pubDate>
      <guid>https://t45k.github.io/blog/nssol/</guid>
      <description>NSSOL様のインターンに参加できませんでした．&#xA;NSSOLに行った研究室の先輩方は多く，結構興味を持っていました． 東京までの旅費や宿泊費を出してくれる上に，毎日飲み会があると聞いていたので参加できることを楽しみにしていました．&#xA;NSSOLとは 日本製鐵のシステム部門が独立してできた会社です． 母体が大きな会社であり，NSSOLも国内のSIerの中ではそれなりに大きく有名な会社です．&#xA;選考フロー ES + SPI + 面接でした．&#xA;SPIはテストセンターまで受けに行かなければならず面倒でした． 面接は顔合わせ程度のものだと聞いていたのでここで落とされるとは思っていませんでした． ただ面接自体は，普段からやっていて癖になっている自虐が多く出てしまい落ちることも納得でした． こういうジャパニーズトラディショナルカンパニーには面接でありのままの自分を見せるよりも多少は偽った方が良いのかなと思いました．</description>
    </item>
    <item>
      <title>NTT DATAのインターンに参加しなかった話</title>
      <link>https://t45k.github.io/blog/ntt/</link>
      <pubDate>Thu, 01 Aug 2019 18:32:15 +0900</pubDate>
      <guid>https://t45k.github.io/blog/ntt/</guid>
      <description>NTT DATAのインターンに参加しませんでした．&#xA;NTT DATAとは 国内情報系最大手のNTTのSI部門会社です． やはり最大手らしく，日本全国から有能な人材が集まることで有名です．&#xA;選考フロー ES + SPI + 動画提出でした．&#xA;テストセンターに行かなくても自分のパソコン上でSPIを受けれたのが個人的に楽でした． 動画はインターンに対する意気込みを語れとのことでした． これで採用か不採用かが決まるのも変な気がしましたが，とりあえずほぼ一発どりで提出したら通ってびっくりました．&#xA;このインターンに参加すると合計4週間インターンに行くことになってしまうので辞退しました．</description>
    </item>
    <item>
      <title></title>
      <link>https://t45k.github.io/kyopuro/doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://t45k.github.io/kyopuro/doc/</guid>
      <description>&lt;!DOCTYPE HTML&gt; 生成されたドキュメント(タイトルなし) ブラウザのJavaScriptが無効になっています。&#xA;library/package-summary.html</description>
    </item>
  </channel>
</rss>
