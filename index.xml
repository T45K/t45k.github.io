<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>T45K</title>
    <link>https://t45k.github.io/</link>
    <description>Recent content on T45K</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 14 Jan 2020 22:32:06 +0900</lastBuildDate>
    
	<atom:link href="https://t45k.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ディスコ探偵水曜日 読了</title>
      <link>https://t45k.github.io/blog/disco_detective_wednesdayyy/</link>
      <pubDate>Fri, 24 Apr 2020 19:01:51 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/disco_detective_wednesdayyy/</guid>
      <description>この世の出来事は全部運命と意志の相互作用で生まれるんだって、知ってる？
舞城王太郎の「ディスコ探偵水曜日」を読みました． 10年以上前の本なのでおそらく新品ではもう手に入りません． 僕はBook Offをはしごしました．
上中下の3巻構成なのですが，下巻が異様に長い上にとても難解． この本を読むのは2回目ですが，今回も内容を理解しきれませんでした．
粗筋は割愛します． 個人的には中間の，名探偵が次々と推理を披露して死んでいくシーンと，そしてディスコが最後の推理をするシーンが， 舞城王太郎特有のスピード感があって好きです．
1年に1回，イベントとしてこの本を読むことをありかなぁと思いました．
次は西尾維新の「クビシメロマンチスト」を読む予定です．</description>
    </item>
    
    <item>
      <title>ABC163の解説</title>
      <link>https://t45k.github.io/kyopuro/abc163/</link>
      <pubDate>Tue, 21 Apr 2020 16:22:58 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc163/</guid>
      <description>3完． unratedで良かった&amp;hellip; コード
A - Circle Pond やるだけ．
円周は2 * r * 円周率． Javaだと円周率はjava.lang.Math.PIが使える．
B - Homework 全ての宿題をやるにはΣ Ai日かかるので，それをMと比較する．
C - management 問題文が若干ややこしい． やることは特定の数字が何回出てくるかを数えるだけ． はじめに配列array[N + 1]を用意して，各Aiに対してarray[Ai]++する．
D - Sum of Large Numbers 時間内に解けなかった． 組み合わせの問題だと思ってライブラリを引っ張ってきたけど使わなかった&amp;hellip;
各数字が10^100以上と十分大きいので，足し合わせる個数が違うとき同じ値になることはない． あるiに対してfront_sumを0からi-1までの和，back_sumをn-i+1からnまでの和とすると， i個選択する時の組み合わせによって得られる和はi * 10^100 + front_sumからi * 10^100 + back_sumまでの間に収まる． つまり，back_sum - front_sum + 1通りになる． front_sumとback_sumは累積和で取れるので，iをKからNまで動かして足し合わせれば良い．
E - Active Infants 原始的なDP（ほんまか？）．
活発度が高い順に左か右に移動させる． 活発度を降順にソートした時，dp[i][j]を，(i+j)番目の園児を移動させた結果左側にi人，右側にj人の時の嬉しさという風に考える． そうすると，dp[i][j]は左側にi-1人，右側にj人いるときに(i+j)番目の園児を左側に移動させるか左側にi人，右側にj-1人いるときに(i+j)番目の園児を右側に移動させるの嬉しさが大きい方になる．</description>
    </item>
    
    <item>
      <title>MacでIntelliJを使っているとクラッシュする問題と解決法</title>
      <link>https://t45k.github.io/blog/fix_mac_fault/</link>
      <pubDate>Mon, 13 Apr 2020 17:38:19 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/fix_mac_fault/</guid>
      <description>MacBook Air 2020を買いました．詳しくはここ．
普段はJavaやKotlinを書いているので迷いなくIntelliJ IDEAをインストールしたのですが，どうも挙動がおかしい．
というのも，結構な頻度でIntelliJがクラッシュするし，場合によってはOSがクラッシュ強制的に再起動がかかります． ひどい時にはOSがクラッシュして再起動がかかり，それが開けた2分後に再びクラッシュしたこともあります．
実はLINEのインターンで借りていたMacBook Pro 15inchでも似たような問題が起こっていたので，2度目の経験でした．
インターンで借りていたパソコンは5日間で返すので我慢して使っていましたが，今回は長らく使っていく予定なので流石に直す必要がありました．
修理も視野に入れながら解決法を探しました．
解決法 結論からいうと原因は分かりませんでしたが()，OSを再インストールすることで解決しました．詳しくはこちら．
原因が分からないので全ての人がこれで直るかは分かりませんが，OS再インスコでデータが消えることはないため真っ先に試す価値はあります．</description>
    </item>
    
    <item>
      <title>MacBook Airを購入した話</title>
      <link>https://t45k.github.io/blog/macbook_air/</link>
      <pubDate>Mon, 13 Apr 2020 17:21:02 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/macbook_air/</guid>
      <description>念願のMacBook Airを購入しました! 構成は
 CPU: 1.1GHzクアッド メモリ: 16GB SSD: 256GB  数ヶ月後に出ると噂のMacBook Proを待っている人もいるかもしれませんが，僕は以下のような理由でmbaを選びました．
1 - もう待てなかったから ずっと新しいmacが欲しいと思っていたのでこれ以上待てませんでした
2 - そこまでスペックを必要としていないかったから 研究室からmbpを借りていますし，研究などでマシンパワーが必要な時は研究室のワークステーションを使えば良いだけなので
3 - Touch barが嫌いだから バタフライキーボードはともかく，Touch barは賛否両論ありますが，僕はあまり好きになれませんでした． たまに反応しなくなったりするし．
4 - 安いから 税込み13万で買えました． mbpはこんなものじゃすまないと思います．
理由としてはこんなところです． 付け加えるなら，自分の理想にとても近かったというのもあります． これは去年の12月のツイート
はよmacbook air，13インチ，cpu4コア，RAM16GB，SSD256GB，ファンクションキー，シザーキーボードで10万くらいのやつ出てくれや
&amp;mdash; task (@getupmax) December 8, 2019  使い心地 ある一点を除いたら最高です（その一点も結局解決しました）．
主にmbpとの比較になるのですが，
 軽い 薄い 開けやすい(mbaは切り欠けが下まで貫通している)  みたいなところです．
最後に こうなりました． </description>
    </item>
    
    <item>
      <title>ABC162の解説</title>
      <link>https://t45k.github.io/kyopuro/abc162/</link>
      <pubDate>Mon, 13 Apr 2020 16:57:30 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc162/</guid>
      <description>祝参加者1万人越え．無念の4完．コード
A - Lucky 7 やるだけ．文字列で読み込んでString#containsを使うと早い．
B - FizzBuzz Sum これもやるだけ．LongStreamできれいに書ける．
LongStream.rangeClosed(1, scanner.nextInt()) .filter(i -&amp;gt; i % 3 != 0 &amp;amp;&amp;amp; i % 5 != 0) .sum(); C - Sum of gcd of Tuples (Easy) 三重ループを回すだけ．
D - RGB Triplets N &amp;lt;= 4,000なので二重ループで回すことを考える． ある座標以降のそれぞれの色が何個あるかを記録する． これは後ろから累積和をとることで可能． こうすることで，例えばiが赤色，jが緑色のとき，j+1以降の青色の個数をO(1)で得られる． また，k-j ≠ j-iの条件を満たすために，k-j = j-iとなるkに対して(j+1以降の数) - (k以降の数) + (k+1以降の数)と計算すれば良い(累積和の性質から)．
E - Sum of gcd of Tuples (Hard) 解法は思いついていたが計算量的にダメだと思っていて放置していたやつ
． 解答が詳しいのでそちらを参照． 繰り返し二乗法などを使うと速くなる．</description>
    </item>
    
    <item>
      <title>ABC161の解説</title>
      <link>https://t45k.github.io/kyopuro/abc161/</link>
      <pubDate>Sat, 04 Apr 2020 22:53:03 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc161/</guid>
      <description>100-200-300-400-600の5完． 人生初のオンサイト600点問題AC． コード
A - ABC Swap Z，X，Yを順に出力するだけ
B - Popular Vote やるだけ．
割り算の結果を比較するときは，a &amp;gt; b / cではなくa * c &amp;gt; bのように書いたほうが正確．
C - Replacing Integer 方針立てるのに時間かかった問題．
直感的には分かりづらいけど以下のように言い換えられる(chokudaiさんのツイート)．
C問題、数学の問題といえばそうなんだけど、「無限に長いすごろくがあります。ゴールまでの距離がxです。Kマスずつ進めますが、ゴールを通り過ぎてしまう場合は折り返します。最もゴールに近づく時の残りマス数を答えなさい」みたいにすると、まぁ一応ちゃんとしたストーリーはつくよね。
&amp;mdash; chokudai(高橋 直大)🌸🍆🍡 (@chokudai) April 4, 2020  というわけで，N % Kと(N - (N % K)) % Kの小さい方を求める．
D - Lunlun Number 想定解が天才すぎる．愚直に解いた．
i番目の数字に対して，i + 1番目の数字を次のように決める．各桁を下から順番に見ていく．もし見ている桁が9でなく，かつ次の桁の数字より1小さいか同じなら，その桁をインクリメントし，それ以降の桁をルンルン数かつ最小となるように調整(つまり，&amp;lsquo;上の桁 - 1&#39;か&amp;rsquo;0&amp;rsquo;)した値がi + 1番目の数になる．どの桁も条件に当てはまらなければ，一番大きい桁をインクリメントする．
各桁を確認，操作する場合は，数字をいったんchar型配列にするとやりやすいかも．
E - Yutori 解説AC．
前から貪欲と後ろから貪欲の結果を比較するだけ．解説に登場する配列L，Rを求めなくても，二分探索しても十分間に合う．
F - Division or Substraction E問題よりACが多いF問題．</description>
    </item>
    
    <item>
      <title>AtCoderで水色になりました</title>
      <link>https://t45k.github.io/blog/nyusui/</link>
      <pubDate>Sun, 29 Mar 2020 00:16:31 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/nyusui/</guid>
      <description>先日行われたABC160にて無事に入水を果たしたのでポエムを書きます． 感じたこと 一つの目標だった水色に到達してほっとしています． 人によっては10回かそこらでなる人もいる中，53回目でようやくなれた自分の才能とセンスのなさには本当に辟易しています． 精進が大事． 蟻本は最初の章しか読めてないけど結構役に立ちました．
次は せっかくなので青色を目指します． ここ2回のABCは青パフォが出てるので，この調子で頑張っていきたいです．
最後に 毎回楽しいコンテストを開催してくれているAtCoder社と，その問題を用意してくれているWriter，Testerの皆様に心から感謝します．</description>
    </item>
    
    <item>
      <title>ABC160の解説</title>
      <link>https://t45k.github.io/kyopuro/abc160/</link>
      <pubDate>Sat, 28 Mar 2020 23:27:57 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc160/</guid>
      <description>5完．コード
A - Coffee 書かれてることをするだけ．String#charAtを使う
B - Golden Coins なるべく多くの500円に換金した方が良いので，まずはXを500で割る． 余りを50で割って，それぞれの商に1000と5を掛けて出力．
C - Traveling Salesman around Lake ある家からその一つ手前の家までをぐるっと一周回ってくるのが最適となる． 1番目の家からN番目の家までに移動距離はAi - AN，それ以外の家iから家i - 1まではK - Ai + Ai-1になるので，その中の最小値が答え．
D - Line++ ワーシャルフロイドっぽい問題．
まず初めにX，Yを経由しない場合の全ての頂点間の距離を求める． これはグラフを隣接行列で表すとgraph[i][j] = |i - j|となる．
次に，XまたはYを経由した場合を考えた上で，全ての頂点間の最短距離を求める． これはgraph[i][j] = min(graph[i][j], graph[i][X] + graph[X][j])となる．
最後に，隣接行列の中で各距離の出現回数を記録し，それを出力する．
E - Red and Green Apples 貪欲にやるだけ．
美味しさを最大化したいとき，赤リンゴを降順に並べたときのX+1つ目以降と緑リンゴを降順に並べたときののY+1つ目以降は捨ててもよい． 後はそれぞれのリンゴの小さいものを順番に無色のものと入れ替えるだけ．</description>
    </item>
    
    <item>
      <title>ABC159の解説</title>
      <link>https://t45k.github.io/kyopuro/abc159/</link>
      <pubDate>Sun, 22 Mar 2020 22:48:22 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc159/</guid>
      <description>奇跡的に5完．コード
A - The Number of Even Pairs 和が正になるのはeven + evenかodd + oddの時なので，偶奇それぞれに対して組み合わせ(n * (n - 1) / 2)を計算して足し合わせる．
B - String Palindrome 書かれてることをするだけ． 回文系の問題は以下のようなメソッドを作っとくと便利かも．
private static boolean isPalindrome(final int start, final int end, final String s) { for (int i = 0; ; i++) { if (start + i &amp;gt;= end - i) { return true; } if (s.charAt(start + i) != s.charAt(end - i)) { return false; } } } C - Maximum Volume Lの1/3の3乗</description>
    </item>
    
    <item>
      <title>AGC043の解説</title>
      <link>https://t45k.github.io/kyopuro/agc043/</link>
      <pubDate>Sat, 21 Mar 2020 23:37:35 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/agc043/</guid>
      <description>1完．コード
A - Range Flip Find Route 全探索の計算量をいかに減らせるかがポイント．DPは思いつかんかった&amp;hellip;
右か下にしか移動できない時，黒ゾーンに入ってから出るまでの経路を一回の操作で白にできる（公式参照）． なので，白から黒に入る経路のコストを1，それ以外を0とみなした最短経路問題に落とし込むことができる． ダイクストラ法を使うと計算量は頂点数Vと辺数Eに対してO(V * log(E))となる． 今回の頂点数VはV &amp;lt;= H * W = 10 ^ 4となる． また，一つの頂点に対して辺の数はたかだか2(右に移動するか下に移動するかの2通り)なので，十分間に合う．
B - 123 Triangle 誰がこんな解法思いつくんでしょうね&amp;hellip;(解説AC)
答えは0，1，2のいずれかになるので，初めに答えの偶奇を判定する． 各aは先に1引いといても問題ない． 偶奇判定なので，abs(a - b)ではなくa xor bで良い． そうすると，   x n,1  = (  C 0 n-1  ⁢  x 1,1  ^  C 1 n-1  ⁢  x 1,2  ^ &amp;hellip; ^  C n-1 n-1  ⁢  x 1,n  ) % 2  となる． そのため，各組み合わせを計算すれば良い．</description>
    </item>
    
    <item>
      <title>みんな元気。読了</title>
      <link>https://t45k.github.io/blog/all_fine/</link>
      <pubDate>Fri, 20 Mar 2020 12:00:53 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/all_fine/</guid>
      <description>舞城王太郎の「みんな元気。」を読みました．Amazon
この本は，表題である「みんな元気。(副題: Cuckoos &amp;amp; The Invisible Devil)」と短編4編で構成されています． 例によってきっかけはDJ Technorch．
粗筋は，空飛ぶ家族が主人公の妹を拐いに来てなんやかんやある感じです． 相変わらず難解だった気がします． この物語は，「選択」が主題の一つだと思います． 副題のカッコウから，拐われた妹が実は托卵だったみたいな展開を予想しましたが全然そんなことありませんでした． 風呂敷をめちゃくちゃに広げたうえで畳むことなく急に終わる感じなのですが，終わり方が納得できるというかとても爽やかでした．
短編集の中では，「スクールアタック・シンドローム」が好きです．
なんとなく，舞城王太郎特有のスピード感的なものを理解してきた気がしました．
次はおそらく「九十九十九」を読みます．
最後に
 </description>
    </item>
    
    <item>
      <title>パナソニックプログラミングコンテスト2020の解説</title>
      <link>https://t45k.github.io/kyopuro/panasonic2020/</link>
      <pubDate>Sat, 14 Mar 2020 22:56:44 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/panasonic2020/</guid>
      <description>4完．コード
A - Kth Term 実装するだけ． Javaの場合は問題文をコピペしてfinal int[] array = {1, 1, ...};と宣言すると早い．
B - Bishop ここに一番時間を吸われた．
問題例を見ると最終的に(h * w + 1) / 2でいけそうに見えるが，hまたはwが1の時角は一切移動できなくなることに気付けるかがポイント．
C - Sqrt Inequality ここにも時間を吸われた．
Math#sqrtを使うと解けそうな気がするが，精度の都合上間違いになることがある． 今回は式変換を行うと4ab &amp;lt; a^2 + b^2 + c^2 + 2ab - 2bc - 2caに持っていけるので，そこに代入するだけ． あるいはBigDecimalを使っても大丈夫らしい．
D - String Equivalence 偶然通った問題．
左側から文字を決めていくが，使える文字は自身より左に存在している一番大きい文字 + 1までしか使えないことに注意．
E - Three Substrings 全探索の問題．ここを参考にした．
Editorialではa，b，cの順番を考慮せずにやる方法を紹介しているが，考えることが増えるので素直に全ての順列で場合分けした方が良さそう． 以降，(aの先頭) ≦ (bの先頭) ≦ (cの先頭)の場合を考える．
まず，a中のどの箇所がbと被っているかを全探索して，配列か何かに記録する(O(n^2))．これをaとc，bとcに対してもやる． コードだとこんな感じ．
private static boolean[] init(final int length, final String a, final String b) {// 配列の初期化  final boolean[] array = new boolean[length]; // lengthは十分大きい値  Arrays.</description>
    </item>
    
    <item>
      <title>ABC061#Dの別解</title>
      <link>https://t45k.github.io/kyopuro/abc061_d/</link>
      <pubDate>Sun, 08 Mar 2020 20:39:29 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc061_d/</guid>
      <description>ABC061 D - Score Attackの別解．コード
問題内容 正負の重みの辺で構成された，閉路を含む有向グラフの単一始点終点の最長経路を求める問題． 解説では，初めに辺の重みの正負を逆転してからベルマンフォード法で最短経路を求めている． また，経路に影響を与えうる閉路の存在を確認するために，フラグを使った方法を採用している．単純に負の閉路の存在が最短経路に影響を及ぼすわけではないことに注意．
別解 最長路検出と閉路検出について異なる方法を紹介する．
最長路検出 今回頂点数が1,000と比較的少ないので，BFSを用いた全探索が可能である． BFSを用いる場合は，閉路を含むことから，キューが空にならない可能性があるので，繰り返し回数を制限する必要がる． BFSであることから，n ^ 2 回繰り返せば十分である．
閉路検出 解説ではbool型配列を用いてフラグ管理をしているが，そもそもフラグ管理をする必要はない． 各辺に対する経路長の更新を頂点の個数回繰り返し，結果が変わっていればinfを出力すれば良い．</description>
    </item>
    
    <item>
      <title>ABC158の解説</title>
      <link>https://t45k.github.io/kyopuro/abc158/</link>
      <pubDate>Sat, 07 Mar 2020 22:42:19 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc158/</guid>
      <description>四完．コード
A - Station and Bus 連想配列にぶちこむ．
B - Count Balls n に対する (A + B) の商と余りを求めておき，ごちゃごちゃする．
C - Tax Increase 1から20,000くらいまでの整数が条件を満たすか全探索．
D - String Formation 現在文字列が正順なのか逆順なのかを記録しておくフラグを用意する． クエリが1ならフラグ反転，クエリが2の場合は，
 正順ならクエリ通りに文字追加 逆順ならクエリとは逆に文字追加  をやる． 最終的にフラグを参照してから正しい方向で出力．
StringBuilder#insertを使うとTLEになりました．</description>
    </item>
    
    <item>
      <title>好き好き大好き長愛してる。 読了</title>
      <link>https://t45k.github.io/blog/love_love_love_you_i_love_you/</link>
      <pubDate>Tue, 03 Mar 2020 16:20:18 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/love_love_love_you_i_love_you/</guid>
      <description>舞城王太郎の「好き好き大好き超愛してる。」を読みました．Amazon
きっかけはDJ Technorchの楽曲「Love Love Love You I Love You」．
舞城王太郎作品は，以前「ディスコ探偵水曜日」を読んでめちゃくちゃ読みにくいなと思っていたので，読む前に少し構えました．
「愛は祈りだ。」の一文から始まるこの本は，一貫して「愛」と「物語」についての小説です． 一文目がこれほど全体を象徴している作品は個人的にはこれが初めてで，おそらく長く記憶に残るんだろうなぁという感じです（余談ですが，最後の一文が一番記憶に残っている作品は西尾維新の「クビシメロマンチスト」）． 読みやすい方ではありますが，理解するのは難しいと感じました．
次は「みんな元気。」を読みます．
最後に，きっかけとなった楽曲を貼っときます．
 </description>
    </item>
    
    <item>
      <title>ABC157の解説</title>
      <link>https://t45k.github.io/kyopuro/abc157/</link>
      <pubDate>Sun, 01 Mar 2020 22:53:59 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc157/</guid>
      <description>なんとか四完．コード
A - Duplex Printing nに1足して2で割るだけ
B - Bingo 実装するだけだが実装量が多くなりがちな問題
C - Guess The Number 条件に合う数字を生成する方針をとるもWAになったので全探索する方向に変更． 桁数を満たす整数を昇順に条件を満たすか確認する． 余談だが，WAの原因はおそらく1桁の数字は0でも大丈夫なのを考慮していなかったため．
D - Friend Suggestions Union-Find Treeで殴る問題． 友達関係を取得する時にUnion-Find Treeを構築します． 同時に，それぞれの人が何人友達がいるかを記録します．
ブロック関係を取得する際に，それぞれの人に何人ブロックしている人がいるか記録します． この時，友達候補でない人を記録する必要はありません．
最終的に，Union-Find Treeから自分，友達，ブロック関係を含めた自分と繋がっている人を得られるので，そこから友達の人数とブロックしている人数と自分自身の人数を引くことで答えが求まります．
余談ですが，Setをfor文で回すと異様に遅いので，for文を使う場合はListを使った方が良いです．</description>
    </item>
    
    <item>
      <title>最小全域木メモ</title>
      <link>https://t45k.github.io/kyopuro/min_spanning_tree/</link>
      <pubDate>Sat, 29 Feb 2020 22:37:36 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/min_spanning_tree/</guid>
      <description>最小全域木という概念を知ったのでメモ．
最小全域木とは 無向グラフが与えられた時に，その部分グラフで任意の2頂点を連結にする様な木を全域木(Spanningu Tree)と言います．辺にコストがある場合に，使われる辺のコストの和を最小にする全域木を最小全域木(MST : Minimum Spanning Tree)と言います．（蟻本より）
つまり，グラフが連結であることを保ったまま，コストの大きい辺を間引いてできたグラフを指します．連結であり，かつ辺のコストの和が最小なので，グラフは木となります．
ABC065-Dがこの問題に該当します．
解き方 有名なアルゴリズムとして，クラスカル法とプリム法があります． 今回はプリム法を紹介します．
プリム法は至って単純で，各辺をコスト順にソートし，その辺が繋ぐノードが連結でなければその辺を採用，そうでなければ不採用としMSTを作ります． ノード同士が連結であるかどうかは，Union-Find Treeを用いて確認します．
// edges は Edge(int label1, int label2, long cost) のリスト edges.sort(Comparator.comparingLong(o -&amp;gt; o.cost)); final UnionFindTree unionFindTree = new UnionFindTree(n); // 要素数nのUnion-Find Treeを構築 long sum = 0; for (final Edge edge : edges) { if (!unionFindTree.isSame(edge.label1, edge.label2)) { unionFindTree.unit(edge.label1, edge.label2); sum += edge.cost; } } 辺のソートに一番計算量を食われます．</description>
    </item>
    
    <item>
      <title>ワーシャルフロイド法メモ</title>
      <link>https://t45k.github.io/kyopuro/warshallfloyd/</link>
      <pubDate>Sun, 23 Feb 2020 01:54:16 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/warshallfloyd/</guid>
      <description>ワーシャルフロイド法というアルゴリズムを知ったのでメモ．
ワーシャルフロイド法とは グラフのある一点から任意の点への最短距離を求めるアルゴリズム． 計算量は点の個数nに対してO(n^3)． 似たようなアルゴリズムにダイクストラ法があるが，あちらはある2点の最短距離をO(n^2)で求めるアルゴリズムである． 計算量が重ためなので，使う場面はかなり限られるが，知っておくと便利だと思った．
実装 このアルゴリズムは，動的計画法を用いて最短距離を計算するというアイデアに基づいており，実装がとても簡単． 二次元配列を用いた例がこちら．
public static void main(final String[] args) { final int[][] graph = new int[n][n]; // 初めに無限大の値で各要素を初期化  for (int i = 0; i &amp;lt; graph.length; i++) { Arrays.fill(graph[i], Integer.MAX_VALUE / 2); // Integer.MAX_VALUEでないことに注意  graph[i][i] = 0; } // グラフの各辺を与えられた値に変更  // ここからワーシャルフロイド  for (int k = 0; k &amp;lt; graph.length; k++) { // 中継する点  for (int i = 0; i &amp;lt; graph.</description>
    </item>
    
    <item>
      <title>ABC156の解説</title>
      <link>https://t45k.github.io/kyopuro/abc156/</link>
      <pubDate>Sat, 22 Feb 2020 22:17:59 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc156/</guid>
      <description>4完．解答
A - Beginner 算数
B - Digits nが0になるまでkで割り続ける
C - Rally 座標は100までなので，1~100までの座標についてそれぞれ距離の総和を全探索する．
D - Bouquet 組み合わせの問題．
組み合わせの総和(nCkのkを1からnまで時の和)からaとbそれぞれの組み合わせ時の場合の数(nCaとnCb)を引く． 組み合わせの総和は2^n - 1になる． a，bの組み合わせ計算の際には，modを考慮する必要があるため，フェルマーの小定理などを利用すると良い(modInvなどでググると出てくる)．
modInvのJava実装の例</description>
    </item>
    
    <item>
      <title>ABC155の解説</title>
      <link>https://t45k.github.io/kyopuro/abc155/</link>
      <pubDate>Sun, 16 Feb 2020 22:48:43 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc155/</guid>
      <description>無念の三冠．
A - Poor 重複を調べる問題．
愚直に比較しても良いけど，Setを使うのが早そう．
JavaだとIntStreamからの各値にmapしてdistinctするとちょっとかっこいいかも．
B - Papers, Please fizzbuzzみたいな問題．
これもIntStreamからのfilterでallMatchすると多少カッコよく書ける．
C - Poll 連想配列を使って数え上げる典型的な問題．
StringのListのソート方法をド忘れして時間を無駄に使ってしまった(正しくはCollections#sort)． C#だと文字列ソートが遅いらしく発狂している人がちらほらいた．
D - Pairs E問題より難しいD問題． 以下の要素が重なりあってきつい．
決め打ち二分探索 決め打ち二分探索とは，単調性がある問題に対して，その問題を満たす最小の数字を探す二分探索法を指す． 単調性とは，ある数 x に対してその問題が成り立つならば，x 以降の数字に対しても成り立つような性質を指す．
実装的な視点で言うと，まず最初に単調性を満たし，真偽値を返す関数 isOk(...) を用意する． D問題だとある値 x と K が与えられた時に，積が x 以下となるペアの個数が K 以上の場合は真のようになる．
次に，二分探索の対象を用意する．このとき，始点は isOk が偽となり，かつ終点は真となるような範囲を用意する． 今回だと，例えば出力が正となるような場合分けをした時，0は必ず偽なので 0 ~ 10^18 のようになる．
そして二分探索する． 二分探索では通常範囲を指定するが，この時始点は isOk が偽，終点は真となることを意識する． 通常の二分探索と同じく対象範囲の真ん中の値((始点 + 終点) / 2)をとり，それの真偽を判定する． 真の場合は始点から真ん中の値までを，偽の場合は真ん中の値から終点までを再起的に計算する． この操作で，常に始点は偽，終点は真となる． 最終的に始点と終点が連続した値になるため，その終点を解として出力する．
要約すると，isOk() を満たす範囲の下界を求める操作だと言える．
Lower Bound / Upper Bound Editorialでは条件を満たす積を求めるのにしゃくとり法を用いていたが，個人的には二分探索を使った方が直感的だと感じた． 計算量もそこまで気にする必要はない． 今回は数字の重複があるため，普通に二分探索すると正しい答えが求まらない場合がある． そのため，Lower BoundやUpper Boundを用いる必要がある．</description>
    </item>
    
    <item>
      <title>ABC154の解説</title>
      <link>https://t45k.github.io/kyopuro/abc154/</link>
      <pubDate>Sun, 09 Feb 2020 22:40:15 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc154/</guid>
      <description>A~Dまで．コード
A - Remaining Balls Uで分岐
B - I miss you&amp;hellip; 入力の文字列の長さの回数&amp;rsquo;x&#39;を出力
C - Distinct or Not 連想配列を使って数字が出現したかを確認
D - Dice in Line 毎回期待値計算をすると遅いので，1000(&amp;gt;= pi)までの累積和を計算しておく． あとは連続したKの要素の期待値の合計をそれぞれ求めるだけ．
E - Almost Everywhere Zero 桁DP
0でない(= 1 ~ 9)の数字がK回出る回数を数える． 桁を上から決定していき数え上げる． 桁の決定の仕方は，その桁を決める前の時点でNより小さいことが確定しているかどうかで変わる．
確定している場合をdp[|N|][K + 1]と表現した時に，桁iでの状態遷移は以下のようになる
   桁i-1での状態 桁iでの状態     確定している 0を選択する: dp[i][k] += dp[i - 1][k]
0以外を選択する: dp[i][k] += dp[i - 1][k - 1] * 9   確定していない 桁iが0の時: Nより小さくすることはできないので何もしない</description>
    </item>
    
    <item>
      <title>ICSE2020の面白そうな論文をピックアップしてみた</title>
      <link>https://t45k.github.io/blog/icse2020_abst/</link>
      <pubDate>Sat, 01 Feb 2020 18:59:35 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/icse2020_abst/</guid>
      <description>ICSEはInternational Conference of Software Engineeringの略です． ソフトウェア工学の国際学会の中で一番ランクが高い会議です． 会議自体は5月に行われるのですが，再録された論文一覧とアブストが公開されているので， 面白そうな論文をピックアップしてみました．
Is Rust Used Safely by Software Developers? RustはC，C++に取って代わることを目指した，メモリ安全性や実行速度を売りにしているプログラミング言語です． その特徴から，ソフトウェア開発界隈からの注目度が高まりつつあります．
この論文では，メモリ安全性を放棄する代わりにパフォーマンスを上げる Unsafe Rust についての調査を行っています．
Securing UnSafe Rust Programs with XRust これもRustの論文です．
XRustという，Unsafe Rustを通常のRustに移行する手法を提案しています．
ICSEに(Unsafe)Rustに関する論文が2本採択されていることから，ソフトウェア開発におけるRustの盛り上がり具合が分かります．
Big Code != Big Vocabulary: Open-Vocabulary Models for Source code キャッチーなタイトルだったのでピックアップしてみました．
変数名などのユーザー定義の識別子があるため，ソースコードは自然言語に比べて，大規模になるとコーパスが巨大になってしまいます． この論文では，コーパスがスケールするように，新しい言語モデルを提案しています．
DLFix: Context-based Code Transformation Learning for Automated Program Repair 最近のソフトウェア工学の大きなトピックの一つであるAPRの論文．
機械学習ベースのAPRは過去のバグ修正の学習に制限があるのに対して，DLFixでは学習のレイヤを2層に分けることでうまくこの制限を回避したらしいです．
A Cost-efficient Approach to Building in Continuous Integration CIの論文．
CIのコストはビルドを回している時間だけかかってしまい，かつ，CIの目的はバグを発見することなので， 多くのバグを発見するビルドをなるべく早い段階で回す手法を提案しています．
Here We Go Again: Why Is It Difficult for Developers to Learn Another Programming Language?</description>
    </item>
    
    <item>
      <title>ABC153の解説</title>
      <link>https://t45k.github.io/kyopuro/abc153/</link>
      <pubDate>Sun, 26 Jan 2020 22:32:42 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc153/</guid>
      <description>けもフレチックでした．
A~Eまで
A - Serval vs Monster (H + A - 1) / A するだけ
B - Common Raccoon vs Monster 必殺技の総和をとって大小比較
C - Fennec vs Monster 体力が高い順にモンスターに必殺技を使い，残ったモンスターには通常攻撃
D - Caracal vs Monster 等比数列の和
E - Crested Ibis vs Monster DP
ソースコード
https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC153</description>
    </item>
    
    <item>
      <title>研究室のパソコンがmacbook proになった話</title>
      <link>https://t45k.github.io/blog/mbp/</link>
      <pubDate>Tue, 21 Jan 2020 18:11:41 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/mbp/</guid>
      <description>組織特有の，年末に予算を使い切る目的で，新しいmacbook proを貸してもらえることになった． モデルはMid2019の13インチモデル． 研究室内で大した業績を上げていない自分にしてはとても良いものを貸してもらえたと思う．
以下，使ってみた感想
良いとこ  速い  今まで2015年モデルのmacbook airを借りていた． mbpと比べるとマシンパワーが段違いであり，作業にかかる時間が大幅に短縮された．
 画面が綺麗  マジで全然違う． 4年でここまで変わるのかって感じ．
良くないとこ  日本語入力がもっさりしてる  mbaでは起きていなかった現象． 英語入力から日本語入力に変更した直後が，なぜか入力してから画面に表示されるまで0.5秒くらいかかる． ググったら結構記事がヒットしたので，何かしらの解決法はあると思う．
 キーボードがヤバイ  使う前からバタフライキーボードがやばいことは理解していたが，使ってみるとやっぱりやばかった． 普段RealForceや青軸のゲーミングキーボード等のしっかりと押し込むタイプのキーボードを使っているので違和感が凄い．
多分ボタンの押し方にコツが必要なのだと感じた． バタフライキーボードは指先で押すと指先を痛めやすい（インターンでmbpを借りていたときはマジで一日の終わりは指先が痛かった）ので，指の腹で押すのが大事だと思う． 今でも&amp;rsquo;return&#39;を押す右小指が痛くなってきた． 普段からmbpを使っている友達曰く，なぞるように押すのが良いらしいので慣れるしかないかなぁって気持ち．
また，バタフライキーボードは薄さにわりに押す際に力が必要なので，小指などで押す&amp;rsquo;A&#39;や&amp;rsquo;P&#39;などが押せてないことが頻発した．
エスケープが使いづらいのも地味に辛い．
まとめ 研究室ではRealForceに接続して使うのでバタフライキーボードはまだマシだと思う．</description>
    </item>
    
    <item>
      <title>ABC152の解説</title>
      <link>https://t45k.github.io/kyopuro/abc152/</link>
      <pubDate>Mon, 20 Jan 2020 00:27:48 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc152/</guid>
      <description>A~E問題まで．
A - AC or WA if文で分岐するだけ
B - Comparing Strings 辞書順なので，どれだけ長くても答えは必ず2数の小さい方の値で構成される． 2数の大きい方の値の回数だけ，小さい方の値を出力する．
C - Low Elements 数字を順番に見て行った時に，今見ている数字が今まで見てきた中で最小の値以下であればカウントして，最小の値を更新．
D - Handstand 2 与えられた数の範囲内で，数字の先頭と末尾だけを見た際に同じ数を数え上げていく． 例えば334は34，398は38という感じ． あとは組み合わせの数同士(例えば34なら43と，38なら83と)を掛け合わせるだけ．
E - Flatten modの逆元を知らないと厳しい問題．参考
この手の問題はユークリッドの互除法でGCDを求めてからLCMを求めるパターンがよくあるが，今回はオーバーフローの可能性があるため，素因数分解してからmod付きLCMを求める． LCMがmod計算してあるので，単純に各値で割るのではなく，modの逆元を計算した上で各値をLCMにかける必要がある．
ソースコード
https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC152</description>
    </item>
    
    <item>
      <title>自己紹介</title>
      <link>https://t45k.github.io/about/</link>
      <pubDate>Tue, 14 Jan 2020 22:32:06 +0900</pubDate>
      
      <guid>https://t45k.github.io/about/</guid>
      <description>こんにちは 中川 将（なかがわ たすく）です． 現在大阪大学大学院の修士二回生です．
好き  Java，Kotlin，IntelliJ バイク  Kawasaki Ninja250SLに乗ってます   剣道  高校，大学と剣道部でした 三段   競プロ  AtCoder水色   音楽  聴く方 DJ Technorch，aran，岸田教団，etc.   Party Parrot  嫌い  javascript 研究  呟き .box{ overflow:auto; width:500px; height:1000px; padding:1px; color:#000000; background-color:#000000; line-height:1.5em; }     </description>
    </item>
    
    <item>
      <title>APSEC2019に参加した話</title>
      <link>https://t45k.github.io/blog/apsec/</link>
      <pubDate>Thu, 05 Dec 2019 20:19:32 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/apsec/</guid>
      <description>マレーシアで開催された12/3~5に開催されたAPSECに参加してきました．
APSECとは Asia-Pacific Software Engineering Conferenceの略です． 要するにソフトウェア工学の国際会議です． 会議ランクについては詳しくは知らないのですがそこまで高くないと思います． 投稿前に先生が，「APSECは塩漬けのネタを投稿するのにちょうど良い」と語っていたのが印象的でした．
マレーシアとは こんな国です．
マレーシア
+ 物価が安い
+ 時差が1時間
+ 英語が通じる
+- 暑い
- 酒を飲める場所がかなり限られる
- 用を足した後に紙を使わない文化
&amp;mdash; task (@getupmax) December 6, 2019  感想 投稿前はあまり気乗りしなかったし，正直通るとも思ってませんでしたが，結果的には国際学会で発表できて良かったなと感じました． 質疑対応がかなりグダッてしまったので英語力（特にリスニング）を鍛えるのが重要だと思いました．</description>
    </item>
    
    <item>
      <title>LINE DEVELOPER DAY2019に参加した話</title>
      <link>https://t45k.github.io/blog/devday/</link>
      <pubDate>Thu, 21 Nov 2019 20:16:05 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/devday/</guid>
      <description>11/20，21に開催されたLINE DEV DAYに参加してきました．
  DEV DAYとは LINEが開催している社内の技術などを公開するエンジニア向けのイベントです． 今年は二日に分けて開催し，エンジニアだけでなくデザインやプロダクト的な話も盛り込んだそうです．
参加したきっかけ LINEのインターンに参加した時のメンターさんがLINE SDKのリードテックになられたらしく，DEV DAYでの登壇の際にインターン中に作ったプロダクトを紹介するかもみたいな話を小耳に挟んだのがきっかけです． また，LINEは学生向けに金銭的援助を行っており，インターン生は（交通費として）無条件で3万円もらえるというのも結構魅力的でした．
感想 20日は違う会社の採用面接に参加していたため，21日だけ参加しました． 思ったより規模が大きく，たくさんの人が参加していたのが印象的でした． 感想ですが，実は当日頭痛が酷く，話を聞く余裕がなかったというのが正直なところです． 例のメンターさんの発表で，唐突にライブコーディングが始まったのだけはっきり覚えています． また，国際学会前というのもあり，慌ただしく帰ることになってしまいました．
今年はゆっくり聞く時間がなかったので，来年機会があればもう少し余裕を持って参加したいなと感じました．</description>
    </item>
    
    <item>
      <title>インターン総括</title>
      <link>https://t45k.github.io/blog/intern/</link>
      <pubDate>Sat, 14 Sep 2019 18:26:04 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/intern/</guid>
      <description>2019年，M1の夏休みに行ってきたインターンの所感を書きます．
参加したインターン  AWS LINE KYOTO 楽天  参加しなかったインターン  NTT DATA  参加できなかったインターン  NSSOL cookpad  インターン全体の所感   意識高い学生が多い
 学部の時は普段からゴリゴリ開発してるような友人はあまりいなかったため，意識の高い学生がこんなにもいることに驚きました 彼らと就活で戦うことを考えるとすでに辛い    結構B3，B4で参加してる人も多い
 意識高い 当時の僕はインターンなんて考えたことなかったので    実力も高い
 AtCoder青とかがゴロゴロいる    また，自分のスキルアップ（特にweb周りの知識）に繋がったのでよかったです．
反省点としては，フロントなどの今までの自分が全くやったことがないような分野に挑戦することがなかったことが挙げられます． 自分の知らない分野を一から勉強した上できちんとしたものを作ることを，期限が短いインターン中にやり切るのは難易度が高いと感じました． こういうことは普段から興味を持って勉強した方が良いのだと考えさせられました．</description>
    </item>
    
    <item>
      <title>楽天のインターンに参加した話</title>
      <link>https://t45k.github.io/blog/rakuten/</link>
      <pubDate>Fri, 13 Sep 2019 18:21:32 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/rakuten/</guid>
      <description>9/9~13の間，大阪で開催された楽天様のインターンに参加してきました． 写真はインターン中に頂いた無料朝食です．
楽天とは 説明不要だと思います． 日本発のメガベンチャーで，ECの楽天市場などが有名です． 会社としては，外国人を積極的に採用しており，社内公用語が英語であることが特徴です．
選考フロー 選考は面接だけでした． 面接の内容もそこまで突っ込んだ話はしなかったです． 面接官の社員さんと趣味が合い，ずっとバイクの話をしていました．
面接に通過した後，Springを使うための簡単な事前課題が出されました．
インターン 外国人向けサービスを作ってみようという題目でハッカソンを行いました． 学生4人 + メンターの社員さん2名で開発を行っていくという方式でした． 今までメンターの社員さんは困ったり質問があったら訊きにいく程度の存在だったので，ここまでがっつり開発に参加してくれるのは新鮮でした． 他のインターンでは作るものが指定されていたので，アイデアソンから始めるというのは初めての出来事でした（余談ですが，アイデアが他の班と完全に被っていました）．
開発を始めたのは2日目の朝からでしたが，班のメンバーにはgitを使ったことなかったり，Javaを書いたりしたことがない人もいたため，午前中はそこら辺の知識の共有から始めました（これのおかげで，その後スムーズに開発することができました）． 仕様などを決める際にも，社員さんと相談しながら決めました． AWSの時はまったく理解できなくて着いていけなくなった経験から，分からないことは質問して理解してから先に進むようにしました． 開発自体はスムーズに進み，プロダクト自体も個人的には満足いくものが作れました． 技術的な面では，空いている時間でCIやDockerなどのモダンな技術を導入できました． しかしプレゼンがグダリすぎてしまい，コンペでは最下位という結果でした． プロダクト自体には満足していたので，結構悔しかったです． ただ開発は楽しかったし，会社としての楽天も食堂が無料など良い点が多くインターンには非常に満足しました．
追記 インターン中のパフォーマンスが評価されて，M1の10月ごろに採用面接をしていただけました． 合計3回の面接を経て，内定を頂けました．</description>
    </item>
    
    <item>
      <title>LINE KYOTOのインターンに参加した話</title>
      <link>https://t45k.github.io/blog/line/</link>
      <pubDate>Fri, 30 Aug 2019 18:13:39 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/line/</guid>
      <description>8/26~30の間，京都で開催されたLINE KYOTOのインターンに参加してきました．
LINE KYOTOとは LINEが何なのかは説明不要だと思うので割愛します． LINE KYOTOは開発部しか持っていない，純粋な開発拠点であることが特徴の一つです． また，京都という土地柄，外国人が多く所属しているのも特徴です（社員さんの半分以上が外国籍の方でした）．
選考フロー 選考は技術試験と面接です． 技術試験はいわゆるプロコンみたいな問題で，普段から勉強しておくと多少有利かもしれません． 面接は，今まで自分がやってきたことを5枚程度のスライドにまとめて，その内容も踏まえて面接を行うというものでした． 僕はこれまで大規模な開発などを経験したことがなかったので，これまでやってきた研究について話しました． 結構倍率は高いようでしたが何とか通りました．
インターン LINEが開発しているLIFF SDKを用いて，LINE上で動くサービスを開発してみようという内容でハッカソンを行いました． 3人で一つの班を組み，4つのテーマから1つ選択するという形式で，僕たちの班はUNOを選択しました． 僕達が参加した一週間前にも同じインターンがあり，その時UNOを選択した班は結局完成しなかったと散々脅されましたが，結果的に4班中3班がUNOを選択していました．
僕達の班はフロントの描画担当の子がKotlinで書くということなので，フロントからサーバまですべてKotlinで書くことにしました． 僕は楽天のインターンの事前課題でSpringを触っていたのでサーバを書くことにしました． また，3人班のもう一人の子が超絶優秀で，最初に仕様とDB設計を行い，サーバとフロントの手伝いをしつつ，サーバとフロントと外部APIを繋げてちゃんと動くようにするという一番難しい部分を担ってくれたおかげで，僕たちの班はちゃんと動くものを作ることができました． 結果的に他の2班は完成させることができず，とても達成感と満足感を得ることができました．
社員さん達もそれぞれの分野に精通した人が揃っていて，問題が発生してもすぐに解決できることが多かったです． 残業禁止で定時には全員帰られるというのもとても魅力的でした．
インターン中の様子は以下の以下のLINE公式ブログにも取り上げられています． https://engineering.linecorp.com/ja/blog/kyoto-intern2019/
追記 せっかくインターンに参加したので，本選考も受けることにしました． 本選考は技術テストが1回，技術面接が1回，最終面接でした． 最終面接にて無事不採用となりました．</description>
    </item>
    
    <item>
      <title>AWSのインターンに参加した話</title>
      <link>https://t45k.github.io/blog/aws/</link>
      <pubDate>Tue, 20 Aug 2019 18:07:41 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/aws/</guid>
      <description>8/19~13の間，東京で開催されたAmazon Web Serviceのインターンに参加してきました．
AWSとは AWSとは，Amazon Web Serviceの略です． AWSはAmazonのクラウド事業を担当している会社です． Amazonのマーケットプレイスを筆頭に，様々な会社がAWSのクラウドを利用しています（クラウド事業ではシェア1位です）． 今，世界で最も勢いのあるIT会社の一つだと言えます．
選考フロー HP上には技術試験 + 面接と書いてあったのですが，なぜか面接が行われませんでした． 技術試験では実際にEC2インスタンスが与えられ，そこの上でAPIサーバを立てるという内容でした． 今までサーバ開発をしたことがなかったので，簡単にサーバが書けると噂のPHPを急いで勉強して何とか提出にこぎつけました． 問題的には明らかにDBを使わせようとしていましたが，そこまで手が回らなかったのでjsonファイルを読み書きするという手段をとりました． 結果的に通ったので良かったです．
インターン 実際に存在するサービスを模倣してアーキテクチャを設計するという題目で，5日間グループワークを行いました． 仕事内容的には魅力的だったのですが，いかんせん僕にネットワークの知識がなさすぎて2日目くらいから早くも着いていけなくなりました． 東京まで来て何してるんだろうって結構辛い気持ちになりました． ただしっかり勉強した上で望めば本当に楽しいのだろうなと感じました．
追記 このインターンは採用直結型だったので，インターン後そのまま本選考に応募しました． 技術試験，技術面接，最終面接を経て，12/24に無事不採用となりました．</description>
    </item>
    
    <item>
      <title>cookpadのインターンに参加できなかった話</title>
      <link>https://t45k.github.io/blog/cookpad/</link>
      <pubDate>Thu, 01 Aug 2019 18:32:27 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/cookpad/</guid>
      <description>cookpadのインターンに参加できませんでした．
cookpadとは 料理のレシピを提供するサービスで有名な会社です． あまり知られていないのですが（僕が知らなかっただけかもしれませんが），ITに力を入れており，技術力があるエンジニアが多く所属しています．
選考フロー 技術試験 + 面接です．
技術試験はプロコンのようにテストケースが用意されているわけではなく，仕様のみが与えられてそれに一致するようなコードを書くという問題でした． 仕様を満たすようにコードは書いたつもりでしたが落ちてしまいました．
原因として考えられるのが，問題中APIを叩く部分があって，通常であれば言語仕様に則ってPOSTなどをすると思うのですが，当時はAPIって何?って状態だったので，直接コマンドからcurlを呼び出すように書きました． その辺から技術不足が見抜かれたのかなぁって感じです．
結構悔しかったです．</description>
    </item>
    
    <item>
      <title>NSSOLのインターンに参加できなかった話</title>
      <link>https://t45k.github.io/blog/nssol/</link>
      <pubDate>Thu, 01 Aug 2019 18:32:21 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/nssol/</guid>
      <description>NSSOL様のインターンに参加できませんでした．
NSSOLに行った研究室の先輩方は多く，結構興味を持っていました． 東京までの旅費や宿泊費を出してくれる上に，毎日飲み会があると聞いていたので参加できることを楽しみにしていました．
NSSOLとは 日本製鐵のシステム部門が独立してできた会社です． 母体が大きな会社であり，NSSOLも国内のSIerの中ではそれなりに大きく有名な会社です．
選考フロー ES + SPI + 面接でした．
SPIはテストセンターまで受けに行かなければならず面倒でした． 面接は顔合わせ程度のものだと聞いていたのでここで落とされるとは思っていませんでした． ただ面接自体は，普段からやっていて癖になっている自虐が多く出てしまい落ちることも納得でした． こういうジャパニーズトラディショナルカンパニーには面接でありのままの自分を見せるよりも多少は偽った方が良いのかなと思いました．</description>
    </item>
    
    <item>
      <title>NTT DATAのインターンに参加しなかった話</title>
      <link>https://t45k.github.io/blog/ntt/</link>
      <pubDate>Thu, 01 Aug 2019 18:32:15 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/ntt/</guid>
      <description>NTT DATAのインターンに参加しませんでした．
NTT DATAとは 国内情報系最大手のNTTのSI部門会社です． やはり最大手らしく，日本全国から有能な人材が集まることで有名です．
選考フロー ES + SPI + 動画提出でした．
テストセンターに行かなくても自分のパソコン上でSPIを受けれたのが個人的に楽でした． 動画はインターンに対する意気込みを語れとのことでした． これで採用か不採用かが決まるのも変な気がしましたが，とりあえずほぼ一発どりで提出したら通ってびっくりました．
このインターンに参加すると合計4週間インターンに行くことになってしまうので辞退しました．</description>
    </item>
    
  </channel>
</rss>