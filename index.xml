<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>T45K</title>
    <link>https://t45k.github.io/</link>
    <description>Recent content on T45K</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 23 Feb 2020 01:54:16 +0900</lastBuildDate>
    
	<atom:link href="https://t45k.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ワーシャルフロイド法メモ</title>
      <link>https://t45k.github.io/kyopuro/warshallfloyd/</link>
      <pubDate>Sun, 23 Feb 2020 01:54:16 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/warshallfloyd/</guid>
      <description>ワーシャルフロイド法というアルゴリズムを知ったのでメモ．
ワーシャルフロイド法とは グラフのある一点から任意の点への最短距離を求めるアルゴリズム． 計算量は点の個数nに対してO(n^3)． 似たようなアルゴリズムにダイクストラ法があるが，あちらはある2点の最短距離をO(n^2)で求めるアルゴリズムである． 計算量が重ためなので，使う場面はかなり限られるが，知っておくと便利だと思った．
実装 このアルゴリズムは，動的計画法を用いて最短距離を計算するというアイデアに基づいており，実装がとても簡単． 二次元配列を用いた例がこちら．
public static void main(final String[] args) { final int[][] graph = new int[n][n]; // 初めに無限大の値で各要素を初期化  for (int i = 0; i &amp;lt; graph.length; i++) { Arrays.fill(graph[i], Integer.MAX_VALUE / 2); // Integer.MAX_VALUEでないことに注意  graph[i][i] = 0; } // グラフの各辺を与えられた値に変更  // ここからワーシャルフロイド  for (int k = 0; k &amp;lt; graph.length; k++) { // 中継する点  for (int i = 0; i &amp;lt; graph.</description>
    </item>
    
    <item>
      <title>ABC156の解説</title>
      <link>https://t45k.github.io/kyopuro/abc156/</link>
      <pubDate>Sat, 22 Feb 2020 22:17:59 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc156/</guid>
      <description>4完．解答
A問題 算数
B問題 nが0になるまでkで割り続ける
C問題 座標は100までなので，1~100までの座標についてそれぞれ距離の総和を全探索する．
D問題 組み合わせの問題．
組み合わせの総和(nCkのkを1からnまで時の和)からaとbそれぞれの組み合わせ時の場合の数(nCaとnCb)を引く． 組み合わせの総和は2^n - 1になる． a，bの組み合わせ計算の際には，modを考慮する必要があるため，フェルマーの小定理などを利用すると良い(modInvなどでググると出てくる)．
modInvのJava実装の例</description>
    </item>
    
    <item>
      <title>ABC155の解説</title>
      <link>https://t45k.github.io/kyopuro/abc155/</link>
      <pubDate>Sun, 16 Feb 2020 22:48:43 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc155/</guid>
      <description>無念の三冠． D以降は後日追加するかも．
A問題 重複を調べる問題．
愚直に比較しても良いけど，Setを使うのが早そう．
JavaだとIntStreamからの各値にmapしてdistinctするとちょっとかっこいいかも．
B問題 fizzbuzzみたいな問題．
これもIntStreamからのfilterでallMatchすると多少カッコよく書ける．
C問題 連想配列を使って数え上げる典型的な問題．
StringのListのソート方法をド忘れして時間を無駄に使ってしまった(正しくはCollections.sort())． C#だと文字列ソートが遅いらしく発狂している人がちらほらいた．
E問題 貪欲にやってもできそうな気がするけど，editorial見て正攻法で解答．
いわゆる桁dpの問題(多分)． 今回は，その桁をちょうど払う状態(以降，just)と1多く払う状態(以降，extra)に分けて考える． 言い換えると，extraは繰り下がりを考慮した状態といえる．
上の桁から考えていくと，状態遷移は以下のようになる．
 その桁のjust = (前の桁のjust + その桁の数字) か (前の桁のextra + (10 - その桁の数字)) の小さい方 その桁のextra = (前の桁のjust + その桁の数字 + 1) か (前の桁のextra + (9 - その桁の数字)) の小さい方  これを解いていくと答えになる．
ちなみに，最後の桁は必ずjustとなること，また，最初の桁の前についてもjustとextraを考慮する(99を100で払ったり)ことに注意．
コード</description>
    </item>
    
    <item>
      <title>ABC154の解説</title>
      <link>https://t45k.github.io/kyopuro/abc154/</link>
      <pubDate>Sun, 09 Feb 2020 22:40:15 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc154/</guid>
      <description>A~Dまで
A問題 Uで分岐
B問題 入力の文字列の長さの回数&amp;rsquo;x&#39;を出力
C問題 連想配列を使って数字が出現したかを確認
D問題 毎回期待値計算をすると遅いので，1000(&amp;gt;= pi)までの累積和を計算しておく． あとは連続したkの要素の期待値の合計をそれぞれ求めるだけ．</description>
    </item>
    
    <item>
      <title>ICSE2020の面白そうな論文をピックアップしてみた</title>
      <link>https://t45k.github.io/blog/icse2020_abst/</link>
      <pubDate>Sat, 01 Feb 2020 18:59:35 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/icse2020_abst/</guid>
      <description>ICSEはInternational Conference of Software Engineeringの略です． ソフトウェア工学の国際学会の中で一番ランクが高い会議です． 会議自体は5月に行われるのですが，再録された論文一覧とアブストが公開されているので， 面白そうな論文をピックアップしてみました．
Is Rust Used Safely by Software Developers? RustはC，C++に取って代わることを目指した，メモリ安全性や実行速度を売りにしているプログラミング言語です． その特徴から，ソフトウェア開発界隈からの注目度が高まりつつあります．
この論文では，メモリ安全性を放棄する代わりにパフォーマンスを上げる Unsafe Rust についての調査を行っています．
Securing UnSafe Rust Programs with XRust これもRustの論文です．
XRustという，Unsafe Rustを通常のRustに移行する手法を提案しています．
ICSEに(Unsafe)Rustに関する論文が2本採択されていることから，ソフトウェア開発におけるRustの盛り上がり具合が分かります．
Big Code != Big Vocabulary: Open-Vocabulary Models for Source code キャッチーなタイトルだったのでピックアップしてみました．
変数名などのユーザー定義の識別子があるため，ソースコードは自然言語に比べて，大規模になるとコーパスが巨大になってしまいます． この論文では，コーパスがスケールするように，新しい言語モデルを提案しています．
DLFix: Context-based Code Transformation Learning for Automated Program Repair 最近のソフトウェア工学の大きなトピックの一つであるAPRの論文．
機械学習ベースのAPRは過去のバグ修正の学習に制限があるのに対して，DLFixでは学習のレイヤを2層に分けることでうまくこの制限を回避したらしいです．
A Cost-efficient Approach to Building in Continuous Integration CIの論文．
CIのコストはビルドを回している時間だけかかってしまい，かつ，CIの目的はバグを発見することなので， 多くのバグを発見するビルドをなるべく早い段階で回す手法を提案しています．
Here We Go Again: Why Is It Difficult for Developers to Learn Another Programming Language?</description>
    </item>
    
    <item>
      <title>ABC153の解説</title>
      <link>https://t45k.github.io/kyopuro/abc153/</link>
      <pubDate>Sun, 26 Jan 2020 22:32:42 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc153/</guid>
      <description>けもフレチックでした．
A~Eまで
A問題 (H + A - 1) / A するだけ
B問題 必殺技の総和をとって大小比較
C問題 体力が高い順にモンスターに必殺技を使い，残ったモンスターには通常攻撃
D問題 等比数列の和
E問題 DP
ソースコード
https://github.com/T45K/kyopuro/tree/master/ABC153</description>
    </item>
    
    <item>
      <title>研究室のパソコンがmacbook proになった話</title>
      <link>https://t45k.github.io/blog/mbp/</link>
      <pubDate>Tue, 21 Jan 2020 18:11:41 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/mbp/</guid>
      <description>組織特有の，年末に予算を使い切る目的で，新しいmacbook proを貸してもらえることになった． モデルはMid2019の13インチモデル． 研究室内で大した業績を上げていない自分にしてはとても良いものを貸してもらえたと思う．
以下，使ってみた感想
良いとこ  速い  今まで2015年モデルのmacbook airを借りていた． mbpと比べるとマシンパワーが段違いであり，作業にかかる時間が大幅に短縮された．
 画面が綺麗  マジで全然違う． 4年でここまで変わるのかって感じ．
良くないとこ  日本語入力がもっさりしてる  mbaでは起きていなかった現象． 英語入力から日本語入力に変更した直後が，なぜか入力してから画面に表示されるまで0.5秒くらいかかる． ググったら結構記事がヒットしたので，何かしらの解決法はあると思う．
 キーボードがヤバイ  使う前からバタフライキーボードがやばいことは理解していたが，使ってみるとやっぱりやばかった． 普段RealForceや青軸のゲーミングキーボード等のしっかりと押し込むタイプのキーボードを使っているので違和感が凄い．
多分ボタンの押し方にコツが必要なのだと感じた． バタフライキーボードは指先で押すと指先を痛めやすい（インターンでmbpを借りていたときはマジで一日の終わりは指先が痛かった）ので，指の腹で押すのが大事だと思う． 今でも&amp;rsquo;return&#39;を押す右小指が痛くなってきた． 普段からmbpを使っている友達曰く，なぞるように押すのが良いらしいので慣れるしかないかなぁって気持ち．
また，バタフライキーボードは薄さにわりに押す際に力が必要なので，小指などで押す&amp;rsquo;A&#39;や&amp;rsquo;P&#39;などが押せてないことが頻発した．
エスケープが使いづらいのも地味に辛い．
まとめ 研究室ではRealForceに接続して使うのでバタフライキーボードはまだマシだと思う．</description>
    </item>
    
    <item>
      <title>ABC152の解説</title>
      <link>https://t45k.github.io/kyopuro/abc152/</link>
      <pubDate>Mon, 20 Jan 2020 00:27:48 +0900</pubDate>
      
      <guid>https://t45k.github.io/kyopuro/abc152/</guid>
      <description>A~E問題まで．
A問題 if文で分岐するだけ
B問題 辞書順なので，どれだけ長くても答えは必ず2数の小さい方の値で構成される． 2数の大きい方の値の回数だけ，小さい方の値を出力する．
C問題 数字を順番に見て行った時に，今見ている数字が今まで見てきた中で最小の値以下であればカウントして，最小の値を更新．
D問題 与えられた数の範囲内で，数字の先頭と末尾だけを見た際に同じ数を数え上げていく． 例えば334は34，398は38という感じ． あとは組み合わせの数同士(例えば34なら43と，38なら83と)を掛け合わせるだけ．
E問題 modの逆元を知らないと厳しい問題．参考
この手の問題はユークリッドの互除法でGCDを求めてからLCMを求めるパターンがよくあるが，今回はオーバーフローの可能性があるため，素因数分解してからmod付きLCMを求める． LCMがmod計算してあるので，単純に各値で割るのではなく，modの逆元を計算した上で各値をLCMにかける必要がある．
ソースコード
https://github.com/T45K/kyopuro/tree/master/ABC152</description>
    </item>
    
    <item>
      <title>自己紹介</title>
      <link>https://t45k.github.io/about/</link>
      <pubDate>Tue, 14 Jan 2020 22:32:06 +0900</pubDate>
      
      <guid>https://t45k.github.io/about/</guid>
      <description>こんにちは 中川 将（なかがわ たすく）です． 現在大阪大学大学院の修士一回生です．
好き  Java，Kotlin，IntelliJ バイク  Kawasaki Ninja250SLに乗ってます   剣道  高校，大学と剣道部でした 三段   競プロ  AtCoder緑   音楽  聴く方 DJ Technorch，aran，岸田教団，etc.   Party Parrot  嫌い  javascript 研究  呟き .box{ overflow:auto; width:500px; height:1000px; padding:1px; color:#000000; background-color:#000000; line-height:1.5em; }     </description>
    </item>
    
    <item>
      <title>APSEC2019に参加した話</title>
      <link>https://t45k.github.io/blog/apsec/</link>
      <pubDate>Thu, 05 Dec 2019 20:19:32 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/apsec/</guid>
      <description>マレーシアで開催された12/3~5に開催されたAPSECに参加してきました．
APSECとは Asia-Pacific Software Engineering Conferenceの略です． 要するにソフトウェア工学の国際会議です． 会議ランクについては詳しくは知らないのですがそこまで高くないと思います． 投稿前に先生が，「APSECは塩漬けのネタを投稿するのにちょうど良い」と語っていたのが印象的でした．
マレーシアとは こんな国です．
マレーシア
+ 物価が安い
+ 時差が1時間
+ 英語が通じる
+- 暑い
- 酒を飲める場所がかなり限られる
- 用を足した後に紙を使わない文化
&amp;mdash; task (@getupmax) December 6, 2019  感想 投稿前はあまり気乗りしなかったし，正直通るとも思ってませんでしたが，結果的には国際学会で発表できて良かったなと感じました． 質疑対応がかなりグダッてしまったので英語力（特にリスニング）を鍛えるのが重要だと思いました．</description>
    </item>
    
    <item>
      <title>LINE DEVELOPER DAY2019に参加した話</title>
      <link>https://t45k.github.io/blog/devday/</link>
      <pubDate>Thu, 21 Nov 2019 20:16:05 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/devday/</guid>
      <description>11/20，21に開催されたLINE DEV DAYに参加してきました．
  DEV DAYとは LINEが開催している社内の技術などを公開するエンジニア向けのイベントです． 今年は二日に分けて開催し，エンジニアだけでなくデザインやプロダクト的な話も盛り込んだそうです．
参加したきっかけ LINEのインターンに参加した時のメンターさんがLINE SDKのリードテックになられたらしく，DEV DAYでの登壇の際にインターン中に作ったプロダクトを紹介するかもみたいな話を小耳に挟んだのがきっかけです． また，LINEは学生向けに金銭的援助を行っており，インターン生は（交通費として）無条件で3万円もらえるというのも結構魅力的でした．
感想 20日は違う会社の採用面接に参加していたため，21日だけ参加しました． 思ったより規模が大きく，たくさんの人が参加していたのが印象的でした． 感想ですが，実は当日頭痛が酷く，話を聞く余裕がなかったというのが正直なところです． 例のメンターさんの発表で，唐突にライブコーディングが始まったのだけはっきり覚えています． また，国際学会前というのもあり，慌ただしく帰ることになってしまいました．
今年はゆっくり聞く時間がなかったので，来年機会があればもう少し余裕を持って参加したいなと感じました．</description>
    </item>
    
    <item>
      <title>インターン総括</title>
      <link>https://t45k.github.io/blog/intern/</link>
      <pubDate>Sat, 14 Sep 2019 18:26:04 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/intern/</guid>
      <description>2019年，M1の夏休みに行ってきたインターンの所感を書きます．
参加したインターン  AWS LINE KYOTO 楽天  参加しなかったインターン  NTT DATA  参加できなかったインターン  NSSOL cookpad  インターン全体の所感   意識高い学生が多い
 学部の時は普段からゴリゴリ開発してるような友人はあまりいなかったため，意識の高い学生がこんなにもいることに驚きました 彼らと就活で戦うことを考えるとすでに辛い    結構B3，B4で参加してる人も多い
 意識高い 当時の僕はインターンなんて考えたことなかったので    実力も高い
 AtCoder青とかがゴロゴロいる    また，自分のスキルアップ（特にweb周りの知識）に繋がったのでよかったです．
反省点としては，フロントなどの今までの自分が全くやったことがないような分野に挑戦することがなかったことが挙げられます． 自分の知らない分野を一から勉強した上できちんとしたものを作ることを，期限が短いインターン中にやり切るのは難易度が高いと感じました． こういうことは普段から興味を持って勉強した方が良いのだと考えさせられました．</description>
    </item>
    
    <item>
      <title>楽天のインターンに参加した話</title>
      <link>https://t45k.github.io/blog/rakuten/</link>
      <pubDate>Fri, 13 Sep 2019 18:21:32 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/rakuten/</guid>
      <description>9/9~13の間，大阪で開催された楽天様のインターンに参加してきました． 写真はインターン中に頂いた無料朝食です．
楽天とは 説明不要だと思います． 日本発のメガベンチャーで，ECの楽天市場などが有名です． 会社としては，外国人を積極的に採用しており，社内公用語が英語であることが特徴です．
選考フロー 選考は面接だけでした． 面接の内容もそこまで突っ込んだ話はしなかったです． 面接官の社員さんと趣味が合い，ずっとバイクの話をしていました．
面接に通過した後，Springを使うための簡単な事前課題が出されました．
インターン 外国人向けサービスを作ってみようという題目でハッカソンを行いました． 学生4人 + メンターの社員さん2名で開発を行っていくという方式でした． 今までメンターの社員さんは困ったり質問があったら訊きにいく程度の存在だったので，ここまでがっつり開発に参加してくれるのは新鮮でした． 他のインターンでは作るものが指定されていたので，アイデアソンから始めるというのは初めての出来事でした（余談ですが，アイデアが他の班と完全に被っていました）．
開発を始めたのは2日目の朝からでしたが，班のメンバーにはgitを使ったことなかったり，Javaを書いたりしたことがない人もいたため，午前中はそこら辺の知識の共有から始めました（これのおかげで，その後スムーズに開発することができました）． 仕様などを決める際にも，社員さんと相談しながら決めました． AWSの時はまったく理解できなくて着いていけなくなった経験から，分からないことは質問して理解してから先に進むようにしました． 開発自体はスムーズに進み，プロダクト自体も個人的には満足いくものが作れました． 技術的な面では，空いている時間でCIやDockerなどのモダンな技術を導入できました． しかしプレゼンがグダリすぎてしまい，コンペでは最下位という結果でした． プロダクト自体には満足していたので，結構悔しかったです． ただ開発は楽しかったし，会社としての楽天も食堂が無料など良い点が多くインターンには非常に満足しました．
追記 インターン中のパフォーマンスが評価されて，M1の10月ごろに採用面接をしていただけました． 合計3回の面接を経て，内定を頂けました．</description>
    </item>
    
    <item>
      <title>LINE KYOTOのインターンに参加した話</title>
      <link>https://t45k.github.io/blog/line/</link>
      <pubDate>Fri, 30 Aug 2019 18:13:39 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/line/</guid>
      <description>8/26~30の間，京都で開催されたLINE KYOTOのインターンに参加してきました．
LINE KYOTOとは LINEが何なのかは説明不要だと思うので割愛します． LINE KYOTOは開発部しか持っていない，純粋な開発拠点であることが特徴の一つです． また，京都という土地柄，外国人が多く所属しているのも特徴です（社員さんの半分以上が外国籍の方でした）．
選考フロー 選考は技術試験と面接です． 技術試験はいわゆるプロコンみたいな問題で，普段から勉強しておくと多少有利かもしれません． 面接は，今まで自分がやってきたことを5枚程度のスライドにまとめて，その内容も踏まえて面接を行うというものでした． 僕はこれまで大規模な開発などを経験したことがなかったので，これまでやってきた研究について話しました． 結構倍率は高いようでしたが何とか通りました．
インターン LINEが開発しているLIFF SDKを用いて，LINE上で動くサービスを開発してみようという内容でハッカソンを行いました． 3人で一つの班を組み，4つのテーマから1つ選択するという形式で，僕たちの班はUNOを選択しました． 僕達が参加した一週間前にも同じインターンがあり，その時UNOを選択した班は結局完成しなかったと散々脅されましたが，結果的に4班中3班がUNOを選択していました．
僕達の班はフロントの描画担当の子がKotlinで書くということなので，フロントからサーバまですべてKotlinで書くことにしました． 僕は楽天のインターンの事前課題でSpringを触っていたのでサーバを書くことにしました． また，3人班のもう一人の子が超絶優秀で，最初に仕様とDB設計を行い，サーバとフロントの手伝いをしつつ，サーバとフロントと外部APIを繋げてちゃんと動くようにするという一番難しい部分を担ってくれたおかげで，僕たちの班はちゃんと動くものを作ることができました． 結果的に他の2班は完成させることができず，とても達成感と満足感を得ることができました．
社員さん達もそれぞれの分野に精通した人が揃っていて，問題が発生してもすぐに解決できることが多かったです． 残業禁止で定時には全員帰られるというのもとても魅力的でした．
インターン中の様子は以下の以下のLINE公式ブログにも取り上げられています． https://engineering.linecorp.com/ja/blog/kyoto-intern2019/
追記 せっかくインターンに参加したので，本選考も受けることにしました． 本選考は技術テストが1回，技術面接が1回，最終面接でした． 最終面接にて無事不採用となりました．</description>
    </item>
    
    <item>
      <title>AWSのインターンに参加した話</title>
      <link>https://t45k.github.io/blog/aws/</link>
      <pubDate>Tue, 20 Aug 2019 18:07:41 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/aws/</guid>
      <description>8/19~13の間，東京で開催されたAmazon Web Serviceのインターンに参加してきました．
AWSとは AWSとは，Amazon Web Serviceの略です． AWSはAmazonのクラウド事業を担当している会社です． Amazonのマーケットプレイスを筆頭に，様々な会社がAWSのクラウドを利用しています（クラウド事業ではシェア1位です）． 今，世界で最も勢いのあるIT会社の一つだと言えます．
選考フロー HP上には技術試験 + 面接と書いてあったのですが，なぜか面接が行われませんでした． 技術試験では実際にEC2インスタンスが与えられ，そこの上でAPIサーバを立てるという内容でした． 今までサーバ開発をしたことがなかったので，簡単にサーバが書けると噂のPHPを急いで勉強して何とか提出にこぎつけました． 問題的には明らかにDBを使わせようとしていましたが，そこまで手が回らなかったのでjsonファイルを読み書きするという手段をとりました． 結果的に通ったので良かったです．
インターン 実際に存在するサービスを模倣してアーキテクチャを設計するという題目で，5日間グループワークを行いました． 仕事内容的には魅力的だったのですが，いかんせん僕にネットワークの知識がなさすぎて2日目くらいから早くも着いていけなくなりました． 東京まで来て何してるんだろうって結構辛い気持ちになりました． ただしっかり勉強した上で望めば本当に楽しいのだろうなと感じました．
追記 このインターンは採用直結型だったので，インターン後そのまま本選考に応募しました． 技術試験，技術面接，最終面接を経て，12/24に無事不採用となりました．</description>
    </item>
    
    <item>
      <title>cookpadのインターンに参加できなかった話</title>
      <link>https://t45k.github.io/blog/cookpad/</link>
      <pubDate>Thu, 01 Aug 2019 18:32:27 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/cookpad/</guid>
      <description>cookpadのインターンに参加できませんでした．
cookpadとは 料理のレシピを提供するサービスで有名な会社です． あまり知られていないのですが（僕が知らなかっただけかもしれませんが），ITに力を入れており，技術力があるエンジニアが多く所属しています．
選考フロー 技術試験 + 面接です．
技術試験はプロコンのようにテストケースが用意されているわけではなく，仕様のみが与えられてそれに一致するようなコードを書くという問題でした． 仕様を満たすようにコードは書いたつもりでしたが落ちてしまいました．
原因として考えられるのが，問題中APIを叩く部分があって，通常であれば言語仕様に則ってPOSTなどをすると思うのですが，当時はAPIって何?って状態だったので，直接コマンドからcurlを呼び出すように書きました． その辺から技術不足が見抜かれたのかなぁって感じです．
結構悔しかったです．</description>
    </item>
    
    <item>
      <title>NSSOLのインターンに参加できなかった話</title>
      <link>https://t45k.github.io/blog/nssol/</link>
      <pubDate>Thu, 01 Aug 2019 18:32:21 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/nssol/</guid>
      <description>NSSOL様のインターンに参加できませんでした．
NSSOLに行った研究室の先輩方は多く，結構興味を持っていました． 東京までの旅費や宿泊費を出してくれる上に，毎日飲み会があると聞いていたので参加できることを楽しみにしていました．
NSSOLとは 日本製鐵のシステム部門が独立してできた会社です． 母体が大きな会社であり，NSSOLも国内のSIerの中ではそれなりに大きく有名な会社です．
選考フロー ES + SPI + 面接でした．
SPIはテストセンターまで受けに行かなければならず面倒でした． 面接は顔合わせ程度のものだと聞いていたのでここで落とされるとは思っていませんでした． ただ面接自体は，普段からやっていて癖になっている自虐が多く出てしまい落ちることも納得でした． こういうジャパニーズトラディショナルカンパニーには面接でありのままの自分を見せるよりも多少は偽った方が良いのかなと思いました．</description>
    </item>
    
    <item>
      <title>NTT DATAのインターンに参加しなかった話</title>
      <link>https://t45k.github.io/blog/ntt/</link>
      <pubDate>Thu, 01 Aug 2019 18:32:15 +0900</pubDate>
      
      <guid>https://t45k.github.io/blog/ntt/</guid>
      <description>NTT DATAのインターンに参加しませんでした．
NTT DATAとは 国内情報系最大手のNTTのSI部門会社です． やはり最大手らしく，日本全国から有能な人材が集まることで有名です．
選考フロー ES + SPI + 動画提出でした．
テストセンターに行かなくても自分のパソコン上でSPIを受けれたのが個人的に楽でした． 動画はインターンに対する意気込みを語れとのことでした． これで採用か不採用かが決まるのも変な気がしましたが，とりあえずほぼ一発どりで提出したら通ってびっくりました．
このインターンに参加すると合計4週間インターンに行くことになってしまうので辞退しました．</description>
    </item>
    
  </channel>
</rss>