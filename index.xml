<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>T45K</title>
    <link>https://t45k.github.io/</link>
    <description>Recent content on T45K</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 02 Nov 2024 16:51:20 +0900</lastBuildDate>
    <atom:link href="https://t45k.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「ソフトウェア開発現場の「失敗」集めてみた」読了</title>
      <link>https://t45k.github.io/blog/collect_failures_in_software_development/</link>
      <pubDate>Sat, 02 Nov 2024 16:51:20 +0900</pubDate>
      <guid>https://t45k.github.io/blog/collect_failures_in_software_development/</guid>
      <description>&lt;p&gt;「ソフトウェア開発現場の「失敗」集めてみた」を読んだ。&lt;/p&gt;&#xA;&lt;table border=&#34;0&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div style=&#34;border:1px solid #95a5a6;border-radius:.75rem;background-color:#FFFFFF;width:504px;margin:0px;padding:5px;text-align:center;overflow:hidden;&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td style=&#34;width:240px&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17852417%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;img src=&#34;https://hbb.afl.rakuten.co.jp/hgb/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?me_id=1213310&amp;item_id=21248375&amp;pc=https%3A%2F%2Fthumbnail.image.rakuten.co.jp%2F%400_mall%2Fbook%2Fcabinet%2F5187%2F9784798185187_1_138.jpg%3F_ex%3D240x240&amp;s=240x240&amp;t=picttext&#34; border=&#34;0&#34; style=&#34;margin:2px&#34; alt=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34; title=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34;&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style=&#34;vertical-align:top;width:248px;display: block;&#34;&gt;&lt;p style=&#34;font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px;word-wrap:break-word&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17852417%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;ソフトウェア開発現場の「失敗」集めてみた。 42の失敗事例で学ぶチーム開発のうまい進めかた [ 出石 聡史 ]&lt;/a&gt;&lt;br&gt;&lt;span &gt;価格：2,420円（税込、送料無料)&lt;/span&gt; &lt;span style=&#34;color:#BBB&#34;&gt;(2024/11/2時点)&lt;/span&gt;&lt;/p&gt;&lt;div style=&#34;margin:10px;&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17852417%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;img src=&#34;https://static.affiliate.rakuten.co.jp/makelink/rl.svg&#34; style=&#34;float:left;max-height:27px;width:auto;margin-top:0&#34; &gt;&lt;/a&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17852417%2F%3Fscid%3Daf_pc_bbtn&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ==&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;div style=&#34;float:right;width:41%;height:27px;background-color:#bf0000;color:#fff!important;font-size:12px;font-weight:500;line-height:27px;margin-left:1px;padding: 0 12px;border-radius:16px;cursor:pointer;text-align:center;&#34;&gt; 楽天で購入 &lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;br&gt;&lt;p style=&#34;color:#000000;font-size:12px;line-height:1.4em;margin:5px;word-wrap:break-word&#34;&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;p&gt;キャッチーなタイトルに惹かれて購入したが、&#xA;中身は上流からリリース後までのよくある失敗を紹介している、&#xA;割としっかりした内容だった。&lt;/p&gt;&#xA;&lt;p&gt;普段は「設計・実装」をやっているので、それ以前の企画や、品質保証、リリース後対応などは&#xA;「そんなことがあるのか&amp;hellip;」と驚きに満ちていた。&lt;/p&gt;&#xA;&lt;p&gt;また、一貫して「リリース日に間に合わせるためスコープを削る・バグの優先度を下げる」について言及されており、&#xA;これまでは全部やる・全て直すというスタンスに立つことが多かったため、参考になった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSTRに参加した話</title>
      <link>https://t45k.github.io/blog/sstr_2024/</link>
      <pubDate>Mon, 14 Oct 2024 21:25:31 +0900</pubDate>
      <guid>https://t45k.github.io/blog/sstr_2024/</guid>
      <description>&lt;p&gt;2024年の&lt;a href=&#34;https://sstr.jp/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSTR&lt;/a&gt;に参加しました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;sstrとは&#34;&gt;&#xA;  SSTRとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#sstr%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;SSTRはサンライズ・サンセット・ツーリング・ラリーの略称です。&lt;/p&gt;&#xA;&lt;p&gt;特定の日の日の出を太平洋側で見て、同じ日の日没を日本海側で見るというイベントです。&lt;/p&gt;&#xA;&lt;p&gt;レギュレーション上は、日の出を日本海側とは反対側の任意の海岸で見て、&#xA;運営が指定した場所（PA・SAや道の駅など）をいくつか経由しつつ、&#xA;日没までに石川県の千里浜海岸に到着すればOKです。&lt;/p&gt;&#xA;&lt;p&gt;今年は、年初の能登半島地震を受けて、能登の復興をテーマを掲げていました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ルート&#34;&gt;&#xA;  ルート&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%ab%e3%83%bc%e3%83%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;会社の同僚3人と参加しました。&lt;/p&gt;&#xA;&lt;p&gt;大阪湾の夢洲出発で、高速で石川まで向かい、&#xA;そこから下道で道の駅をいくつか回りながら千里浜を向かうルートを取りました。&lt;/p&gt;&#xA;&lt;p&gt;最終的に、以下の7箇所を経由しました&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;多賀SA&lt;/li&gt;&#xA;&lt;li&gt;尼御前SA&lt;/li&gt;&#xA;&lt;li&gt;道の駅 めぐみ白山&lt;/li&gt;&#xA;&lt;li&gt;道の駅 内灘サンセットパーク&lt;/li&gt;&#xA;&lt;li&gt;道の駅 織姫の里 なかのと&lt;/li&gt;&#xA;&lt;li&gt;道の駅 能登食祭市場&lt;/li&gt;&#xA;&lt;li&gt;道の駅 のとじま&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;出発の様子&#34;&gt;&#xA;  出発の様子&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%87%ba%e7%99%ba%e3%81%ae%e6%a7%98%e5%ad%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/sstr/start.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;朝6時集合なのでとても眠かったです。&lt;/p&gt;&#xA;&lt;h3 id=&#34;道中&#34;&gt;&#xA;  道中&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%81%93%e4%b8%ad&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;天気がとても良かったです。&lt;/p&gt;&#xA;&lt;p&gt;昼までは高速を使っていたので、快適に移動できました。&lt;/p&gt;&#xA;&lt;p&gt;石川県では下道でしたが、特に混雑していることもなかったです。&lt;/p&gt;&#xA;&lt;p&gt;全ての道の駅を回った後は高速で千里浜に向かったのですが、とても眠かったです。&lt;/p&gt;&#xA;&lt;h3 id=&#34;到着の様子&#34;&gt;&#xA;  到着の様子&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%88%b0%e7%9d%80%e3%81%ae%e6%a7%98%e5%ad%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/sstr/finish.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;その日の参加者は2,000台ほどだったのですが、千里浜に大集合していると流石に壮観でした。&lt;/p&gt;&#xA;&lt;p&gt;たくさんのライダーと同じ感動を分かち合えたと思うと、胸が熱くなりました。&lt;/p&gt;&#xA;&lt;p&gt;宿は小松にとっていたのですが、SSTR帰りと思われる大量のバイクが止まっていました。&lt;/p&gt;&#xA;&lt;p&gt;飲み会では、それぞれのツーリングの話が聞けて楽しかったです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;来年の目標&#34;&gt;&#xA;  来年の目標&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9d%a5%e5%b9%b4%e3%81%ae%e7%9b%ae%e6%a8%99&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;来年も参加しようと思います。&lt;/p&gt;&#xA;&lt;p&gt;来年の目標としては、&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;日の出を見られる、太平洋側から出発する&lt;/li&gt;&#xA;&lt;li&gt;ルート作成を同僚に任せっきりだったので、自分でも調べる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;をやっていきたいです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「単体テストの考え方/使い方」読了</title>
      <link>https://t45k.github.io/blog/unit_testing_principles_practices_and_patterns/</link>
      <pubDate>Tue, 06 Aug 2024 22:44:20 +0900</pubDate>
      <guid>https://t45k.github.io/blog/unit_testing_principles_practices_and_patterns/</guid>
      <description>&lt;p&gt;単体テストの考え方/使い方を読んだのでその感想。&lt;/p&gt;&#xA;&lt;table border=&#34;0&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div style=&#34;border:1px solid #95a5a6;border-radius:.75rem;background-color:#FFFFFF;width:504px;margin:0px;padding:5px;text-align:center;overflow:hidden;&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td style=&#34;width:240px&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17341285%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;img src=&#34;https://hbb.afl.rakuten.co.jp/hgb/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?me_id=1213310&amp;item_id=20818219&amp;pc=https%3A%2F%2Fthumbnail.image.rakuten.co.jp%2F%400_mall%2Fbook%2Fcabinet%2F1723%2F9784839981723_1_5.jpg%3F_ex%3D240x240&amp;s=240x240&amp;t=picttext&#34; border=&#34;0&#34; style=&#34;margin:2px&#34; alt=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34; title=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34;&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style=&#34;vertical-align:top;width:248px;display: block;&#34;&gt;&lt;p style=&#34;font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px;word-wrap:break-word&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17341285%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;単体テストの考え方/使い方 プロジェクトの持続可能な成長を実現するための戦略 [ Vladimir Khorikov ]&lt;/a&gt;&lt;br&gt;&lt;span &gt;価格：4,488円（税込、送料無料)&lt;/span&gt; &lt;span style=&#34;color:#BBB&#34;&gt;(2024/8/6時点)&lt;/span&gt;&lt;/p&gt;&lt;div style=&#34;margin:10px;&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17341285%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;img src=&#34;https://static.affiliate.rakuten.co.jp/makelink/rl.svg&#34; style=&#34;float:left;max-height:27px;width:auto;margin-top:0&#34; &gt;&lt;/a&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17341285%2F%3Fscid%3Daf_pc_bbtn&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ==&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;div style=&#34;float:right;width:41%;height:27px;background-color:#bf0000;color:#fff!important;font-size:12px;font-weight:500;line-height:27px;margin-left:1px;padding: 0 12px;border-radius:16px;cursor:pointer;text-align:center;&#34;&gt; 楽天で購入 &lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;br&gt;&lt;p style=&#34;color:#000000;font-size:12px;line-height:1.4em;margin:5px;word-wrap:break-word&#34;&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;p&gt;単体テストを中心に扱った本を読んだのは初めてだったのですが、&#xA;単体テストを用いてプロダクションコードを価値あるものにすることについて終始述べられていて良かったです。&lt;/p&gt;&#xA;&lt;p&gt;単体テストは&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;実行時間が十分に短く&lt;/li&gt;&#xA;&lt;li&gt;かつ、テストの実行は隔離されている（=容易に並列実行できる）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;ものとして定義されています。&lt;/p&gt;&#xA;&lt;p&gt;単体テストの実行方式はよくロンドン学派と古典学派に分類され、&#xA;後者は積極的にモックを使う、くらいの説明に留められていることが多いのですが、&#xA;これに関しても十分な説明がありました。&lt;/p&gt;&#xA;&lt;p&gt;曰く、古典学派は単体の範囲をテストを実行するプロダクションコードの範囲と定め、&#xA;それ以外の部分はモックする、&#xA;ロンドン学派は単体の範囲をそれぞれのテストと定め、&#xA;DBといったテスト間で共有されうる依存に関してのみモックを使う、という定義をされていました。&lt;/p&gt;&#xA;&lt;p&gt;ロンドン学派は単体テストでDBを扱うものだと思っていたので、この定義は初めて知りました。&lt;/p&gt;&#xA;&lt;p&gt;また、テストしやすいアーキテクチャとして、&#xA;最初にクエリを行い、最後にコマンドを行う順番を推奨しており、&#xA;具体的に関数型アーキテクチャやヘキサゴナルアーキテクチャが紹介されていたのが良かったです。&lt;/p&gt;&#xA;&lt;p&gt;スタブとモックの違いや、スタブ（クエリ）は検証しない、モック（コマンド）はするなどの説明は腹落ちしました。&lt;/p&gt;&#xA;&lt;p&gt;本書では一貫して、&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;単体テストはリファクタリングに対する耐性を兼ね備えてなければならない&lt;/li&gt;&#xA;&lt;li&gt;そのために、単体テストは振る舞いをテストするべき&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;を柱にしていたので良かったなと思いました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「継続的デリバリーのソフトウェア工学」読了</title>
      <link>https://t45k.github.io/blog/modern_software_engineering/</link>
      <pubDate>Tue, 25 Jun 2024 21:16:17 +0900</pubDate>
      <guid>https://t45k.github.io/blog/modern_software_engineering/</guid>
      <description>&lt;p&gt;継続的デリバリーのソフトウェア工学（英題: Modern Software Engineering）を読んだ。&lt;/p&gt;&#xA;&lt;table border=&#34;0&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div style=&#34;border:1px solid #95a5a6;border-radius:.75rem;background-color:#FFFFFF;width:504px;margin:0px;padding:5px;text-align:center;overflow:hidden;&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td style=&#34;width:240px&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17370467%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;img src=&#34;https://hbb.afl.rakuten.co.jp/hgb/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?me_id=1213310&amp;item_id=20843481&amp;pc=https%3A%2F%2Fthumbnail.image.rakuten.co.jp%2F%400_mall%2Fbook%2Fcabinet%2F0367%2F9784296070367_1_3.jpg%3F_ex%3D240x240&amp;s=240x240&amp;t=picttext&#34; border=&#34;0&#34; style=&#34;margin:2px&#34; alt=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34; title=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34;&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style=&#34;vertical-align:top;width:248px;display: block;&#34;&gt;&lt;p style=&#34;font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px;word-wrap:break-word&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17370467%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;継続的デリバリーのソフトウェア工学　もっと早く、もっと良いソフトウェアを作るための秘訣 [ David Farley ]&lt;/a&gt;&lt;br&gt;&lt;span &gt;価格：3,190円（税込、送料無料)&lt;/span&gt; &lt;span style=&#34;color:#BBB&#34;&gt;(2024/6/25時点)&lt;/span&gt;&lt;/p&gt;&lt;div style=&#34;margin:10px;&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17370467%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;img src=&#34;https://static.affiliate.rakuten.co.jp/makelink/rl.svg&#34; style=&#34;float:left;max-height:27px;width:auto;margin-top:0&#34; &gt;&lt;/a&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17370467%2F%3Fscid%3Daf_pc_bbtn&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ==&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;div style=&#34;float:right;width:41%;height:27px;background-color:#bf0000;color:#fff!important;font-size:12px;font-weight:500;line-height:27px;margin-left:1px;padding: 0 12px;border-radius:16px;cursor:pointer;text-align:center;&#34;&gt; 楽天で購入 &lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;br&gt;&lt;p style=&#34;color:#000000;font-size:12px;line-height:1.4em;margin:5px;word-wrap:break-word&#34;&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;h2 id=&#34;ソフトウェア開発&#34;&gt;&#xA;  ソフトウェア開発&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%bd%e3%83%95%e3%83%88%e3%82%a6%e3%82%a7%e3%82%a2%e9%96%8b%e7%99%ba&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;本書ではソフトウェア開発の効果的かつ効率的な方法を探求していく。&lt;/p&gt;&#xA;&lt;p&gt;より良いソフトウェア開発を行うために、開発者は「学びのエキスパート」かつ&#xA;「複雑さ管理のエキスパート」になるべき、と述べている。&lt;/p&gt;&#xA;&lt;p&gt;学びのエキスパートになるためには、実験 → フィードバック → 実験 → &amp;hellip; のループを&#xA;高速で回すことが重要になる。&lt;/p&gt;&#xA;&lt;p&gt;複雑さ管理のエキスパートになるためには&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;モジュラー性&lt;/li&gt;&#xA;&lt;li&gt;抽象化&lt;/li&gt;&#xA;&lt;li&gt;疎結合&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;の実現が不可欠になる。&lt;/p&gt;&#xA;&lt;p&gt;そして、上記の要素を達成するために&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;テスト可能性&lt;/li&gt;&#xA;&lt;li&gt;デプロイ可能性&lt;/li&gt;&#xA;&lt;li&gt;スピード&lt;/li&gt;&#xA;&lt;li&gt;変数の管理&lt;/li&gt;&#xA;&lt;li&gt;継続的デリバリー&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;が重要になる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ソフトウェア工学&#34;&gt;&#xA;  ソフトウェア工学&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%bd%e3%83%95%e3%83%88%e3%82%a6%e3%82%a7%e3%82%a2%e5%b7%a5%e5%ad%a6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;本書では、ソフトウェア開発は工学的に行われるべきだと述べられている。&lt;/p&gt;&#xA;&lt;p&gt;これは、いわゆる工芸品のような、職人の一品物ではないということである。&lt;br&gt;&#xA;また、科学のように厳密性を追求するのではなく、&#xA;あくまで開発に役立つプラクティスを追い求めるべき、ということでもある。&lt;/p&gt;&#xA;&lt;p&gt;一方で、建築物のような製造工学に近い物ではなく、設計工学になるべきとも述べられている。&lt;/p&gt;&#xA;&lt;p&gt;ソフトウェア開発が製造工学と違う点は、ソフトウェア開発は繰り返し作り直すことが容易である点である。&lt;/p&gt;&#xA;&lt;p&gt;建築物は一度作ると作り直しが効かないため、事前の設計を念入りにやったうえで開発に入る。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kotlin Fest 2024に参加・登壇した話</title>
      <link>https://t45k.github.io/blog/kotlin_fest_2024/</link>
      <pubDate>Sun, 23 Jun 2024 22:54:46 +0900</pubDate>
      <guid>https://t45k.github.io/blog/kotlin_fest_2024/</guid>
      <description>&lt;p&gt;2024年6月22日に開催されたKotlin Fest 2024に参加・登壇してきました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;kotlin-fest&#34;&gt;&#xA;  Kotlin Fest&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#kotlin-fest&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.kotlinfest.dev/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.kotlinfest.dev/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Kotlin Festは「Kotlinを愛でる」をビジョンに開催されるカンファレンスです。&lt;br&gt;&#xA;今回は4回目の開催であり、5年ぶりのオフライン開催になりました。&lt;br&gt;&#xA;100以上のプロポーザルがあったことから、国内での注目度が伺えます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;登壇内容&#34;&gt;&#xA;  登壇内容&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%99%bb%e5%a3%87%e5%86%85%e5%ae%b9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;「withContextってスレッド切り替え以外にも使えるって知ってた？」というタイトルで登壇しました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://fortee.jp/kotlin-fest-2024/proposal/d3105065-ee4e-4a7b-be92-3aae10ab6c01&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://fortee.jp/kotlin-fest-2024/proposal/d3105065-ee4e-4a7b-be92-3aae10ab6c01&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;CoroutineContextとwithContextを活用することで、Kotlinでコンテキスト変数を扱う方法や、&#xA;実際の利用例について紹介しました。&lt;/p&gt;&#xA;&lt;p&gt;業務で思いつきでやったことが、こうやって登壇機会にまで結びついて良かったな、という感想です。&lt;/p&gt;&#xA;&lt;p&gt;「知らなかった」「勉強になった」などの感想をいただけ、励みになりました。&lt;/p&gt;&#xA;&lt;p&gt;一方で、自身の登壇の仕方には反省すべき点がいくつかあったなと思っています。&lt;/p&gt;&#xA;&lt;p&gt;一番はタイムマネージメントが全然できておらず、最終的に時間が足りなくなってしまったことです。&lt;/p&gt;&#xA;&lt;p&gt;次回このような機会があれば、資料作成を早めに終わらせ、発表練習に時間を割きたいです。&lt;/p&gt;&#xA;&lt;p&gt;スライドは&lt;a href=&#34;https://speakerdeck.com/t45k/withcontexttutesuretudoqie-riti-eyi-wai-nimoshi-erututezhi-tuteta&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;h2 id=&#34;セッション内容&#34;&gt;&#xA;  セッション内容&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%bb%e3%83%83%e3%82%b7%e3%83%a7%e3%83%b3%e5%86%85%e5%ae%b9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;今回様々なセッションを聴講しましたので、それぞれについて軽く感想を書きたいと思います。&lt;/p&gt;&#xA;&lt;h3 id=&#34;kotlinconf-2024-を後から256倍楽しむためのヒント&#34;&gt;&#xA;  KotlinConf 2024 を後から256倍楽しむためのヒント&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#kotlinconf-2024-%e3%82%92%e5%be%8c%e3%81%8b%e3%82%89256%e5%80%8d%e6%a5%bd%e3%81%97%e3%82%80%e3%81%9f%e3%82%81%e3%81%ae%e3%83%92%e3%83%b3%e3%83%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;JetBrainsの堀岡さんの招待セッションです。&lt;/p&gt;&#xA;&lt;p&gt;少し前に開催されたKotlin Confのサマリや、そもそもどうやって海外カンファレンスを楽しむか、&#xA;要約するかについて紹介していただきました。&lt;/p&gt;&#xA;&lt;p&gt;Kotlin Confはビデオが提供されていて、全ては見れていないのですが、&#xA;タイトル一覧を紹介していただき、中には興味深いものがあったので、&#xA;あとで確認しようと思いました。&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;Server-Side Kotlin Meetupもよろしくお願いします！ &lt;a href=&#34;https://twitter.com/hashtag/kotlinfest?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#kotlinfest&lt;/a&gt;&lt;/p&gt;&amp;mdash; task (@getupmax) &lt;a href=&#34;https://twitter.com/getupmax/status/1804336555613659642?ref_src=twsrc%5Etfw&#34;&gt;June 22, 2024&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;h3 id=&#34;kotlinで愉しむクリエイティブコーディング&#34;&gt;&#xA;  Kotlinで愉しむクリエイティブコーディング&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#kotlin%e3%81%a7%e6%84%89%e3%81%97%e3%82%80%e3%82%af%e3%83%aa%e3%82%a8%e3%82%a4%e3%83%86%e3%82%a3%e3%83%96%e3%82%b3%e3%83%bc%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;畠山さんのセッションです。&lt;/p&gt;&#xA;&lt;p&gt;クリエイティブコーディングについて何も知らなかったのですが、&#xA;コーディングで作曲や絵を描いたりする行為だそうです。&lt;/p&gt;&#xA;&lt;p&gt;今回は、Kotlinで書かれたOPENRNDRというライブラリを使ってのクリエイティブコーディングを&#xA;紹介いただけました。&lt;/p&gt;&#xA;&lt;p&gt;コードに書いた通りに、一定の規則を持って物体が移動することで面白い絵や動画が完成していき、&#xA;とても興味深かったです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「データモデリングでドメインを駆動する」読了</title>
      <link>https://t45k.github.io/blog/drive_domain_by_data_modeling/</link>
      <pubDate>Thu, 23 May 2024 00:48:17 +0900</pubDate>
      <guid>https://t45k.github.io/blog/drive_domain_by_data_modeling/</guid>
      <description>&lt;p&gt;杉本さん著の「データモデリングでドメインを駆動する」を読んだ。&lt;/p&gt;&#xA;&lt;p&gt;サブタイトルとして「基幹系システム」が含まれているが、&#xA;そもそも基幹系システムが何か分からない状態で読み始めたので、&#xA;そこからキャッチアップできて良かった。&lt;/p&gt;&#xA;&lt;p&gt;（基幹系システムは、本当にビジネスを回すための一点もの？のシステムなんだなぁという理解）&lt;/p&gt;&#xA;&lt;p&gt;他の技術書と違って、ビジネスそのものに突っ込んだ内容が多いのが面白かった。&lt;/p&gt;&#xA;&lt;p&gt;「残」の話や、そこを起点に非同期なシステム構築などは、CQRSに通じるところがあるかもと思いながら読んでた。&#xA;その他、SoAとSoMの話など。&lt;/p&gt;&#xA;&lt;p&gt;特定のドメインに着目して、ビジネス理解からそれを設計に繋げる方法までを書いた本は初めてだったので新鮮で良かった。&lt;/p&gt;&#xA;&lt;p&gt;（難しい部分は読み飛ばしたので浅い感想しか出て来ないのが残念）&lt;/p&gt;&#xA;&lt;table border=&#34;0&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div style=&#34;border:1px solid #95a5a6;border-radius:.75rem;background-color:#FFFFFF;width:504px;margin:0px;padding:5px;text-align:center;overflow:hidden;&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td style=&#34;width:240px&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17739280%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;img src=&#34;https://hbb.afl.rakuten.co.jp/hgb/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?me_id=1213310&amp;item_id=21152713&amp;pc=https%3A%2F%2Fthumbnail.image.rakuten.co.jp%2F%400_mall%2Fbook%2Fcabinet%2F0106%2F9784297140106_1_3.jpg%3F_ex%3D240x240&amp;s=240x240&amp;t=picttext&#34; border=&#34;0&#34; style=&#34;margin:2px&#34; alt=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34; title=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34;&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style=&#34;vertical-align:top;width:248px;display: block;&#34;&gt;&lt;p style=&#34;font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px;word-wrap:break-word&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17739280%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;データモデリングでドメインを駆動する──分散／疎結合な基幹系システムに向けて [ 杉本 啓 ]&lt;/a&gt;&lt;br&gt;&lt;span &gt;価格：3,740円（税込、送料無料)&lt;/span&gt; &lt;span style=&#34;color:#BBB&#34;&gt;(2024/5/23時点)&lt;/span&gt;&lt;/p&gt;&lt;div style=&#34;margin:10px;&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17739280%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;img src=&#34;https://static.affiliate.rakuten.co.jp/makelink/rl.svg&#34; style=&#34;float:left;max-height:27px;width:auto;margin-top:0&#34; &gt;&lt;/a&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17739280%2F%3Fscid%3Daf_pc_bbtn&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ==&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;div style=&#34;float:right;width:41%;height:27px;background-color:#bf0000;color:#fff!important;font-size:12px;font-weight:500;line-height:27px;margin-left:1px;padding: 0 12px;border-radius:16px;cursor:pointer;text-align:center;&#34;&gt; 楽天で購入 &lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;br&gt;&lt;p style=&#34;color:#000000;font-size:12px;line-height:1.4em;margin:5px;word-wrap:break-word&#34;&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</description>
    </item>
    <item>
      <title>ベトナムに出張に行った話</title>
      <link>https://t45k.github.io/blog/vietnam/</link>
      <pubDate>Sun, 28 Apr 2024 17:27:26 +0900</pubDate>
      <guid>https://t45k.github.io/blog/vietnam/</guid>
      <description>&lt;p&gt;現在勤めている会社のグループ会社がベトナムにあり、&#xA;10日ほど出張で行かせてもらったので、感想を書き留めておく。&lt;/p&gt;&#xA;&lt;h2 id=&#34;気候&#34;&gt;&#xA;  気候&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%b0%97%e5%80%99&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;4月の時点で30℃越えで暑かった。&#xA;今回行ったのが、ベトナム北部のハノイなので気温はまだマシ（冬場は10℃台になる）らしいが、&#xA;南部のホーチミンは常に暑いらしい。&lt;/p&gt;&#xA;&lt;p&gt;一方で常に曇り（もしくは大気汚染の影響）で、直射日光に当たることはあまりなかった。&lt;/p&gt;&#xA;&lt;h2 id=&#34;交通&#34;&gt;&#xA;  交通&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%ba%a4%e9%80%9a&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;公共交通機関があまり発達していないので、移動は主にGrab（東南アジアのUber）を利用した。&lt;/p&gt;&#xA;&lt;p&gt;噂に聞いていた通り、交通量、特にバイクの数がすごく多く、&#xA;さらに交通ルールを守らない（信号無視、逆走、歩行者通行中の走行）車両が多かったため、&#xA;普通に歩くのも一苦労だった。&lt;/p&gt;&#xA;&lt;p&gt;到着した時は「命がいくつあっても足りないな」と思った。&lt;/p&gt;&#xA;&lt;h2 id=&#34;食事&#34;&gt;&#xA;  食事&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%a3%9f%e4%ba%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;全体的にあっさりした味付けのものが多かったと思う。&lt;/p&gt;&#xA;&lt;p&gt;米食中心の食文化であり、特に米粉から作られた麺料理を多く食べた。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/vietnam/pho.jpg&#34;&#xA;    alt=&#34;言わずと知れたフォー&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;言わずと知れたフォー&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/vietnam/bun_cha.jpg&#34;&#xA;    alt=&#34;つけ麺のブンチャー&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;つけ麺のブンチャー&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/vietnam/bun_cha_like.jpg&#34;&#xA;    alt=&#34;ブンチャーに似た何か&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;ブンチャーに似た何か&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/vietnam/banh_mi.jpg&#34;&#xA;    alt=&#34;サンドイッチのバインミー&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;サンドイッチのバインミー&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/vietnam/kayu.jpg&#34;&#xA;    alt=&#34;謎のホルモン入りお粥&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;謎のホルモン入りお粥&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;どれも美味しい上に安い（50K VND ≒ 300円ほど）。&lt;/p&gt;&#xA;&lt;h3 id=&#34;酒&#34;&gt;&#xA;  酒&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%85%92&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;ビールも種類が多い上に安かった（1缶12K VND ≒ 70円ほど）&lt;/p&gt;&#xA;&lt;p&gt;味としては薄いものが多く、暑い日にごくごく飲むのが良さそうという感想だった。&lt;/p&gt;&#xA;&lt;p&gt;氷を入れて飲むことも多いのも特徴的だった。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/vietnam/bia_hoi_ha_noi.jpg&#34;&#xA;    alt=&#34;ローカルなレストランで飲めるビール。60円くらい。世界で一番安いらしい&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;ローカルなレストランで飲めるビール。60円くらい。世界で一番安いらしい&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;その他、ハウスワインを作っている人も多い。&lt;/p&gt;&#xA;&lt;p&gt;ハウスワインはワインの名を関しているがワインではなく、米焼酎に果物を漬け込んで作る、&#xA;梅酒などに近い飲み物。&lt;/p&gt;&#xA;&lt;h3 id=&#34;コーヒー&#34;&gt;&#xA;  コーヒー&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%b3%e3%83%bc%e3%83%92%e3%83%bc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;ベトナムでもコーヒー文化が根付いていて、食後に飲んでいる人が多かった印象。&lt;/p&gt;&#xA;&lt;p&gt;ベトナムのコーヒーは苦めなので、牛乳と砂糖が入った甘くて飲みやすいものが人気があった。&lt;/p&gt;&#xA;&lt;p&gt;また、エッグコーヒーというのもあり、こちらは新体験だった（本当に卵が入っている）。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/vietnam/egg_coffee.jpg&#34;&#xA;    alt=&#34;エッグコーヒー&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&lt;figcaption&gt;&#xA;      &lt;p&gt;エッグコーヒー&lt;/p&gt;&#xA;    &lt;/figcaption&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;人々&#34;&gt;&#xA;  人々&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%ba%ba%e3%80%85&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;観測範囲で&lt;/p&gt;</description>
    </item>
    <item>
      <title>佐賀までツーリングした話</title>
      <link>https://t45k.github.io/blog/saga_touring/</link>
      <pubDate>Sat, 23 Mar 2024 22:00:13 +0900</pubDate>
      <guid>https://t45k.github.io/blog/saga_touring/</guid>
      <description>&lt;p&gt;西日本編は&lt;a href=&#34;https://t45k.github.io/blog/tour_day1/&#34; &gt;こちら&lt;/a&gt;&lt;br&gt;&#xA;東日本編は&lt;a href=&#34;https://t45k.github.io/blog/east_japan_touring/&#34; &gt;こちら&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;3/20（水）が祝日だったので、月火で有給を取って佐賀までバイクで行って帰ってきた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一日目&#34;&gt;&#xA;  一日目&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%80%e6%97%a5%e7%9b%ae&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;3/17（日）&lt;/p&gt;&#xA;&lt;p&gt;ひとまず山口の湯田温泉に向かって出発&lt;/p&gt;&#xA;&lt;p&gt;岡山で途中下車し笠岡ラーメンを食べようとするも、お目当ての店は休みだったため、近所にあった「いではら」に行った。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/saga_touring/kasaoka_ramen.jpg&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;当初そのまま下道で海沿いを通って山口に向かう予定だったが、途中で雨が降ってきたため、予定を変更して高速で移動。&lt;/p&gt;&#xA;&lt;p&gt;宿泊は湯田温泉のホテルで。&lt;/p&gt;&#xA;&lt;p&gt;晩飯はいつものごとく近所のスーパーで買った地の魚を中心に食べる。&lt;/p&gt;&#xA;&lt;p&gt;スーパーに限定の東洋美人があったので、初日なのにお土産に買う。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二日目&#34;&gt;&#xA;  二日目&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%ba%8c%e6%97%a5%e7%9b%ae&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;3/18（月）&lt;/p&gt;&#xA;&lt;p&gt;佐賀に向かう。&lt;/p&gt;&#xA;&lt;p&gt;途中、本州最北端の毘沙ノ鼻に寄る。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/saga_touring/bisha_no_hana.jpg&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;これで本州は西南北の最端を制覇。&lt;/p&gt;&#xA;&lt;p&gt;そのまま高速で佐賀に移動。&lt;/p&gt;&#xA;&lt;p&gt;お昼ご飯は河太郎で呼子のイカを食べる。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/saga_touring/yobuko_squid.jpg&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;このイカ、新鮮で臭みもネチャネチャした食感もなく、肉厚で弾力を甘味を楽しめた。&#xA;満足。&lt;/p&gt;&#xA;&lt;p&gt;そのまま嬉野温泉に移動。&lt;/p&gt;&#xA;&lt;p&gt;晩飯は温泉湯豆腐を食べに行く。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/saga_touring/onsen_yudofu.jpg&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;この湯豆腐、美味しんぼで紹介されていて昔から気になっていた。&lt;/p&gt;&#xA;&lt;p&gt;汁にうっすらと味がついており美味しかった。&lt;/p&gt;&#xA;&lt;h2 id=&#34;三日目&#34;&gt;&#xA;  三日目&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%89%e6%97%a5%e7%9b%ae&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;3/19（火）&lt;/p&gt;&#xA;&lt;p&gt;久留米が近かったので、大砲ラーメンを食べに行く。&lt;/p&gt;&#xA;&lt;p&gt;有名店なので開店凸してもしばらく待つかな、と思ったが、開店が10:30と早いこともありすんなり入れる。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/saga_touring/kurume_ramen.jpg&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;しっかり美味しいとんこつラーメンだった。&lt;/p&gt;&#xA;&lt;p&gt;そのまま、関門トンネルを通り山口の長門湯本温泉へ。&lt;/p&gt;&#xA;&lt;p&gt;当初は広島の宮浜温泉に行く予定だったのだが、祝日前ということもあり予約を取り損ねた。&lt;/p&gt;&#xA;&lt;p&gt;温泉地自体は川沿いで風情があり良かった。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/saga_touring/nagato_yumoto_onsen.jpg&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;晩飯はいつものごとく。&lt;/p&gt;&#xA;&lt;h2 id=&#34;四日目&#34;&gt;&#xA;  四日目&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9b%9b%e6%97%a5%e7%9b%ae&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;3/20（水）&lt;/p&gt;&#xA;&lt;p&gt;この日はこのまま出雲大社に寄ってから帰阪する予定だったが、大幅に予定が狂うことになる。&lt;/p&gt;&#xA;&lt;p&gt;日本海側を通って下道で出雲大社に向かっていたのだが、どうも風が強い。&lt;/p&gt;&#xA;&lt;p&gt;当初台風が来たのかななんて考えていたが、道の駅で休憩している間に天気予報を確認したところ、暴風警報が出ていた。&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;やけに風強いな思たらなんやこれ &lt;a href=&#34;https://t.co/8XWVpAV4Qp&#34;&gt;pic.twitter.com/8XWVpAV4Qp&lt;/a&gt;&lt;/p&gt;&amp;mdash; task (@getupmax) &lt;a href=&#34;https://twitter.com/getupmax/status/1770236255902793929?ref_src=twsrc%5Etfw&#34;&gt;March 19, 2024&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;p&gt;そんなこんなで、こまめに休憩しながら出雲に向かった影響で、2時間近く予定から遅れてしまい、昼飯を食べ損ねた。&lt;/p&gt;&#xA;&lt;p&gt;参拝も終わり、お土産も買って大阪に向かって出発したのだが、今度は雪が降ってきて、高速道路がチェーン規制されてしまった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「仮面ライダー555 パラダイス・リゲインド」を観た話</title>
      <link>https://t45k.github.io/blog/555_movie/</link>
      <pubDate>Sun, 25 Feb 2024 00:29:15 +0900</pubDate>
      <guid>https://t45k.github.io/blog/555_movie/</guid>
      <description>&lt;p&gt;仮面ライダー555の20周年記念劇場版を観た。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.toei-video.co.jp/55520th/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.toei-video.co.jp/55520th/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;以下ネタバレあり感想&lt;/p&gt;&#xA;&lt;h2 id=&#34;良かったところ&#34;&gt;&#xA;  良かったところ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%89%af%e3%81%8b%e3%81%a3%e3%81%9f%e3%81%a8%e3%81%93%e3%82%8d&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;20年ぶりの仮面ライダー555&lt;br&gt;&#xA;子供の頃の記憶が蘇った（去年YouTubeでやってた一挙放送は見たが）&lt;/li&gt;&#xA;&lt;li&gt;新ライダーの造形が格好良かった&lt;br&gt;&#xA;ネクストファイズ、ネクストカイザ、ミューズ&lt;/li&gt;&#xA;&lt;li&gt;古い方のファイズも出てきた&lt;/li&gt;&#xA;&lt;li&gt;歳をとった巧の渋さ&lt;/li&gt;&#xA;&lt;li&gt;真里がオルフェノク化する意外性のある展開&lt;/li&gt;&#xA;&lt;li&gt;海堂がちゃんと海堂だった&lt;/li&gt;&#xA;&lt;li&gt;草加の顔芸&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;良くなかったところ&#34;&gt;&#xA;  良くなかったところ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%89%af%e3%81%8f%e3%81%aa%e3%81%8b%e3%81%a3%e3%81%9f%e3%81%a8%e3%81%93%e3%82%8d&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;キャストが歳をとっている&lt;br&gt;&#xA;結残念だった。月日の流れは無常&lt;/li&gt;&#xA;&lt;li&gt;北崎、草加がアンドロイドだったという、悪い方に意外性のある展開&lt;/li&gt;&#xA;&lt;li&gt;アンドロイドなのに変身できるという謎&lt;/li&gt;&#xA;&lt;li&gt;謎の濡れ場シーン（？）&lt;br&gt;&#xA;あれは必要だったのか&lt;/li&gt;&#xA;&lt;li&gt;北崎が出てる以上琢磨も出して欲しかった。あと三原&lt;/li&gt;&#xA;&lt;li&gt;巧が最初スマートブレイン側についていた理由がいまいち不明&lt;/li&gt;&#xA;&lt;li&gt;どうしようもないことだが、やっぱり木場がいないと始まらない感&lt;/li&gt;&#xA;&lt;li&gt;オルフェノクとして匿われているのに、スマートブレインに情報を売る味方&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;総合的には別に見なくても&amp;hellip;という感想。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2023年の振り返り</title>
      <link>https://t45k.github.io/blog/retrospective_2023/</link>
      <pubDate>Tue, 02 Jan 2024 23:25:57 +0900</pubDate>
      <guid>https://t45k.github.io/blog/retrospective_2023/</guid>
      <description>&lt;p&gt;2023年を振り返る。&lt;/p&gt;&#xA;&lt;h2 id=&#34;総評&#34;&gt;&#xA;  総評&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b7%8f%e8%a9%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;楽天を辞めてマネーフォワードに転職した。&lt;/p&gt;&#xA;&lt;p&gt;マネフォは技術力が高い人が多い環境で、楽しく仕事ができた。&lt;/p&gt;&#xA;&lt;p&gt;チームメンバーとも仲良くできて良い1年間だった。&lt;/p&gt;&#xA;&lt;h2 id=&#34;仕事&#34;&gt;&#xA;  仕事&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bb%95%e4%ba%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1月----3月&#34;&gt;&#xA;  1月 &amp;ndash; 3月&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#1%e6%9c%88----3%e6%9c%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;1月に上の方から、エンジニアも楽天モバイルの契約をとることが必須になったとのお達しが来て、転職を決意する。&#xA;ひとまず大阪でバックエンドでKotlinが書ける職種を探していたところ、マネフォが引っかかる。&#xA;向こうからカジュ面のお誘いが来たのでやらせてもらい、そのまま面接に進んだ。&#xA;ぬるっと内定をもらい、ボーナスの都合で7月からのジョインで着地。&lt;/p&gt;&#xA;&lt;p&gt;一方前職では、内定者アルバイトの子がチームに加わったため、メンターとしても仕事していた。&#xA;とても良い子で、すごく仲良くしてもらったこともあり、楽しく過ごす。&lt;/p&gt;&#xA;&lt;h3 id=&#34;4月----6月&#34;&gt;&#xA;  4月 &amp;ndash; 6月&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#4%e6%9c%88----6%e6%9c%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;上述の件もあり、仲良かった同期や後輩が次々と辞めていく。&#xA;内定者アルバイトの子も入社し、6月から配属とのことだったので、面倒を見れるように5月中に有給を使い切る。&#xA;お別れ会がめちゃくちゃ多かった期間。&lt;/p&gt;&#xA;&lt;p&gt;JJUGで登壇する。&#xA;初外部登壇。&lt;/p&gt;&#xA;&lt;h3 id=&#34;7月----9月&#34;&gt;&#xA;  7月 &amp;ndash; 9月&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#7%e6%9c%88----9%e6%9c%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;マネフォにジョイン。&#xA;コードのレベルや社内の手続きの簡単さにびっくりする。&lt;/p&gt;&#xA;&lt;p&gt;色々新しい技術を触る。キャッチアップの難しさを知る。&#xA;ライブラリの都合で上げられていなかったKotlinのバージョンを上げたり、CIのコストを下げたりしていた。&lt;/p&gt;&#xA;&lt;p&gt;9月にメンターの先輩が休職され一人で仕事をすることになったが、ドメインを理解しきれていなかったのでとても苦労した。&lt;/p&gt;&#xA;&lt;p&gt;上司に唆され、サーバサイドKotlin勉強会で登壇する。&lt;/p&gt;&#xA;&lt;h3 id=&#34;10月----12月&#34;&gt;&#xA;  10月 &amp;ndash; 12月&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#10%e6%9c%88----12%e6%9c%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;ドメインやコード全体が分かってきたので、一人で仕事を進められるようになる。&lt;/p&gt;&#xA;&lt;p&gt;人生初アドカレに参加する。&lt;/p&gt;&#xA;&lt;h2 id=&#34;人間関係&#34;&gt;&#xA;  人間関係&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%ba%ba%e9%96%93%e9%96%a2%e4%bf%82&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;転職してしまったが、前職のメンバーとは定期的に飲み会する機会があり、なんだかんだ交流が続いている。&lt;/p&gt;&#xA;&lt;p&gt;現職では、チームメンバーで出社する人が多いため、終業後飲みに行ったり、サウナに行ったりでチームに良い感じに溶け込めた気がする。&lt;/p&gt;&#xA;&lt;h2 id=&#34;プログラミング&#34;&gt;&#xA;  プログラミング&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%97%e3%83%ad%e3%82%b0%e3%83%a9%e3%83%9f%e3%83%b3%e3%82%b0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;現職ではSpring WebFluxを使っているので、Kotlin Coroutinや非同期周りの造形が深まった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ノンアルコールビールを飲み比べた話</title>
      <link>https://t45k.github.io/blog/non_alcohol_beer/</link>
      <pubDate>Mon, 11 Dec 2023 22:59:05 +0900</pubDate>
      <guid>https://t45k.github.io/blog/non_alcohol_beer/</guid>
      <description>&lt;p&gt;健康の問題で酒が飲めない期間が続いたので、良さげなノンアルコールビールを5本買って飲み比べてみた。&#xA;備忘録。&lt;/p&gt;&#xA;&lt;h2 id=&#34;飲み比べ対象&#34;&gt;&#xA;  飲み比べ対象&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%a3%b2%e3%81%bf%e6%af%94%e3%81%b9%e5%af%be%e8%b1%a1&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://t45k.github.io/img/blog/non_alcohol_beer.jpg&#34; width=&#34;75%&#34;&gt;&#xA;&lt;p&gt;左からバドワイザー、龍馬1865、ヒューガルデン、Bavaria、NINJA LAGER&lt;/p&gt;&#xA;&lt;h3 id=&#34;バドワイザー&#34;&gt;&#xA;  バドワイザー&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%90%e3%83%89%e3%83%af%e3%82%a4%e3%82%b6%e3%83%bc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;言わずと知れた有名なビールのノンアルコール版。&lt;/p&gt;&#xA;&lt;p&gt;オリジナルのバドワイザー自体が薄めの軽いビールなのも相まって、かなり味が軽く飲みやすい。&lt;/p&gt;&#xA;&lt;p&gt;本家に近いっちゃ近かった。&lt;/p&gt;&#xA;&lt;h3 id=&#34;龍馬1865&#34;&gt;&#xA;  龍馬1865&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%be%8d%e9%a6%ac1865&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;麦芽とホップ（と炭酸）しか使っていないかなり本格派のノンアル。&lt;/p&gt;&#xA;&lt;p&gt;味もかなりビールに近く、飲んでいて満足感があった。&lt;/p&gt;&#xA;&lt;p&gt;プリン体ゼロを明記しているのも健康的に嬉しいところ。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ヒューガルデン&#34;&gt;&#xA;  ヒューガルデン&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%92%e3%83%a5%e3%83%bc%e3%82%ac%e3%83%ab%e3%83%87%e3%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;柑橘系の香りなど、オリジナルに近い雰囲気を感じた。&lt;/p&gt;&#xA;&lt;p&gt;原料に液糖が含まれているからかかなり甘く、ビールは苦手だけどジュースは好き、みたいな人も美味しく飲めるかもと思った。&lt;/p&gt;&#xA;&lt;p&gt;ビールとは違う飲み物だなぁという印象。&lt;/p&gt;&#xA;&lt;h3 id=&#34;bavaria&#34;&gt;&#xA;  Bavaria&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#bavaria&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;寡聞にして知らないメーカー。オランダ産らしい。&lt;/p&gt;&#xA;&lt;p&gt;龍馬1865と同じく麦芽とホップがメインのビールの原料に近いノンアル。&lt;/p&gt;&#xA;&lt;p&gt;味もビールに近かったが、ノンアルや発泡酒特有の謎の酸味があった。&lt;/p&gt;&#xA;&lt;h3 id=&#34;ninja-lager&#34;&gt;&#xA;  NINJA LAGER&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#ninja-lager&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;こちらも麦芽とホップしか使っていない本格派ノンアル。&lt;/p&gt;&#xA;&lt;p&gt;ハラールの認定を受けているのが売りらしい。&lt;/p&gt;&#xA;&lt;p&gt;Bavariaに近い味か。&lt;/p&gt;&#xA;&lt;h2 id=&#34;総評&#34;&gt;&#xA;  総評&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b7%8f%e8%a9%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ビールに近い原料を使っているものは、ノンアルというか発泡酒というか特有の香りと謎の酸味があった。&lt;/p&gt;&#xA;&lt;p&gt;普段飲んでいるビールはアルコールがあるからこれらを感じないだけなのかも知れないと思った。&lt;/p&gt;&#xA;&lt;p&gt;やはりアルコールがない分飲みごたえは少ないが、満足感はあった。&lt;/p&gt;&#xA;&lt;p&gt;ビールに近いものが飲みたければ龍馬1865、飲みやすく美味しいものが良ければヒューガルデンをおすすめする。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「なっとく！関数型プログラミング」読了</title>
      <link>https://t45k.github.io/blog/grokking_functional_programming/</link>
      <pubDate>Mon, 09 Oct 2023 23:22:01 +0900</pubDate>
      <guid>https://t45k.github.io/blog/grokking_functional_programming/</guid>
      <description>&lt;p&gt;「なっとく！関数型プログラミング」を読んだ。&lt;/p&gt;&#xA;&lt;p&gt;「純粋関数のシグネチャは嘘をつかない」が再三説明されていて良かった。&#xA;純粋関数を取り扱ううえで話題になりがちなIO処理なども丁寧に説明されていた。&lt;/p&gt;&#xA;&lt;p&gt;9章の「値としてのストリーム」、10章の「並行プログラム」辺りから内容の厚さが段違いになり、&#xA;今回は残念なが読み飛ばさせてもらった。&lt;/p&gt;&#xA;&lt;table border=&#34;0&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div style=&#34;border:1px solid #95a5a6;border-radius:.75rem;background-color:#FFFFFF;width:504px;margin:0px;padding:5px;text-align:center;overflow:hidden;&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td style=&#34;width:240px&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17537959%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;img src=&#34;https://hbb.afl.rakuten.co.jp/hgb/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?me_id=1213310&amp;item_id=20987480&amp;pc=https%3A%2F%2Fthumbnail.image.rakuten.co.jp%2F%400_mall%2Fbook%2Fcabinet%2F9803%2F9784798179803_1_35.jpg%3F_ex%3D240x240&amp;s=240x240&amp;t=picttext&#34; border=&#34;0&#34; style=&#34;margin:2px&#34; alt=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34; title=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34;&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style=&#34;vertical-align:top;width:248px;display: block;&#34;&gt;&lt;p style=&#34;font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px;word-wrap:break-word&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17537959%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;なっとく！関数型プログラミング [ Michał Płachta ]&lt;/a&gt;&lt;br&gt;&lt;span &gt;価格：3,740円（税込、送料無料)&lt;/span&gt; &lt;span style=&#34;color:#BBB&#34;&gt;(2023/10/9時点)&lt;/span&gt;&lt;/p&gt;&lt;div style=&#34;margin:10px;&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17537959%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;img src=&#34;https://static.affiliate.rakuten.co.jp/makelink/rl.svg&#34; style=&#34;float:left;max-height:27px;width:auto;margin-top:0&#34; &gt;&lt;/a&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17537959%2F%3Fscid%3Daf_pc_bbtn&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ==&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;&gt;&lt;div style=&#34;float:right;width:41%;height:27px;background-color:#bf0000;color:#fff!important;font-size:12px;font-weight:500;line-height:27px;margin-left:1px;padding: 0 12px;border-radius:16px;cursor:pointer;text-align:center;&#34;&gt; 楽天で購入 &lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;br&gt;&lt;p style=&#34;color:#000000;font-size:12px;line-height:1.4em;margin:5px;word-wrap:break-word&#34;&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</description>
    </item>
    <item>
      <title>マネーフォワードに入社した話</title>
      <link>https://t45k.github.io/blog/welcome_monery_forward/</link>
      <pubDate>Sun, 01 Oct 2023 00:26:09 +0900</pubDate>
      <guid>https://t45k.github.io/blog/welcome_monery_forward/</guid>
      <description>&lt;p&gt;2023年7月付で株式会社マネーフォワードに入社しました。&lt;/p&gt;&#xA;&lt;p&gt;試用期間も終わったので色々書きます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;マネフォ&#34;&gt;&#xA;  マネフォ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%9e%e3%83%8d%e3%83%95%e3%82%a9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;「お金を前へ。人生をもっと前へ。」をミッションにしている会社です。&lt;/p&gt;&#xA;&lt;p&gt;一般ユーザ向けの帳簿管理アプリである「マネーフォワードMe」や法人向けバックオフィスSaaSである「マネーフォワードクラウド」を提供しています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;なぜマネフォ&#34;&gt;&#xA;  なぜマネフォ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%81%aa%e3%81%9c%e3%83%9e%e3%83%8d%e3%83%95%e3%82%a9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;元々、大阪でKotlinを書ける仕事を探していました。&lt;/p&gt;&#xA;&lt;p&gt;その中にマネーフォワードがあったのですが、個人的にマネーフォワードは技術レベルが高く、&#xA;自分では通用しない、という考えがあったのでスルーしていました。&lt;/p&gt;&#xA;&lt;p&gt;そんな中で前職で色々あり本格的に転職を考えるのですが、&#xA;そのタイミングで真っ先にマネフォがカジュアル面談の声をかけてくださいました。&lt;/p&gt;&#xA;&lt;p&gt;話を聞いてみると、マネフォのMVVCにも共感でき、経験がマッチしそうということで応募し、無事採用に至りました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;何してるの&#34;&gt;&#xA;  何してるの&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bd%95%e3%81%97%e3%81%a6%e3%82%8b%e3%81%ae&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://biz.moneyforward.com/consolidated-accounting/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;クラウド連結会計&lt;/a&gt;の開発、運用をしています。&lt;/p&gt;&#xA;&lt;p&gt;連結会計という複雑なドメインを理解してコードに書き下していくのが楽しいです。&lt;/p&gt;&#xA;&lt;p&gt;その他、この3ヶ月でCIのコストカット、R2DBCへの移行、および&lt;a href=&#34;https://t45k.github.io/blog/server_side_kotlin_meetup_10/&#34; &gt;登壇&lt;/a&gt;をしました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;マネフォの良いところ悪いところ&#34;&gt;&#xA;  マネフォの良いところ・悪いところ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%9e%e3%83%8d%e3%83%95%e3%82%a9%e3%81%ae%e8%89%af%e3%81%84%e3%81%a8%e3%81%93%e3%82%8d%e6%82%aa%e3%81%84%e3%81%a8%e3%81%93%e3%82%8d&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;は、カジュアル面談とかで喋れたらな、と思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>サーバーサイドKotlin LT大会 vol.10で登壇した話</title>
      <link>https://t45k.github.io/blog/server_side_kotlin_meetup_10/</link>
      <pubDate>Sat, 30 Sep 2023 22:25:14 +0900</pubDate>
      <guid>https://t45k.github.io/blog/server_side_kotlin_meetup_10/</guid>
      <description>&lt;p&gt;3ヶ月ぶりに登壇しました。&#xA;&lt;a href=&#34;https://server-side-kotlin-meetup.connpass.com/event/291686/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://server-side-kotlin-meetup.connpass.com/event/291686/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;server-side-kotlin-meetup&#34;&gt;&#xA;  Server-Side Kotlin Meetup&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#server-side-kotlin-meetup&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Server-side Kotlin MeetupはサーバサイドKotlinユーザのコミュニティです。&lt;/p&gt;&#xA;&lt;p&gt;前職ではそこまでガッツリKotlinをやっていたわけではなかったので知りませんでした。&lt;/p&gt;&#xA;&lt;p&gt;現職では、上司が運営の一人をしており、LTの15分枠が埋まらなさそうなので応募して欲しい、と頼まれたことがきっかけでした。&lt;/p&gt;&#xA;&lt;p&gt;僕自身も積極的に登壇活動をしたいと思っていたので、良い機会だと思い快諾しました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;発表内容&#34;&gt;&#xA;  発表内容&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%99%ba%e8%a1%a8%e5%86%85%e5%ae%b9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;「R2DBCを導入しようとした話」というタイトルでLTしました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/t45k/r2dbcwodao-ru-suruhua&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://speakerdeck.com/t45k/r2dbcwodao-ru-suruhua&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;応募時はK2コンパイラをCIで試してみた話をしようとしていたのですが、&#xA;タイトル回収締め切りまでにR2DBCへの移行に着手し始め、そっちの方が盛り上がりそうだったのでネタを変えることにしました。&lt;/p&gt;&#xA;&lt;p&gt;様々な詰まりポイントがあるせいで締切までに完了の目処が立たず、タイトルを「しようとした（そしてうまくいかなかった）とした、という経緯がありました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;会場&#34;&gt;&#xA;  会場&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bc%9a%e5%a0%b4&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;UZABASEさんのオフィスにお世話になりました。&lt;/p&gt;&#xA;&lt;p&gt;UZABASEさんはNewsPicksなどの開発をしている会社です。&lt;/p&gt;&#xA;&lt;p&gt;東京駅の真ん前にオフィスがあり、1階はイベントスペースになっているおしゃれなオフィスでした。&lt;/p&gt;&#xA;&lt;h2 id=&#34;当日&#34;&gt;&#xA;  当日&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%bd%93%e6%97%a5&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;オフラインイベントで、だいたい30名くらいの方がいたと思います。&lt;/p&gt;&#xA;&lt;p&gt;開始時に乾杯があり、発表前にお酒を飲むという、本当に気楽なイベントでした。&lt;/p&gt;&#xA;&lt;p&gt;他の会社の方々や、同じ会社の違う拠点の方々と交流でき、とても良かったです。&lt;/p&gt;&#xA;&lt;p&gt;ぜひ次回も参加したいと思いました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>セミを食べた話</title>
      <link>https://t45k.github.io/blog/cicada/</link>
      <pubDate>Sun, 06 Aug 2023 13:47:19 +0900</pubDate>
      <guid>https://t45k.github.io/blog/cicada/</guid>
      <description>&lt;div style=&#34;color:red&#34;&gt;虫の画像注意&lt;/div&gt;&#xA;&lt;p&gt;セミを食べたのでレポ。&lt;/p&gt;&#xA;&lt;h2 id=&#34;きっかけ&#34;&gt;&#xA;  きっかけ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%81%8d%e3%81%a3%e3%81%8b%e3%81%91&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;この辺の記事、動画を読んで興味を持ったから。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://dailyportalz.jp/kiji/170801200301&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;セミはソフトシェルのうちに食うべし - デイリーポータルZ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=yRlI5kPtJUc&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;今が旬の超美味しいセミをとって食う - ホモサピ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;友達にもホモサピのファンがいたため、&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;セミの幼虫をとって&lt;/li&gt;&#xA;&lt;li&gt;家で羽化させて&lt;/li&gt;&#xA;&lt;li&gt;揚げ物にして食べよう&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;という話になった。&lt;/p&gt;&#xA;&lt;h2 id=&#34;セミ捕り&#34;&gt;&#xA;  セミ捕り&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%bb%e3%83%9f%e6%8d%95%e3%82%8a&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;今回は成虫ではなく幼虫のセミをターゲットにした。&lt;/p&gt;&#xA;&lt;p&gt;一般的にセミの幼虫は夕方から夜にかけて地面から出てきて、木に登り、羽化を行う。&lt;/p&gt;&#xA;&lt;p&gt;なので、夕方頃に集合して近所の森や公園などを歩き回った。&lt;/p&gt;&#xA;&lt;p&gt;結果として、セミの幼虫は全然見つからず、最終的に一人一匹捕まえるに留まった。&lt;/p&gt;&#xA;&lt;p&gt;セミの美味しさに気づいた人達が乱獲しているのかもしれない。&lt;/p&gt;&#xA;&lt;h2 id=&#34;羽化&#34;&gt;&#xA;  羽化&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%be%bd%e5%8c%96&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;セミの幼虫をカーテンに引っ掛けておくと勝手に羽化するのは有名な話である。&lt;/p&gt;&#xA;&lt;p&gt;今回は羽化した瞬間のセミを食べることが目的だったので、捕まえた幼虫は全てカーテンに引っ付けておいた。&lt;/p&gt;&#xA;&lt;p&gt;しかし、2時間経っても、片方は羽化途中で完全に停止し、もう片方は羽化すらしていないという状態だった。&lt;/p&gt;&#xA;&lt;p&gt;終電の都合があったので、今回はその状態で調理に入った。&lt;/p&gt;&#xA;&lt;img src=&#34;https://t45k.github.io/img/blog/cicada/curtain.jpg&#34; width=&#34;50%&#34;&gt;&#xA;&lt;h2 id=&#34;調理&#34;&gt;&#xA;  調理&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%aa%bf%e7%90%86&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;市販の唐揚げ粉を使って唐揚げにした（セミだけでは足りないのが分かっていたので、ついでに鶏の唐揚げを作っていた）。&lt;/p&gt;&#xA;&lt;img src=&#34;https://t45k.github.io/img/blog/cicada/flied.jpg&#34; width=&#34;50%&#34;&gt;&#xA;&lt;p&gt;ただ、残念なことに、エビなどと同じく、セミもかなり淡白な味なのか、濃い味付けの唐揚げ粉に負けてしまっている感じがした。&lt;/p&gt;&#xA;&lt;h2 id=&#34;総評&#34;&gt;&#xA;  総評&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b7%8f%e8%a9%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;「セミを食べる」という貴重な経験をすることはできたが、決して満足がいく内容ではなかった。&#xA;次回以降に備えて、以下に注意したいと思う。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;事前にセミが取れそうな場所を調査しておく&lt;/li&gt;&#xA;&lt;li&gt;セミ捕りや羽化に時間がかかるため、余裕を持って行動する。終電は諦める&lt;/li&gt;&#xA;&lt;li&gt;セミの味を生かした調理を行う。素揚げが良さそう&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>「データ指向プログラミング」読了</title>
      <link>https://t45k.github.io/blog/data_oriented_programming/</link>
      <pubDate>Sat, 01 Jul 2023 19:17:51 +0900</pubDate>
      <guid>https://t45k.github.io/blog/data_oriented_programming/</guid>
      <description>&lt;p&gt;データ指向プログラミングを読んだ。&lt;/p&gt;&#xA;&lt;p&gt;本書では、データ指向プログラミングと名付けられた、イミュータブルかつ汎用的なデータ構造で表現されたデータと&#xA;参照透過かつジェネリックな関数を使ったプログラミング方法を紹介している。&lt;/p&gt;&#xA;&lt;p&gt;イミュータブルなデータと参照透過なメソッドを使ったプログラミングは普段から実践しており、&#xA;それらを使って柔軟なシステムを構築する方法を紹介している本書にはとても興味があった。&#xA;が、内容としてはかなりがっかりした。&lt;/p&gt;&#xA;&lt;p&gt;本書では、データを表現するためにクラスではなくマップを使うことを前提において話が進んでいく。&#xA;つまり&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;Hoge&lt;/span&gt;(fuga: Int, piyo: String)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;val&lt;/span&gt; hoge = Hoge(0, &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;を&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;val&lt;/span&gt; hoge = mapOf(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;fuga&amp;#34;&lt;/span&gt; to 0,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;piyo&amp;#34;&lt;/span&gt; to &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;で書こうという内容だった。&#xA;この方法は確かに柔軟になるかもしれないが、静的型付けによる安全性を完全に無視しており、かなりがっかりした。&lt;/p&gt;&#xA;&lt;p&gt;書籍内でもこのことについて触れられていて、以下のように紹介されていた。&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;OOP&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: center&#34;&gt;DOP&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;安全性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;高い&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;低い&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;柔軟性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;低い&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;高い&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;汎用性&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;低い&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: center&#34;&gt;高い&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;これは各要素を&amp;quot;高い&amp;quot;、&amp;ldquo;低い&amp;quot;のboolで表現しているDOPが良さそうに見えるだけで、&#xA;点数を付けるとDOPの安全性が-5000億くらいでトータだとOOPの方が良さそうだなと感じた&#xA;（また、表では触れられていないが、フィールドアクセス時に保管が効かないので、コーディング中のストレスがとんでもないことになりそう）。&lt;/p&gt;&#xA;&lt;p&gt;その他の感想:&lt;/p&gt;&#xA;&lt;p&gt;+ JSON Schema便利そう&lt;br&gt;&#xA;+ データの（デ）シリアライズが簡単なので、REPLが使いやすいのは良い&lt;br&gt;&#xA;+ 汎用的な関数を作るという考え方は良さそう&lt;/p&gt;&#xA;&lt;p&gt;- 複雑なJSON Schemaを書こうとすると辛そう。OOPならSpecificationパターンとか使える&lt;br&gt;&#xA;- 色んなところでJSON Schema Validationが挟まりそう&lt;br&gt;&#xA;- ポリモーフィズムで、実装忘れを静的に検知できないのが辛い&lt;/p&gt;&#xA;&lt;table border=&#34;0&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div style=&#34;border:1px solid #95a5a6;border-radius:.75rem;background-color:#FFFFFF;width:504px;margin:0px;padding:5px;text-align:center;overflow:hidden;&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td style=&#34;width:240px&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17434107%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;  &gt;&lt;img src=&#34;https://hbb.afl.rakuten.co.jp/hgb/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?me_id=1213310&amp;item_id=20896748&amp;pc=https%3A%2F%2Fthumbnail.image.rakuten.co.jp%2F%400_mall%2Fbook%2Fcabinet%2F9797%2F9784798179797_1_33.jpg%3F_ex%3D240x240&amp;s=240x240&amp;t=picttext&#34; border=&#34;0&#34; style=&#34;margin:2px&#34; alt=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34; title=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34;&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style=&#34;vertical-align:top;width:248px;&#34;&gt;&lt;p style=&#34;font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px;word-wrap:break-word&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F17434107%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;  &gt;データ指向プログラミング [ Yehonathan Sharvit ]&lt;/a&gt;&lt;br&gt;&lt;span &gt;価格：3,960円（税込、送料無料)&lt;/span&gt; &lt;span style=&#34;color:#BBB&#34;&gt;(2023/7/1時点)&lt;/span&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>2年勤めた楽天を退職した話</title>
      <link>https://t45k.github.io/blog/farewell_rakuten/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0900</pubDate>
      <guid>https://t45k.github.io/blog/farewell_rakuten/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/rakuten_osaka_office.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;2023年6月末をもって楽天グループ株式会社（大阪支社）を退職する運びとなりました。&#xA;2021年4月に新卒として入社したので、2年3ヶ月在籍したことになります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;なぜ入社したか&#34;&gt;&#xA;  なぜ入社したか&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%81%aa%e3%81%9c%e5%85%a5%e7%a4%be%e3%81%97%e3%81%9f%e3%81%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://t45k.github.io/blog/rakuten/&#34; &gt;学生の時に参加したインターン&lt;/a&gt;が楽しかったというのが最大の理由です。&lt;/p&gt;&#xA;&lt;p&gt;また、日本最大級のサービスを提供している、英語で仕事できるという点に面白みを感じましたし、&#xA;カフェテリアが無料というのも魅力的でした。&lt;/p&gt;&#xA;&lt;h2 id=&#34;どんな会社だったか&#34;&gt;&#xA;  どんな会社だったか&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%81%a9%e3%82%93%e3%81%aa%e4%bc%9a%e7%a4%be%e3%81%a0%e3%81%a3%e3%81%9f%e3%81%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;技術&#34;&gt;&#xA;  技術&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%8a%80%e8%a1%93&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;大小様々なサービスを展開しているので、大規模なサービスで専門的なスキルをつけることも、&#xA;比較的小規模なサービスでフロントからインフラまでフルスタックで面倒を見ることも選択できます。&lt;/p&gt;&#xA;&lt;p&gt;新しいサービスが立ち上がることも少なくないので、立ち上げから関わることもできます。&lt;/p&gt;&#xA;&lt;p&gt;また、楽天はプライベートクラウド&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;を持っているため、クラウドの運用側を覗けるのも大企業ならではの面白さではと思います。&#xA;パブリッククラウドと比較して格安で使えるので、実際に動かしながらk8sを学ぶこともできます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;人材&#34;&gt;&#xA;  人材&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%ba%ba%e6%9d%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;多様な国籍の人達と働けます。&#xA;外国人と雑談し、お互いのバックグラウンドを理解し合うのは面白かったです。&lt;/p&gt;&#xA;&lt;p&gt;外国人特有の飲み会の騒がしさも好きでした。&lt;/p&gt;&#xA;&lt;h3 id=&#34;福利厚生&#34;&gt;&#xA;  福利厚生&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%a6%8f%e5%88%a9%e5%8e%9a%e7%94%9f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;結構充実していると思います。&lt;/p&gt;&#xA;&lt;p&gt;何といっても、カフェテリアが朝昼晩無料で利用できるのは強いと感じました。&lt;/p&gt;&#xA;&lt;p&gt;また、二子玉川の本社だと、ジムや託児所も備え付けられているそうです。&lt;/p&gt;&#xA;&lt;p&gt;現在、週3回程度の出社が義務付けられていますが、僕は顔を合わせて仕事をするのが好きなので、これは歓迎でした&#xA;（もちろん、家族や健康などの理由があると出社は免除されます）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;何をしたか&#34;&gt;&#xA;  何をしたか&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bd%95%e3%82%92%e3%81%97%e3%81%9f%e3%81%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://car.rakuten.co.jp/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;楽天Car&lt;/a&gt;というサービスを担当していました。&lt;/p&gt;&#xA;&lt;p&gt;新機能の実装だけでなく、CIの導入、オンプレからk8sへの移行など幅広くやっていました。&lt;/p&gt;&#xA;&lt;p&gt;その他、&lt;a href=&#34;https://commerce-engineer.rakuten.careers/entry/workstyle/0025&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;短期インターンのメンター&lt;/a&gt;をしたり、&#xA;社内LTに参加したり、&lt;a href=&#34;https://t45k.github.io/blog/jjug_ccc_2023_spring/&#34; &gt;登壇&lt;/a&gt;したりもできました。&lt;/p&gt;&#xA;&lt;p&gt;また、この職場でSpock&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;を知ることができたのはとても良かったです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;むすび&#34;&gt;&#xA;  むすび&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%80%e3%81%99%e3%81%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;楽天では良い上司、先輩、同期、後輩に恵まれました。この場を借りてお礼申し上げます。&#xA;僕は人間関係の大部分が会社に依存しているので、退職はシンプルに寂しいです。&lt;/p&gt;&#xA;&lt;p&gt;この2年間で幅広くチャレンジさせてもらえて、様々なことを学べました。&#xA;ファーストキャリアに楽天を選んで良かったなと思います。&lt;/p&gt;&#xA;&lt;p&gt;次のキャリアでは、エンジニアの実力を伸ばすことに注力できる環境でチャレンジしていきます。&lt;/p&gt;&#xA;&lt;p&gt;最後に、楽天モバイルの成功を心からお祈りしております。&lt;/p&gt;&#xA;&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;&#xA;&lt;hr&gt;&#xA;&lt;ol&gt;&#xA;&lt;li id=&#34;fn:1&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://xtech.nikkei.com/atcl/nxt/column/18/00001/07478/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://xtech.nikkei.com/atcl/nxt/column/18/00001/07478/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li id=&#34;fn:2&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://spockframework.org/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://spockframework.org/&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>JJUG CCC 2023 Springで登壇した話</title>
      <link>https://t45k.github.io/blog/jjug_ccc_2023_spring/</link>
      <pubDate>Mon, 05 Jun 2023 19:48:46 +0900</pubDate>
      <guid>https://t45k.github.io/blog/jjug_ccc_2023_spring/</guid>
      <description>&lt;p&gt;2023年6月4日日曜日に開催された&lt;a href=&#34;https://sessionize.com/api/v2/y7inyq6y/view/GridSmart&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JJUG CCC 2023 Spring&lt;/a&gt;で人生初の登壇をしてきました！&#xA;めっちゃ緊張した&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;写真はもらったノベルティの数々。&lt;/p&gt;&#xA;&lt;img src=&#34;https://t45k.github.io/img/blog/jjug_ccc_2023_spring.jpg&#34; height=&#34;50%&#34; width=&#34;50%&#34;&gt;&#xA;&lt;h3 id=&#34;jjugとは&#34;&gt;&#xA;  JJUGとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#jjug%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://t45k.github.io/blog/jjug_ccc_2022_fall/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://t45k.github.io/blog/jjug_ccc_2022_fall/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;登壇&#34;&gt;&#xA;  登壇&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%99%bb%e5%a3%87&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;業務改善のためにJenkinsとIntelliJのプラグインを作った話をしました。&#xA;JenkinsとIntelliJは共にJavaで作られているので、JJUG CCCの目的に沿ったものだと考えます。&lt;/p&gt;&#xA;&lt;p&gt;当日はミーティングルームABCという狭めの部屋で発表したのですが、その分聴講されている方との距離が近かったと感じました。&#xA;発表中に笑いが起きたり、活発に質疑が行えたりして、初めての発表の環境として良かったなぁと思います。&lt;/p&gt;&#xA;&lt;p&gt;登壇資料は、会社のSlideShareに上げてあります。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.slideshare.net/rakutentech/jenkinsintellij-idea&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.slideshare.net/rakutentech/jenkinsintellij-idea&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;余談ですが、僕の登壇は会社の方には知られていなかったようです。&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;俺の登壇、会社に認知されてへんくて草&lt;/p&gt;&amp;mdash; task (@getupmax) &lt;a href=&#34;https://twitter.com/getupmax/status/1665175461436215297?ref_src=twsrc%5Etfw&#34;&gt;June 4, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;h3 id=&#34;弊社のブース&#34;&gt;&#xA;  弊社のブース&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%bc%8a%e7%a4%be%e3%81%ae%e3%83%96%e3%83%bc%e3%82%b9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;他の方のセッションを聴講していたので、合間合間に弊社のブースに居座っていました。&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;こんにちは、楽天採用情報部です。&lt;br&gt;JJUG CCC 2023 Springは本日開催です！&lt;br&gt;本日はブースを出しておりますので現地でお買いものパンダと共にお待ちしております。&lt;br&gt;現地にいらっしゃることができない方は、是非記事をご覧ください。&lt;br&gt; &lt;a href=&#34;https://t.co/HXrvahCBs0&#34;&gt;https://t.co/HXrvahCBs0&lt;/a&gt;&lt;a href=&#34;https://twitter.com/hashtag/jjug_ccc?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#jjug_ccc&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/rakuten?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rakuten&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/java?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#java&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/engineer?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#engineer&lt;/a&gt;&lt;/p&gt;&amp;mdash; 楽天採用情報（C&amp;amp;Mカンパニー開発部門） (@rhack_commerce) &lt;a href=&#34;https://twitter.com/rhack_commerce/status/1665156452988882944?ref_src=twsrc%5Etfw&#34;&gt;June 4, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;p&gt;山本ユースケさんや岸田さんなど有名な方々にも立ち寄っていただけました。&#xA;ありがとうございます。&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;楽天お買い物パンダと握手できるのは &lt;a href=&#34;https://twitter.com/hashtag/jjug_ccc?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#jjug_ccc&lt;/a&gt; だけ！ &lt;a href=&#34;https://t.co/kvqyF3kblB&#34;&gt;pic.twitter.com/kvqyF3kblB&lt;/a&gt;&lt;/p&gt;&amp;mdash; 山本ユースケ (@yusuke) &lt;a href=&#34;https://twitter.com/yusuke/status/1665236778679250944?ref_src=twsrc%5Etfw&#34;&gt;June 4, 2023&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;h3 id=&#34;その他&#34;&gt;&#xA;  その他&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%81%9d%e3%81%ae%e4%bb%96&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;今回、オフラインのJJUGには初参加なのですが、いろんな企業さんがブーススポンサーとして参加されていました。&lt;/p&gt;&#xA;&lt;p&gt;GMOさんはクイズを企画されていました。&#xA;普段業務では意識しないような細かめの知識を問うような問題を出されており、大変賑わっていました。&#xA;また、JAVAティーをいただきました。&#xA;ありがとうございました。&lt;/p&gt;&#xA;&lt;p&gt;サムライズムさんもいらっしゃいました。&#xA;個人的にサムライズムさんが開発されたCIcloneにとても感銘を受けており、その話をできました。&#xA;また、IntelliJ IDEAとKotlinのステッカーをいただきました。&#xA;ありがとうございました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>東日本近似的一周旅行に行った話</title>
      <link>https://t45k.github.io/blog/east_japan_touring/</link>
      <pubDate>Tue, 16 May 2023 16:19:38 +0900</pubDate>
      <guid>https://t45k.github.io/blog/east_japan_touring/</guid>
      <description>&lt;p&gt;西日本編は&lt;a href=&#34;https://t45k.github.io/blog/tour_day1/&#34; &gt;こちら&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;まとまった休みを取ったので、一週間半くらいかけ本州最北端である大間崎までバイクで行って帰ってた。&#xA;最終的に五日間で2,600km走った。&lt;/p&gt;&#xA;&lt;h2 id=&#34;一日目&#34;&gt;&#xA;  一日目&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%80%e6%97%a5%e7%9b%ae&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;出発。とりあえず行きは日本海側から向かうことにした。&lt;/p&gt;&#xA;&lt;p&gt;昼は金沢の金沢まいもん寿司で高いセットを食べた。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/kanazawa_sushi.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;石浦神社に安全を祈願しに行った。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/ishiura_shrine.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;そのまま高速で北上して富山の宇奈月温泉へ。&#xA;晩ご飯はホテルのビュッフェ。&lt;/p&gt;&#xA;&lt;h2 id=&#34;二日目&#34;&gt;&#xA;  二日目&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%ba%8c%e6%97%a5%e7%9b%ae&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;朝ご飯もホテルのビュッフェ。&lt;/p&gt;&#xA;&lt;p&gt;お昼は新潟で燕三条ラーメン。&#xA;背脂チャッチャ系で旨い。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/tsubame_sanjo_ramen.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;その足で弥彦神社に行った。&#xA;ここは二礼四拍手一礼で参拝するという結構珍しい神社だった。&#xA;こういう大きめの神社は、鳥居から社までの道も神聖な感じがして良かった。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/yahiko_shrine.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;そのまま下道で山形を通り越して秋田の田沢湖温泉へ。&#xA;途中まで日本海パークラインを、佐渡島を眺めながら走っていた。&#xA;距離があったのでだいぶ遅くなった + 北の方ということで、とても寒かった。&#xA;大阪にいた時の気温しか想定していなかったので大分薄着だったのが災いした。&#xA;本当に辛かった。&lt;/p&gt;&#xA;&lt;h2 id=&#34;三日目&#34;&gt;&#xA;  三日目&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%b8%89%e6%97%a5%e7%9b%ae&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;秋田の山を越えて青森に入る。&#xA;秋田の山はまだ雪が残っていて辛かった。&lt;/p&gt;&#xA;&lt;p&gt;青森に入ってすぐにスウェットパーカーを買った。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/akita_mountain.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;青森では煮干しラーメンを食す。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/niboshi_ramen.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;廣田神社に参拝した。&#xA;ここは疫病の神様を祀ってあるとかなんとか。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/hirota_shrine.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;そのまま浅虫温泉で一泊。&lt;/p&gt;&#xA;&lt;h2 id=&#34;四日目&#34;&gt;&#xA;  四日目&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%9b%9b%e6%97%a5%e7%9b%ae&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;予定通り大間崎へ向かう。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/omazaki.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;大間はマグロの漁獲量が日本一なので、昼飯にマグロ丼を食べる。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/magurodon.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;そのまま下道を走って岩手へ。&#xA;岩手では盛岡冷麺を頂く。&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/morioka_remen.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;そのまま瀬美温泉へ。&lt;/p&gt;&#xA;&lt;h2 id=&#34;五日目&#34;&gt;&#xA;  五日目&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%ba%94%e6%97%a5%e7%9b%ae&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;翌日から二、三日雨が降るとのことだったので、この日中に大阪に帰ろうとする。&#xA;その距離1,000km。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「ソフトウェア見積もり」読了</title>
      <link>https://t45k.github.io/blog/software_estimation/</link>
      <pubDate>Mon, 27 Mar 2023 22:28:20 +0900</pubDate>
      <guid>https://t45k.github.io/blog/software_estimation/</guid>
      <description>&lt;p&gt;Steve McConnellの「ソフトウェア見積もり」を読んだ。&lt;/p&gt;&#xA;&lt;table border=&#34;0&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div style=&#34;border:1px solid #95a5a6;border-radius:.75rem;background-color:#FFFFFF;width:504px;margin:0px;padding:5px;text-align:center;overflow:hidden;&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td style=&#34;width:240px&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F4149660%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;  &gt;&lt;img src=&#34;https://hbb.afl.rakuten.co.jp/hgb/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?me_id=1213310&amp;item_id=11917813&amp;pc=https%3A%2F%2Fthumbnail.image.rakuten.co.jp%2F%400_mall%2Fbook%2Fcabinet%2F8910%2F89100522.jpg%3F_ex%3D240x240&amp;s=240x240&amp;t=picttext&#34; border=&#34;0&#34; style=&#34;margin:2px&#34; alt=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34; title=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34;&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style=&#34;vertical-align:top;width:248px;&#34;&gt;&lt;p style=&#34;font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px;word-wrap:break-word&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F4149660%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;  &gt;ソフトウェア見積り 人月の暗黙知を解き明かす [ スティーヴ・マコネル ]&lt;/a&gt;&lt;br&gt;&lt;span &gt;価格：3,740円（税込、送料無料)&lt;/span&gt; &lt;span style=&#34;color:#BBB&#34;&gt;(2023/3/27時点)&lt;/span&gt;&lt;/p&gt;&lt;div style=&#34;margin:10px;&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F4149660%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;  &gt;&lt;img src=&#34;https://static.affiliate.rakuten.co.jp/makelink/rl.svg&#34; style=&#34;float:left;max-height:27px;width:auto;margin-top:0&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F4149660%2F%3Fscid%3Daf_pc_bbtn&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ==&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;  &gt;&lt;div style=&#34;float:right;width:41%;height:27px;background-color:#bf0000;color:#fff!important;font-size:12px;font-weight:500;line-height:27px;margin-left:1px;padding: 0 12px;border-radius:16px;cursor:pointer;text-align:center;&#34;&gt;楽天で購入&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;br&gt;&lt;p style=&#34;color:#000000;font-size:12px;line-height:1.4em;margin:5px;word-wrap:break-word&#34;&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;p&gt;普段の業務では特に締め切りが存在せず、スケジュールを意識してプロジェクトをやることがあまりないので、&#xA;自分で見積もりをやってみたいなぁと思ったのがきっかけ。&lt;/p&gt;&#xA;&lt;p&gt;内容は一プログラマから専門家のためのものまで多岐に渡るが、現場で使える知識の提供に一貫している。&lt;/p&gt;&#xA;&lt;p&gt;ところどころ読み飛ばしたが、特に参考になったトピックは以下の通り&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;範囲で見積もる&lt;/li&gt;&#xA;&lt;li&gt;最初の方の見積もりほどブレる&lt;/li&gt;&#xA;&lt;li&gt;「判断」より「計測」と「計算」が重要&lt;/li&gt;&#xA;&lt;li&gt;過去のプロジェクトから見積もる&lt;/li&gt;&#xA;&lt;li&gt;規模で見積もる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;本自体は20年前近くのものなので、スクラムについては触れられていないが、反復的な開発に関する言及はある。&lt;/p&gt;&#xA;&lt;p&gt;とりあえずラフなところから試してみたいなと思った。&lt;/p&gt;&#xA;&lt;p&gt;あと、参考文献としてTSEとかISTとかの論文を引いてるのは凄い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>シン・仮面ライダーを見た話</title>
      <link>https://t45k.github.io/blog/shin-kamen-rider/</link>
      <pubDate>Sun, 19 Mar 2023 15:45:40 +0900</pubDate>
      <guid>https://t45k.github.io/blog/shin-kamen-rider/</guid>
      <description>&lt;p&gt;シン・仮面ライダーを見たので感想。&lt;/p&gt;&#xA;&lt;p&gt;本当に半年以上待った作品だったが、かなりの怪作だったので結構呆気に取られている。&lt;/p&gt;&#xA;&lt;h2 id=&#34;良かった点&#34;&gt;&#xA;  良かった点&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%89%af%e3%81%8b%e3%81%a3%e3%81%9f%e7%82%b9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;過剰なまでの原作リスペクト。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;特にクモオーグ戦。ほとんどテレビ版の1話。&lt;/li&gt;&#xA;&lt;li&gt;変身シーンも。&lt;/li&gt;&#xA;&lt;li&gt;ちゃんとショッカーライダーも出てきた。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;カッコ良い変身シーンと戦闘シーン。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;主にジャンプアクションとライダーキック。&lt;/li&gt;&#xA;&lt;li&gt;本当に震えた。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;仮面ライダーが人間ならざる物になってしまったことに対する葛藤をしっかり描いていたところ。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;テレビ版だとナレーションで流されたりしてたので。&lt;/li&gt;&#xA;&lt;li&gt;庵野はこの辺をやりたかったんやろうなぁと。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;令和らしい本郷猛。&lt;/li&gt;&#xA;&lt;li&gt;一文字隼人の良い意味での性格の軽さ。&lt;/li&gt;&#xA;&lt;li&gt;ちゃんとおやっさんと滝が出てきた。&lt;/li&gt;&#xA;&lt;li&gt;綺麗なラスト。&lt;/li&gt;&#xA;&lt;li&gt;浜辺美波。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;微妙だった点&#34;&gt;&#xA;  微妙だった点&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%be%ae%e5%a6%99%e3%81%a0%e3%81%a3%e3%81%9f%e7%82%b9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;シナリオはちょい微妙か。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;未だに人類補完計画が擦られてる。&lt;/li&gt;&#xA;&lt;li&gt;一般ウケするのはシンゴジ &amp;gt; シンマン &amp;gt; シンライダーかな。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;本郷猛の性格は原作好きだと受け入れられない人もいそう。&lt;/li&gt;&#xA;&lt;li&gt;CG。個人的にはちょっとがっかりした。&lt;/li&gt;&#xA;&lt;li&gt;若干スプラッタ。&lt;/li&gt;&#xA;&lt;li&gt;下級戦闘員との戦闘シーンが少ない。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;クモオーグ戦みたいなのをもうちょい見たかった。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;総合&#34;&gt;&#xA;  総合&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b7%8f%e5%90%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;少なくとも庵野秀明か初代仮面ライダーのどちらかが好きじゃないと楽しめないかも。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「ちょうぜつソフトウェア開発入門」読了</title>
      <link>https://t45k.github.io/blog/chozetsu_software_design_introduction/</link>
      <pubDate>Sun, 12 Feb 2023 16:42:09 +0900</pubDate>
      <guid>https://t45k.github.io/blog/chozetsu_software_design_introduction/</guid>
      <description>&lt;p&gt;ひさてるさん著の「ちょうぜつソフトウェア開発入門」を読んだ。&#xA;ひさてるさんは Twitter で「#ちょうぜつエンジニアめもりーちゃん」のハッシュタグで不定期に漫画を投稿している人で、そのシニカルな内容が個人的には気に入っている。&lt;/p&gt;&#xA;&lt;p&gt;副題に「PHP で理解するオブジェクト指向の活用」とある通り、サンプルコードは PHP で書かれている。&#xA;内容は、Clean Architecture と TDD に対するひさてるさんの解釈という感じがした。&#xA;また、オブジェクト指向それ自体に意味はなく、それを活用した得られるもの（SOLID、CA、TDD）が大事なのだと述べている。&lt;/p&gt;&#xA;&lt;p&gt;こういう著者の考えがダイレクトに出る本は、読み物としても楽しめるので良いなと感じた。&#xA;また、最終章の「アジャイル開発」は必読。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「読みやすいコードのガイドライン」読了</title>
      <link>https://t45k.github.io/blog/readable_code_guideline/</link>
      <pubDate>Sun, 12 Feb 2023 16:23:45 +0900</pubDate>
      <guid>https://t45k.github.io/blog/readable_code_guideline/</guid>
      <description>&lt;p&gt;LINE に勤めている石川さんが書いた「読みやすいコードのガイドライン」を読んだ。&#xA;副題の「持続可能なソフトウェア開発のために」に完全に同意。&#xA;継続的なソフトウェア開発には読みやすいコードが必須。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://books.rakuten.co.jp/rb/17283015/?l-id=search-c-item-text-01&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://books.rakuten.co.jp/rb/17283015/?l-id=search-c-item-text-01&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;「リーダブルコード」などと比べて、少し突っ込んだ内容が多いような印象。&#xA;状態遷移や依存関係などの内容は、コードを書き始めたばかりの人には難しいかもしれないが、個人的にはとても勉強になった（特に 7 種類の結合度については初耳だった）。&#xA;コードレビューの仕方やコメントの書き方といった、取り上げられている書籍がとても少ない（と思う）事柄についても触れられていて、一読の価値があると感じた。&#xA;これらに関してはかなり現場に依存するので完全に同じことをするのは難しそうだが、こういう感じでやってて上手く回っているんだなぁと感じた。&lt;/p&gt;&#xA;&lt;p&gt;内容自体もコンパクトにまとまっており、読みやすかった。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「Death Stranding」をプレイした話</title>
      <link>https://t45k.github.io/blog/death_stranding/</link>
      <pubDate>Sat, 28 Jan 2023 17:16:09 +0900</pubDate>
      <guid>https://t45k.github.io/blog/death_stranding/</guid>
      <description>&lt;p&gt;Epic でセールになってた Death Stranding（以降、デススト）をクリアしたので感想を書きます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;デスストとは&#34;&gt;&#xA;  デスストとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%87%e3%82%b9%e3%82%b9%e3%83%88%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;デスストは 2019 年に PS4 向けに発売されたゲームです。&#xA;現在では完全版であるディレクターズカット版が PS5、PC 向けにも出ています。&lt;/p&gt;&#xA;&lt;p&gt;制作はメタルギアシリーズを作った小島監督率いるコジマプロダクションであり、&#xA;小島監督が KONAMI から独立した後、初めて作ったゲームでもあります。&lt;/p&gt;&#xA;&lt;p&gt;自分は MGS シリーズが好きで（1~5、PW、MPO 辺りはプレイした）、&#xA;その小島監督が作った新作ということで発売当初からデスストに注目していましたが、&#xA;PS4 を持っておらず遊ぶことができないままでした。&#xA;しかし今回 Epic Store で無料セールをやっていたため、プレイするに至りました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;感想&#34;&gt;&#xA;  感想&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%84%9f%e6%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;最高でした。&#xA;久々にストーリーがしっかりしたアクションゲームをやったのですが（2015 年の MGS5 以来？）、&#xA;やはりストーリーがあるゲームは先に進みたいと思わせる強い中毒性があるなと再認識しました。&#xA;夜更かしからの寝坊が増えました。&lt;/p&gt;&#xA;&lt;p&gt;荷物を運ぶことがメインのゲームなので人によっては退屈に思うかもしれませんが、自分は最後まで楽しむことができました。&#xA;広大なオープンワールドでルートを考えたり、アイテムを使って有利に進めたり、他の人の建設物を使うことで繋がりを感じたり、多くのことができます。&lt;/p&gt;&#xA;&lt;p&gt;ストーリーを進めるにつれ、配達を楽にするアイテムが公開されていくので、できることの幅が広がっていくのを楽しめました。&#xA;特に、アクティブスケルトンを初めて装着した時は、その快適さに感動しました。&lt;/p&gt;&#xA;&lt;p&gt;荷物の配達がメインなのでそこまで多くの武器は出てこないだろうなと思っていましたが、想像以上にガンアクションが多かったです。&#xA;ただし、狙うキーとトリガーキーが他のキーと重複しているので、設定は事前にいじっておいた方が良さそうです。&lt;/p&gt;&#xA;&lt;p&gt;初見のうちはやることが多くて面食らいました。&#xA;特に、BT の座礁地帯に入った時はしゃがみと歩きと息止めを同時にやっていたので指がこんがらがりました。&lt;/p&gt;&#xA;&lt;p&gt;MGS5 と同じ Fox Engine が使われているため、ところどころ MGS5 で見たことがある表現が出てきました。&#xA;時雨で荷物が劣化していくときのエフェクト、BT の座標地帯に乗り込んだときの時間停止等。&#xA;また、ボス戦では MGS5 でのスカルズの白刃どりや、MGS4 の殴り合いみたいなアクションもあり、懐かしかったです。&lt;/p&gt;&#xA;&lt;p&gt;ノーマンリーダスがカッコよかった。&lt;/p&gt;&#xA;&lt;iframe src=&#34;https://store.steampowered.com/widget/1850570/665843/&#34; frameborder=&#34;0&#34; width=&#34;646&#34; height=&#34;190&#34;&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>WF-1000XM4を修理に出した話</title>
      <link>https://t45k.github.io/blog/wf-1000xm4_repair/</link>
      <pubDate>Sat, 14 Jan 2023 17:56:18 +0900</pubDate>
      <guid>https://t45k.github.io/blog/wf-1000xm4_repair/</guid>
      <description>&lt;h2 id=&#34;結論&#34;&gt;&#xA;  結論&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b5%90%e8%ab%96&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;WF-1000XM4 の「片方（右側？）だけ異様に充電が減る」問題は、保証期限切れでも無料で新品に交換してもらえる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;購入した時期&#34;&gt;&#xA;  購入した時期&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%b3%bc%e5%85%a5%e3%81%97%e3%81%9f%e6%99%82%e6%9c%9f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;MNG した写真の日付を見た限り 2021 年の 8 月末に購入。&#xA;ヨドバシで買ったが、保証期間の延長等はしていなかった。&lt;/p&gt;&#xA;&lt;h2 id=&#34;症状&#34;&gt;&#xA;  症状&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%97%87%e7%8a%b6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;イヤホンの右側だけ異様に充電が切れるのが早い。&#xA;具体的には、3、40 分程度で 100%から 0%になる。&#xA;ちなみに、左側は 80%程度残っている。&lt;/p&gt;&#xA;&lt;p&gt;くわえて、どれだけ充電しても 90%までしか充電されない問題も頻繁に起きた（左右問わず）。&lt;/p&gt;&#xA;&lt;p&gt;大体 2022 年の秋ごろからこの問題が見られるようになってきた。&#xA;症状が出始めた時点で保証期間は過ぎていたので、しばらく様子見をしていた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;対処法&#34;&gt;&#xA;  対処法&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%af%be%e5%87%a6%e6%b3%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;同様の問題がないか検索してみたところ、わりかし多くのユーザも同じ症状を抱えていたため、修理を依頼することに決めた。&#xA;SONY では、修理希望者向けのチャットボットを用意しているので、そこ経由から修理を依頼した。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.sony.jp/support/inquiry.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.sony.jp/support/inquiry.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;本来であれば修理費は 1 万円程度だが、SONY 側もこの問題を認識しているらしく、&#xA;一度 SONY が預かり、無料修理対象であれば無償で、そうでなければ修理費を依頼者に伝えた上で修理するかを決めるという流れらしい。&lt;/p&gt;&#xA;&lt;p&gt;イヤホン回収は SONY が回収サービスを手配してくれるため、回収業者が来たらイヤホンをケース込みで渡すだけで良かった。&lt;/p&gt;&#xA;&lt;h2 id=&#34;結果&#34;&gt;&#xA;  結果&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b5%90%e6%9e%9c&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;無事無料修理対象だったらしく、イヤホンが SONY に届いてから 2 日ほどで修理が完了し、本日返ってきた。&#xA;回収に来てから 1 週間ほど。&#xA;ありがとうございました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2022年の振り返り</title>
      <link>https://t45k.github.io/blog/retrospective_2022/</link>
      <pubDate>Sat, 31 Dec 2022 09:39:23 +0900</pubDate>
      <guid>https://t45k.github.io/blog/retrospective_2022/</guid>
      <description>&lt;p&gt;2022年を振り返る。&lt;/p&gt;&#xA;&lt;h2 id=&#34;総評&#34;&gt;&#xA;  総評&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b7%8f%e8%a9%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;楽しく仕事ができた。&#xA;特に、チーム内でやっていることをチーム外に啓蒙するという活動をしてて、それが評価されたという感じ。&lt;/p&gt;&#xA;&lt;p&gt;先輩、後輩とのつながりも増えて申し分ない1年間だった。&lt;/p&gt;&#xA;&lt;h2 id=&#34;仕事&#34;&gt;&#xA;  仕事&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bb%95%e4%ba%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1月----3月&#34;&gt;&#xA;  1月 &amp;ndash; 3月&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#1%e6%9c%88----3%e6%9c%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;主にインターンのメンターとJenkinsおじさんをやってた&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;インターンのメンターは、インターンの子が超絶優秀だったのであまりやることがなかった。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;逆に色々教えてもらえて良かった。&lt;/li&gt;&#xA;&lt;li&gt;リリースが間に合わなかったのはシンプルに申し訳なかった。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;JenkinsはIaaS環境に載せてたJenkinsがあまりにも使い物にならなくなってきたので、k8s環境に載せ替えた。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;- 一つのコンテナに全ての機能を突っ込む&lt;br&gt;- コンテナにcredentialを突っ込む&lt;br&gt;&lt;br&gt;みたいなカスみたいなアンチパターンから、&lt;br&gt;&lt;br&gt;- 機能ごとにコンテナを分割して、ポートで通信する&lt;br&gt;- credentialはコンテナに持たせず、都度Jenkins側から渡す&lt;br&gt;&lt;br&gt;に改善できて良い&lt;/p&gt;&amp;mdash; task@血圧・尿酸 (@getupmax) &lt;a href=&#34;https://twitter.com/getupmax/status/1496688678546321409?ref_src=twsrc%5Etfw&#34;&gt;February 24, 2022&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;個人的には大満足なマイグレーション。&lt;/li&gt;&#xA;&lt;li&gt;ちなみにこの話をこの1年間擦り続けてる。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;4月----6月&#34;&gt;&#xA;  4月 &amp;ndash; 6月&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#4%e6%9c%88----6%e6%9c%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;この辺りから、趣味で他のチームのコードレビューにも参加するようになる。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;啓蒙活動。&lt;/li&gt;&#xA;&lt;li&gt;特に汚いソースコードに関してコメントすることが多かった。この辺は個人の思想の押し付けになってたかも。&lt;/li&gt;&#xA;&lt;li&gt;最終的に綺麗なソースコードを書こうとしても設計が崩壊してると終わりなことに気づいた。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;7月----9月&#34;&gt;&#xA;  7月 &amp;ndash; 9月&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#7%e6%9c%88----9%e6%9c%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Java8環境に耐えきれなくなり、Java17にアプデするプロジェクトを勝手に立ち上げる。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PDMに話通して、スケジュール設定 → 実装 → テスト → リリースまでを自分でできたのは良い経験だったなと。&lt;/li&gt;&#xA;&lt;li&gt;終わった後にLT会でナレッジを共有したり、他のチームのJava17導入に噛んだりできて良かったなと。&lt;/li&gt;&#xA;&lt;li&gt;チームに自動E2Eテストを書く文化が根付いていたので、マイグレーションがかなりやりやすかった。ありがたい。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;夏のインターンのメンター&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1週間&lt;/li&gt;&#xA;&lt;li&gt;自分も夏のインターンからの採用だったので、その辺も踏まえて会社に貢献できたらという気持ち。&lt;/li&gt;&#xA;&lt;li&gt;どっちかというと1日の終わりのレビューがメインのお仕事でした。&lt;/li&gt;&#xA;&lt;li&gt;最終的に優勝してた。すごい。&lt;/li&gt;&#xA;&lt;li&gt;その辺の話はこちら&lt;br&gt;&#xA;&lt;a href=&#34;https://commerce-engineer.rakuten.careers/entry/workstyle/0025&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://commerce-engineer.rakuten.careers/entry/workstyle/0025&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;以降、インターン経験者かつメンターで優勝みたいな経歴もあって新卒向けイベントみたいなのに呼ばれる機会が増えた。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;10月----12月&#34;&gt;&#xA;  10月 &amp;ndash; 12月&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#10%e6%9c%88----12%e6%9c%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;複数チームにまたがって改善活動をやっていこうぜ的なチームが発足。&#xA;-「自チームの改善」 + 「コードレビューを通した他チームへの貢献」みたいなところに目をつけれられて、そのチームに放り込まれる。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JJUG CCC 2022 Fallに参加した話</title>
      <link>https://t45k.github.io/blog/jjug_ccc_2022_fall/</link>
      <pubDate>Sat, 03 Dec 2022 17:36:13 +0900</pubDate>
      <guid>https://t45k.github.io/blog/jjug_ccc_2022_fall/</guid>
      <description>&lt;p&gt;2022 年 11 月 27 日日曜日に開催された JJUG CCC 2022 Fall に参加しました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://jjug.doorkeeper.jp/events/143914&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;リンク&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;jjug&#34;&gt;&#xA;  JJUG&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#jjug&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;JJUG は&amp;quot;Japan Java User Group&amp;quot;を指します。&#xA;日本最大の Java のコミュニティです。&#xA;JJUG CCC は毎年 2 回、春と秋に開催されるイベントで、&#xA;様々な参加者が Java に関する技術や事例などの紹介を行います。&lt;/p&gt;&#xA;&lt;p&gt;参加者の中には、普段から Java コミュニティで活躍されていられる方も多くいらっしゃります。&lt;/p&gt;&#xA;&lt;p&gt;今回僕は聴講側として参加しました。&#xA;以下、参加したセッションとそれぞれの感想を書いていきます。&lt;/p&gt;&#xA;&lt;h3 id=&#34;aws-環境における-spring-boot-アプリケーションの-cicd-を-circleci-で構築した話&#34;&gt;&#xA;  AWS 環境における Spring Boot アプリケーションの CI/CD を CircleCI で構築した話&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#aws-%e7%92%b0%e5%a2%83%e3%81%ab%e3%81%8a%e3%81%91%e3%82%8b-spring-boot-%e3%82%a2%e3%83%97%e3%83%aa%e3%82%b1%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e3%81%ae-cicd-%e3%82%92-circleci-%e3%81%a7%e6%a7%8b%e7%af%89%e3%81%97%e3%81%9f%e8%a9%b1&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;株式会社 Red Frasco の篠原さんのセッション。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/red_frasco/cdwocirclecidegou-zhu-sitahua&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://speakerdeck.com/red_frasco/cdwocirclecidegou-zhu-sitahua&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;現在開発中のサービスで、&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CI/CD に Circle CI を&lt;/li&gt;&#xA;&lt;li&gt;実行環境に AWS を&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;利用した事例について紹介されていました。&lt;/p&gt;&#xA;&lt;p&gt;個人的には CI/CD に興味があったためこのセッションに参加しました。&lt;/p&gt;&#xA;&lt;p&gt;Java (Spring) に関連した内容は少なかったですが、Circle CI で AWS にアプリをデプロイする際に注意すべきこと、おすすめの方法等を紹介されており、今後これらのシステムを使う際には参考になりそうだなと感じました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「現場で役立つシステム設計の原則」読了</title>
      <link>https://t45k.github.io/blog/system_design_principle/</link>
      <pubDate>Sun, 16 Oct 2022 19:33:26 +0900</pubDate>
      <guid>https://t45k.github.io/blog/system_design_principle/</guid>
      <description>&lt;p&gt;現場で役立つシステム設計の原則を読んだ。&lt;/p&gt;&#xA;&lt;table border=&#34;0&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div style=&#34;border:1px solid #95a5a6;border-radius:.75rem;background-color:#FFFFFF;width:504px;margin:0px;padding:5px;text-align:center;overflow:hidden;&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td style=&#34;width:240px&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F15017530%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;  &gt;&lt;img src=&#34;https://hbb.afl.rakuten.co.jp/hgb/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?me_id=1213310&amp;item_id=18637464&amp;pc=https%3A%2F%2Fthumbnail.image.rakuten.co.jp%2F%400_mall%2Fbook%2Fcabinet%2F0877%2F9784774190877.jpg%3F_ex%3D240x240&amp;s=240x240&amp;t=picttext&#34; border=&#34;0&#34; style=&#34;margin:2px&#34; alt=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34; title=&#34;[商品価格に関しましては、リンクが作成された時点と現時点で情報が変更されている場合がございます。]&#34;&gt;&lt;/a&gt;&lt;/td&gt;&lt;td style=&#34;vertical-align:top;width:248px;&#34;&gt;&lt;p style=&#34;font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px;word-wrap:break-word&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F15017530%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;  &gt;現場で役立つシステム設計の原則 変更を楽で安全にするオブジェクト指向の実践技法 [ 増田亨 ]&lt;/a&gt;&lt;br&gt;&lt;span &gt;価格：3234円（税込、送料無料)&lt;/span&gt; &lt;span style=&#34;color:#BBB&#34;&gt;(2022/10/16時点)&lt;/span&gt;&lt;/p&gt;&lt;div style=&#34;margin:10px;&#34;&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F15017530%2F&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ%3D%3D&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;  &gt;&lt;img src=&#34;https://static.affiliate.rakuten.co.jp/makelink/rl.svg&#34; style=&#34;float:left;max-height:27px;width:auto;margin-top:0&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://hb.afl.rakuten.co.jp/ichiba/2c4e7c40.9ea290f6.2c4e7c41.04aec2a1/?pc=https%3A%2F%2Fitem.rakuten.co.jp%2Fbook%2F15017530%2F%3Fscid%3Daf_pc_bbtn&amp;link_type=picttext&amp;ut=eyJwYWdlIjoiaXRlbSIsInR5cGUiOiJwaWN0dGV4dCIsInNpemUiOiIyNDB4MjQwIiwibmFtIjoxLCJuYW1wIjoicmlnaHQiLCJjb20iOjEsImNvbXAiOiJkb3duIiwicHJpY2UiOjEsImJvciI6MSwiY29sIjoxLCJiYnRuIjoxLCJwcm9kIjowLCJhbXAiOmZhbHNlfQ==&#34; target=&#34;_blank&#34; rel=&#34;nofollow sponsored noopener&#34; style=&#34;word-wrap:break-word;&#34;  &gt;&lt;div style=&#34;float:right;width:41%;height:27px;background-color:#bf0000;color:#fff!important;font-size:12px;font-weight:500;line-height:27px;margin-left:1px;padding: 0 12px;border-radius:16px;cursor:pointer;text-align:center;&#34;&gt;楽天で購入&lt;/div&gt;&lt;/a&gt;&lt;/div&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;br&gt;&lt;p style=&#34;color:#000000;font-size:12px;line-height:1.4em;margin:5px;word-wrap:break-word&#34;&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;p&gt;「ドメインモデルを設計して、それを中心にプログラミングしよう」という内容だった。&lt;/p&gt;&#xA;&lt;p&gt;よく見かける依存性逆転の原則を中心としたオニオンアーキテクチャではなく、&#xA;三層アーキテクチャ（コントローラ層、サービス層、データソース層）にドメインモデルを組み込む話を中心にしていたのが特徴的だった。&#xA;現在自分のチームも三層アーキテクチャ+トランザクションスクリプト的な設計が主流になっていて、個人的には変更しづらさを感じていたので、この本で紹介されている方法を取り入れられれば良いなぁと感じた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「達人が教えるWebパフォーマンスチューニング」読了</title>
      <link>https://t45k.github.io/blog/web_perfomance_tuning/</link>
      <pubDate>Sun, 16 Oct 2022 19:27:18 +0900</pubDate>
      <guid>https://t45k.github.io/blog/web_perfomance_tuning/</guid>
      <description>&lt;p&gt;2022 年の ISUCON に備えて「達人が教える Web パフォーマンスチューニング」を読んだ。&lt;/p&gt;&#xA;&lt;p&gt;内容としては、web サーバや DB の負荷計測からチューニングに関して、ISUCON で使えるテクから現場で活用できる技術まで紹介していた。&#xA;パフォチュー経験がない状態で挑む ISUCON だったので、こういった本があってありがたかった。&#xA;残念ながら十分な時間をとることができず、全ての内容を消化できなかったが、何となく何をしたら良いかわかるくらいには持っていけたのでよかった。&#xA;なお、本番。&lt;/p&gt;&#xA;&lt;p&gt;来年また読み直して、ISUCON に再挑戦したい。&lt;/p&gt;</description>
    </item>
    <item>
      <title>競プロでKotlinを使わない理由</title>
      <link>https://t45k.github.io/blog/why_not_kotlin_in_kyopuro/</link>
      <pubDate>Mon, 04 Jul 2022 22:38:27 +0900</pubDate>
      <guid>https://t45k.github.io/blog/why_not_kotlin_in_kyopuro/</guid>
      <description>&lt;p&gt;仕事や趣味でソースコードを書く時は Kotlin を使っているが、競プロでは Java を使っている。&lt;/p&gt;&#xA;&lt;p&gt;ちょくちょく Kotlin に移行することを考えるのだが、その度に色々な理由で断念するので、その理由を書き出してみる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ビット演算子がない&#34;&gt;&#xA;  ビット演算子がない&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%93%e3%83%83%e3%83%88%e6%bc%94%e7%ae%97%e5%ad%90%e3%81%8c%e3%81%aa%e3%81%84&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;多分これが一番大きい。&lt;/p&gt;&#xA;&lt;p&gt;競プロではビット演算をする場面がたびたびある（ビット全探索とか）。&lt;/p&gt;&#xA;&lt;p&gt;Java では&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;や&lt;code&gt;|&lt;/code&gt;などが使えるが、Kotlin では&lt;code&gt;lhs&lt;/code&gt;や&lt;code&gt;or&lt;/code&gt;などの中置関数を使う必要があり、可読性が大きく下がる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;配列宣言が面倒臭い&#34;&gt;&#xA;  配列宣言が面倒臭い&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%85%8d%e5%88%97%e5%ae%a3%e8%a8%80%e3%81%8c%e9%9d%a2%e5%80%92%e8%87%ad%e3%81%84&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;競プロの性質上、配列に対してプリミティブな操作を行う場面が多くあるため、配列宣言はなるべく簡潔に済ませたい。&lt;/p&gt;&#xA;&lt;p&gt;Java では&lt;code&gt;int[]&lt;/code&gt;のように宣言できるが、Kotlin では&lt;code&gt;Array&amp;lt;Int&amp;gt;&lt;/code&gt;のように宣言する必要がある。&lt;/p&gt;&#xA;&lt;p&gt;また、一次元配列では特に問題ないのだが、多次元配列（競プロでは三次元配列を書く場面が多々ある）になると Kotlin の記法は特に面倒になる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;null-チェックが厳しい&#34;&gt;&#xA;  null チェックが厳しい&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#null-%e3%83%81%e3%82%a7%e3%83%83%e3%82%af%e3%81%8c%e5%8e%b3%e3%81%97%e3%81%84&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;仕事で使う分にはありがたいが、競プロのような使い捨てるコードに対しては意義が薄れる感じがする。&lt;/p&gt;&#xA;&lt;p&gt;とくに、Map のキーの存在が確定している場合でも何らかのエスケープが発生する。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;!!&lt;/code&gt;演算子で無理やり非 null 型に変換することもできるが、個人の信条からあまり使いたくない（&lt;code&gt;!!&lt;/code&gt;演算子の利用に慣れたくない）。&lt;/p&gt;&#xA;&lt;h2 id=&#34;トラディショナル-for-が使えない&#34;&gt;&#xA;  トラディショナル for が使えない&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%88%e3%83%a9%e3%83%87%e3%82%a3%e3%82%b7%e3%83%a7%e3%83%8a%e3%83%ab-for-%e3%81%8c%e4%bd%bf%e3%81%88%e3%81%aa%e3%81%84&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Kotlin の for 文はイミュータブルな変数を使った記法なので、トリッキーでアドホックな for 文を書きにくいという欠点がある。&#xA;例えば、添字の&lt;code&gt;i&lt;/code&gt;を条件によって更新したりしなかったりする場合など。&lt;/p&gt;&#xA;&lt;h2 id=&#34;暗黙の型変換がない&#34;&gt;&#xA;  暗黙の型変換がない&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9a%97%e9%bb%99%e3%81%ae%e5%9e%8b%e5%a4%89%e6%8f%9b%e3%81%8c%e3%81%aa%e3%81%84&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;int&lt;/code&gt;と&lt;code&gt;long&lt;/code&gt;で足し算したり、&lt;code&gt;char&lt;/code&gt;同士の引き算の結果を&lt;code&gt;int&lt;/code&gt;にしたりするのが面倒臭い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>シン・ウルトラマンを見た話</title>
      <link>https://t45k.github.io/blog/shin-ultraman/</link>
      <pubDate>Sun, 12 Jun 2022 15:48:22 +0900</pubDate>
      <guid>https://t45k.github.io/blog/shin-ultraman/</guid>
      <description>&lt;p&gt;シン・ウルトラマンを 3 回も観てしまったので、感想を書き連ねておく。&lt;/p&gt;&#xA;&lt;p&gt;全体的な感想としては、作り手（主に監修）が本当に自分が好きなものを詰め込んでいて、それがオタクに刺さりまくる感じ。&lt;/p&gt;&#xA;&lt;p&gt;無印へのリスペクトがすごく、&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1 回目は無印マンを全然知らない状態で楽しむ&lt;/li&gt;&#xA;&lt;li&gt;家に帰ってから関連する無印マンの情報を漁る&lt;/li&gt;&#xA;&lt;li&gt;2 回目以降はその知識と比較しながら楽しむ&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;みたいに 2 度美味しく頂ける。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ウルトラマン&#34;&gt;&#xA;  ウルトラマン&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%a6%e3%83%ab%e3%83%88%e3%83%a9%e3%83%9e%e3%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;今作のウルトマンは、無印マンと違って&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;カラータイマーがない&lt;/li&gt;&#xA;&lt;li&gt;背びれがない&lt;/li&gt;&#xA;&lt;li&gt;目の黒点がない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;という特徴がある。&lt;/p&gt;&#xA;&lt;p&gt;そもそも、本来のウルトラマンの造形にそれらはなく、単に放送上の制約で無印には付けざるを得なかったという事情がある&#xA;（カラータイマーは白黒放送でも弱っていることを見せるため、背びれはファスナーを隠すため、目の黒点は覗き穴）。&lt;/p&gt;&#xA;&lt;p&gt;今作では、庵野のこだわりから、本来のウルトラマンのデザインを表現できていると思った。&#xA;色合いもマットなシルバーからメタリックなそれになっていて、こだわりを感じた。&lt;/p&gt;&#xA;&lt;p&gt;また、弱ると色が薄くなるという表現も良かった。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ネロンガ戦&#34;&gt;&#xA;  ネロンガ戦&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%8d%e3%83%ad%e3%83%b3%e3%82%ac%e6%88%a6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;スペシウム光線の威力がよく分かる回。&lt;/p&gt;&#xA;&lt;p&gt;ちなみに、PV でここのスペシウム光線のシーンが取り上げられているが、この時点でウルトラマンのカラーリングは銀一色なため、&#xA;実は PV のシーンは存在しない。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ガボラ戦&#34;&gt;&#xA;  ガボラ戦&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%ac%e3%83%9c%e3%83%a9%e6%88%a6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;赤いウルトラマンが初めて出てくる。&lt;/p&gt;&#xA;&lt;p&gt;冒頭の、飛行ポーズのまま降りてきてキックを決めるシーンはなかなかシュールだった。&lt;/p&gt;&#xA;&lt;p&gt;着地からのいつものポーズ。&lt;/p&gt;&#xA;&lt;p&gt;最後の正拳突きがキレイで少し感動した。誰がアクターやってたんだろう。&lt;/p&gt;&#xA;&lt;p&gt;ちなみに無印では、襟（ドリルの部分）をむしり取るというなかなか暴力的なシーンがある。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ザラブ戦&#34;&gt;&#xA;  ザラブ戦&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%b6%e3%83%a9%e3%83%96%e6%88%a6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ウルトラマン拉致が印象的な回。&lt;/p&gt;&#xA;&lt;p&gt;ウルトラマン拉致や偽ウルトラマン、空中戦など無印リスペクトが盛りだくさん。&#xA;特に、ザラブを思いっきりチョップするも硬くて痛がるシーンまで再現されている。&lt;/p&gt;&#xA;&lt;p&gt;ザラブは、前半身の表面だけが見えており、そこ以外は透明な、なかなかフィギュア化が難しそうな見た目をしている。&lt;/p&gt;&#xA;&lt;p&gt;電磁波を操る能力を持っているが、それを使わずに偽ウルトラマンで暴れてからの人類の同士討ちを狙うという、&#xA;かなり回りくどい方法を取っているように思えた。&lt;/p&gt;&#xA;&lt;p&gt;偽ウルトラマンは無印と比べてかなり似ているが、よく見ると目が角ばっている。&lt;/p&gt;&#xA;&lt;p&gt;ちなみに、この回の変身シーンがめちゃくちゃ格好良い（ウルトラマンが神永を掴んで巨大化する）。&lt;/p&gt;&#xA;&lt;p&gt;神永とザラブが車内で会話するシーン（ザラブの人類同士戦わせる発言に対して、神永が人類はそこまで愚かじゃないと返す）からは、&#xA;現在のウクライナ情勢に対する強烈な皮肉を感じた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;メフィラス戦&#34;&gt;&#xA;  メフィラス戦&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%a1%e3%83%95%e3%82%a3%e3%83%a9%e3%82%b9%e6%88%a6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;メフィラスが無印に比べてめちゃくちゃシュッとしてて驚いた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>デュアルキーボードを試してみた話</title>
      <link>https://t45k.github.io/blog/dual_keyboard/</link>
      <pubDate>Thu, 05 May 2022 21:47:26 +0900</pubDate>
      <guid>https://t45k.github.io/blog/dual_keyboard/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;&#xA;  概要&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%a6%82%e8%a6%81&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;入社して 1 年、肩こりに悩まされるようになったのでデュアルキーボードを試してみた。&lt;/p&gt;&#xA;&lt;h2 id=&#34;肩こり&#34;&gt;&#xA;  肩こり&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%82%a9%e3%81%93%e3%82%8a&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;肩こりには様々な原因があるが、長時間を肩をすぼめたままの姿勢でいることがその一つである。&lt;/p&gt;&#xA;&lt;p&gt;一般的なキーボードは肩幅より狭いため、タイピングのために肩をすぼめた姿勢を取らざるを得なくなる。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/single_keyboard.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;また、肩をすぼめると背中が前に曲がるため、腰に負担がかかる可能性が高まる。&#xA;そのうえ、頭がディスプレイに近くなるため、眼精疲労も溜まりやすくなる。&lt;/p&gt;&#xA;&lt;p&gt;以上の観点から、キーボードをそのまま利用するのは健康上のリスクが大きいと考えられる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;キーボードを変える&#34;&gt;&#xA;  キーボードを変える？&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%ad%e3%83%bc%e3%83%9c%e3%83%bc%e3%83%89%e3%82%92%e5%a4%89%e3%81%88%e3%82%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;以上の背景から、エルゴノミクスキーボードや分離型キーボードが勧められることが多々ある。&#xA;これらのキーボードは多くのメリットがあるものの、以下のデメリットをはらんでいる。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;高価&lt;br&gt;&#xA;これらのキーボードは需要が少ないため、一般的なキーボードと比較して高価になる傾向がある。&#xA;また、すでに好みのキーボードを買っている人にとっては、余計な出費になる。&lt;/li&gt;&#xA;&lt;li&gt;配列&lt;br&gt;&#xA;真ん中の境界できれいに分割されているため、特定のキーを左右両方の手で取るタイピングをする人には厳しい。&lt;/li&gt;&#xA;&lt;li&gt;スイッチの選択肢が少ない&lt;br&gt;&#xA;「青軸が好み」や「静電無接点じゃないとダメ」といったキーボードユーザがいるかも知れないが、そういう人には選択肢が少ない。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;デュアルキーボード&#34;&gt;&#xA;  デュアルキーボード&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%87%e3%83%a5%e3%82%a2%e3%83%ab%e3%82%ad%e3%83%bc%e3%83%9c%e3%83%bc%e3%83%89&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;もう一つの選択肢はデュアルキーボードである。&lt;/p&gt;&#xA;&lt;p&gt;読んで時の如く、2 枚のキーボードを左右に配置して、同時に操作する。&lt;/p&gt;&#xA;&lt;p&gt;両方のキーボードはフルサイズなので配列を気にしなくて良いのと、自分の好きなキーボードを継続して使えるというメリットがある。&lt;/p&gt;&#xA;&lt;p&gt;もう 1 枚のキーボードを買う必要があるため、コストの面では優れているかは分からないが、少なくとも分離型キーボードを新しく買うよりかは安上がりになる。&lt;/p&gt;&#xA;&lt;p&gt;コストを優先する場合、もう一つの選択肢がある。&lt;/p&gt;&#xA;&lt;h2 id=&#34;結論構成&#34;&gt;&#xA;  結論構成&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b5%90%e8%ab%96%e6%a7%8b%e6%88%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;それは、片方はラップトップのキーボードを利用する構成である。&lt;/p&gt;&#xA;&lt;p&gt;最近ではラップトップのみを支給し、それをモニターと繋いで、業務に使うという会社も多いと思う。&lt;/p&gt;&#xA;&lt;p&gt;ラップトップのキーボードを利用することで、すでに外付けキーボードを持っている場合は新たなコストが一切発生しない&#xA;（パンタグラフや薄型のキーボードだと違和感なく利用できる。自分は&lt;a href=&#34;../keychron&#34; &gt;薄型のメカニカルキーボード&lt;/a&gt;を使っていたので大丈夫だった）。&lt;/p&gt;&#xA;&lt;p&gt;この場合、自分の正面にメインモニタ、ラップトップを左側、サブモニタとキーボードを右側に置くのが個人的に最適だと考えている。&lt;/p&gt;&#xA;&lt;p&gt;よくラップトップの上側にモニタを配置する人を見かけるが、これはオススメしない。&lt;/p&gt;&#xA;&lt;p&gt;1 つ目の理由は、人間の目は上下移動よりも左右移動に適しているからである。&#xA;これは、目が横に細長いことからわかる。&#xA;左右方向に見える範囲が広いため、モニタは左右に配置するべきである。&#xA;また、首を動かす場合も、上下に動かすより左右に動かす方が物理的な仕事量が少なくなる。&lt;/p&gt;&#xA;&lt;p&gt;2 つ目の理由は、モニタの上端が目の位置より下になるように高さを調節すべきだからである。&#xA;モニタの上端が目線よりも高い場合、まぶたを大きく開く必要があるため、ドライアイや眼精疲労に繋がることが指摘されている。&#xA;ラップトップの画面の上にモニタを配置した場合、よほど座高が高い人間でない限り、モニタの上端が目線よりも高くなってしまう。&lt;/p&gt;&#xA;&lt;p&gt;以上の理由から、以下が現時点での個人的な結論構成に落ち着いた。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/dual_keyboard.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;肩が死ぬほど開いて気持ち良い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「Code Clone Analysis」読了</title>
      <link>https://t45k.github.io/blog/code_clone_analysis/</link>
      <pubDate>Sat, 26 Feb 2022 12:00:56 +0900</pubDate>
      <guid>https://t45k.github.io/blog/code_clone_analysis/</guid>
      <description>&lt;p&gt;Code Clone Analysis を読みました。&lt;/p&gt;&#xA;&lt;p&gt;コードクローンとはソースコード中の類似したコード片を指し、修正漏れの原因になることからこれまで多くの研究が行われてきました。&#xA;この本は、これまでの研究を総括した学術書です。&#xA;学術書なので英語で書かれており、なおかつ（多分）一般流通はされていません。&#xA;僕の場合は Springer から直接購入したのですが、送料込みで 2 万弱しました&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;読んだ感想ですが、学生時代に理解できなかった論文の内容を理解できたり、知らなかった論文を知れたりして面白かったです。&#xA;英語で書かれているので読むのは苦労しますが、ソフトウェア開発者は読む価値があると思います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「Java言語で学ぶデザインパターン入門」読了</title>
      <link>https://t45k.github.io/blog/design_pattern/</link>
      <pubDate>Sat, 26 Feb 2022 11:53:22 +0900</pubDate>
      <guid>https://t45k.github.io/blog/design_pattern/</guid>
      <description>&lt;p&gt;「Java 言語で学ぶデザインパターン入門」を読み終えました。&#xA;今回は内容を Kotlin で実装してみるということをやっていました。&#xA;&lt;a href=&#34;https://github.com/t45k/designPatternlearning&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;リポジトリ&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;この本自体は割と前からある本なのですが、今回第 3 版が出て内容が新しくなったと聞き、思い切って購入しました。&#xA;4,290 円でした。&#xA;技術書は高い。&lt;/p&gt;&#xA;&lt;p&gt;学生時代は研究室に古い版の本があり、何度か読んだのですが、読むだけでは全然理解できないままでいました。&lt;/p&gt;&#xA;&lt;p&gt;やってみた感想ですが、自分が委譲の強力さを全然理解していなかったことを痛感しました。&#xA;普段は知らないまま使っていたパターン（Spring bean のプロキシなど）を理解する良い機会になりました。&lt;/p&gt;&#xA;&lt;p&gt;一方、やはり Java だと冗長になる部分が多く、Kotlin で再実装すると、コード例よりもすっきり書ける場面が多かったです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC239の解説</title>
      <link>https://t45k.github.io/kyopuro/abc239/</link>
      <pubDate>Sun, 20 Feb 2022 13:56:21 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc239/</guid>
      <description>&lt;p&gt;3 ヶ月ぶりのコンテスト参加。ただし Unrated。&#xA;6 完&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---horizon&#34;&gt;&#xA;  A - Horizon&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---horizon&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---integer-division&#34;&gt;&#xA;  B - Integer Division&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---integer-division&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;X が負かつ 10 で割り切れないときだけ、X/10 に-1 を加える。&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---knight-fork&#34;&gt;&#xA;  C - Knight Fork&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---knight-fork&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;「二つの点から距離 √5 である格子点が存在する」ということは、&#xA;「それぞれの点から距離 √5 である格子点を列挙した時、重なる物が 1 つ以上ある」ということになる。&lt;/p&gt;&#xA;&lt;p&gt;なので、それぞれの点の距離 √5 の格子点の集合に対して、共通集合が存在するかを確認すればよい。&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---prime-sum-game&#34;&gt;&#xA;  D - Prime Sum Game&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---prime-sum-game&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;高橋君が選べる全ての数字に対して、足すことで素数になるような数字を青木君が選べればよい。&lt;/p&gt;&#xA;&lt;p&gt;具体的には、以下のような処理を行う&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;A~B の数字を順番に選んでいく。この数字を i とする&lt;/li&gt;&#xA;&lt;li&gt;i に対して、C~D の数字を足していく。この和を j とする&lt;/li&gt;&#xA;&lt;li&gt;j が素数の場合は、1.で選んだ数字の次の数字で 2.以降を試す。逆に、素数となる j が存在しなければ、その時点で高橋君の勝ちが確定する&lt;/li&gt;&#xA;&lt;li&gt;全ての i に対して j が素数となるような数字を青木君が選べた場合、青木君の勝利&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;e---subtree-k-th-max&#34;&gt;&#xA;  E - Subtree K-th Max&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---subtree-k-th-max&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Ki は高々 20 なので、愚直に計算していけば良い。&#xA;具体的には、各頂点に対して部分木に書かれた値の降順リスト（長さ最大 20）を用意し、以下の手順をボトムアップに繰り返す。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「叙述トリック短編集」読了</title>
      <link>https://t45k.github.io/blog/descriptive_trick/</link>
      <pubDate>Mon, 10 Jan 2022 11:35:22 +0900</pubDate>
      <guid>https://t45k.github.io/blog/descriptive_trick/</guid>
      <description>&lt;p&gt;昨年の 12 月には読み終えていたけど感想書くのサボってた&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;似鳥鶏の「叙述トリック短編集」を読みました。&lt;/p&gt;&#xA;&lt;p&gt;叙述トリックとは、語り手（作者）が（意図的に）情報を隠すことで読者を騙すトリックを指します。&#xA;よくミステリで使われる他のトリック（密室トリックとか）とは違って、&#xA;状況を文字でしか説明できないという特徴を持つ小説特有のトリックなので、結構好きです。&#xA;（そのために、映像化不可能などと言われたりする）&lt;/p&gt;&#xA;&lt;p&gt;叙述トリックは読者に対してフェアではないという批判を受けがちですが、&#xA;この本では題名と冒頭で叙述トリックを利用していることを明示的に示すことで、その批判を回避しています。&lt;/p&gt;&#xA;&lt;p&gt;内容としては、叙述トリックであると身構えながら読んでも意外と真相は分からないもので、&#xA;作者が用意した偽の誘導に引っかかってしまうことも多々ありました。&#xA;最後のあとがきまで楽しめました。&lt;/p&gt;&#xA;&lt;p&gt;次は新版が出たデザパタ本をやっていこうと考えています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>2021年の振り返り</title>
      <link>https://t45k.github.io/blog/retrospective_2021/</link>
      <pubDate>Fri, 31 Dec 2021 19:46:45 +0900</pubDate>
      <guid>https://t45k.github.io/blog/retrospective_2021/</guid>
      <description>&lt;p&gt;2021 年を振り返っていく．&lt;/p&gt;&#xA;&lt;h2 id=&#34;総評&#34;&gt;&#xA;  総評&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b7%8f%e8%a9%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;20 年間続いた学生生活をようやく終えて，社会人になった節目の年だった．&lt;/p&gt;&#xA;&lt;p&gt;研究は良い感じに終えられて，社会人生活もぼちぼち良い感じにやっていると思う．&lt;/p&gt;&#xA;&lt;p&gt;一方で，自分の時間をかなり適当に過ごしたのは反省点かなぁと．&lt;/p&gt;&#xA;&lt;h2 id=&#34;研究&#34;&gt;&#xA;  研究&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%a0%94%e7%a9%b6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;実験自体はほぼ全て 2020 年で終わっていたので，後は修論を書くだけだった．&lt;/p&gt;&#xA;&lt;p&gt;暇を持て余した結果，修論を英語で 100 ページ書くという謎のチャレンジをした．&lt;/p&gt;&#xA;&lt;p&gt;最終的な戦績は&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;論文誌*2&lt;/li&gt;&#xA;&lt;li&gt;国際会議*3&lt;/li&gt;&#xA;&lt;li&gt;受賞*1&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;でかなり満足いく結果になった．&lt;/p&gt;&#xA;&lt;p&gt;特に，暇を持て余して，M2 の 9 月くらいから趣味 100%で始めた研究テーマがかなりうまくいって，最終的にトップ会議に通ったのはとても嬉しかった．&lt;/p&gt;&#xA;&lt;h2 id=&#34;仕事&#34;&gt;&#xA;  仕事&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bb%95%e4%ba%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;配属がかなり恵まれて，楽しく仕事で来た．&lt;/p&gt;&#xA;&lt;p&gt;チームのメンバーはベテランが多く，チーム自体の練度が高いという印象を受けた．&lt;/p&gt;&#xA;&lt;p&gt;また，新卒の自分にも裁量権が十分にあり，提案が通ることも多かった．&lt;/p&gt;&#xA;&lt;p&gt;ソースコードは過去の負債が割と残っているように感じたが，それはそれで返済する面白さがあるからヨシ．&lt;/p&gt;&#xA;&lt;p&gt;働き方もかなり柔軟に選択でき，自分はずっと 8:00 出社の 16:30 退勤をさせてもらっていた．&lt;/p&gt;&#xA;&lt;p&gt;課題としては，今まで個人で適当にプログラミングをしていた影響か&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;仕様通りに&lt;/li&gt;&#xA;&lt;li&gt;バグなく&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;作ることの難しさを感じた．&lt;/p&gt;&#xA;&lt;h2 id=&#34;趣味&#34;&gt;&#xA;  趣味&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%b6%a3%e5%91%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;全体的に，仕事の疲れを言い訳にだらっと過ごすことが多かった．&lt;/p&gt;&#xA;&lt;h3 id=&#34;競プロ&#34;&gt;&#xA;  競プロ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%ab%b6%e3%83%97%e3%83%ad&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;初冬くらいからやらなくなった．&lt;/p&gt;&#xA;&lt;p&gt;理由としては&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;土曜の 9 時からという時間が悪い．&#xA;その時間は酒を飲みたい．&lt;/li&gt;&#xA;&lt;li&gt;これ以上実力（レート）が伸びるビジョンが見えない．&lt;/li&gt;&#xA;&lt;li&gt;競プロをやってる仲間がいない．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;くらい．&lt;/p&gt;</description>
    </item>
    <item>
      <title>「オブジェクト指向でなぜつくるのか」読了</title>
      <link>https://t45k.github.io/blog/how_objects_work/</link>
      <pubDate>Sun, 28 Nov 2021 19:12:57 +0900</pubDate>
      <guid>https://t45k.github.io/blog/how_objects_work/</guid>
      <description>&lt;p&gt;オブジェクト指向でなぜつくるのかを読みました．&lt;/p&gt;&#xA;&lt;p&gt;久々に技術書を買った気がします．&#xA;社会人になって自由に使えるお金が増えるのは良いなと思いました．&lt;/p&gt;&#xA;&lt;p&gt;この本は，コードの書き方や新技術習得の指南というよりは，&#xA;基本に立ち返った内容になっています．&lt;/p&gt;&#xA;&lt;p&gt;オブジェクト指向の成り立ちから始まり，オブジェクト指向のメリット，オブジェクト指向により何が可能になったか，&#xA;などについて説明しています．&lt;/p&gt;&#xA;&lt;p&gt;あまり堅い内容ではないため，寝る前などに軽く読んだりといった，普通の読み物としても楽しめました．&lt;/p&gt;&#xA;&lt;p&gt;個人的には，「オブジェクト指向は必ずしも現実世界を投影してるわけではない」という主張がしっくりきました．&#xA;最終的には再利用，修正が容易でバグが発生しにくいプログラムを書くことが重要なのだなぁというごく当たり前のことを再認識する良い機会になりました．&lt;/p&gt;</description>
    </item>
    <item>
      <title>「カーニバル・デイ 新人類の記念日」読了</title>
      <link>https://t45k.github.io/blog/carnival_day/</link>
      <pubDate>Sun, 24 Oct 2021 13:35:14 +0900</pubDate>
      <guid>https://t45k.github.io/blog/carnival_day/</guid>
      <description>&lt;p&gt;2 ヶ月近くかけて，清涼院流水の「カーニバル・デイ」を読みました．&lt;/p&gt;&#xA;&lt;p&gt;本作は JDC シリーズのカーニバル三部作の三作目で，何とこの巻だけで 1000 ページ超あります．&#xA;一応 JDC シリーズの年表としては一番最後にあたる話で，とりあえず一区切り付いたかなぁという気持ちです．&lt;/p&gt;&#xA;&lt;p&gt;感想としては，ミステリとしてはトリックの回収の仕方があまりにも酷くて憤りを感じました．&#xA;コズミックが壁本（壁に叩きつけられてもおかしくない出来の本）として取り上げられることはありますが，個人的にはこの本が壁本に該当するのかなぁと感じました．結局のところ，トリックのインターフェースだけ公開されてて，実装は一切明らかになりませんでした．&lt;/p&gt;&#xA;&lt;p&gt;一方，ファンタジーとして読むとそこそこ楽しめたかなという印象です．&#xA;最後のオチのつけ方も，言葉遊びを重視する流水大説としてはアリだと思います．&lt;/p&gt;&#xA;&lt;p&gt;本の内容よりも，やっと読み終えられたという安堵感の方が大きかったです（多分大学生くらいの時からずっと読みたいと思ってました）．&#xA;ちなみに，ラストの Y.T は本文途中に出てくる死亡，行方不明者リストを見るとすぐに分かりました．&#xA;このために，リストを用意してくれてたとも思えました．&lt;/p&gt;&#xA;&lt;p&gt;今後ですが，彩文家事件はしばらく読まないと思います．&#xA;次に読むとしたら，積んでる「人間失格」か最近買った「オブジェクト指向でなぜつくるのか」か，横溝正史あたりに入門しようかなぁと考えています．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC223の解説</title>
      <link>https://t45k.github.io/kyopuro/abc223/</link>
      <pubDate>Sat, 23 Oct 2021 20:31:42 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc223/</guid>
      <description>&lt;p&gt;ギリギリ 4 完．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC223&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---exact-price&#34;&gt;&#xA;  A - Exact Price&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---exact-price&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;100 で割った余りが 0 になればよい．&lt;/p&gt;&#xA;&lt;p&gt;入力例にあるように X=0 である場合に注意．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---string-shifting&#34;&gt;&#xA;  B - String Shifting&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---string-shifting&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;シフトした文字列を全通り用意しておき，ソートする．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---doukasen&#34;&gt;&#xA;  C - Doukasen&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---doukasen&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;両端からシミュレーションするのは難しそうなので他の方法を考える．&lt;/p&gt;&#xA;&lt;p&gt;少し考えると，左端と右端両端から同時に火をつけたそれらがぶつかった時，&#xA;どちらも同じ時間燃えていたことになる．&#xA;つまり，ぶつかる場所は，左端から火をつけて燃え切るのに必要な時間の半分になる．&lt;/p&gt;&#xA;&lt;p&gt;あとは，全て燃える時間を計算して，その半分でどこまで燃えるかを計算すればよい．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---restricted-permutation&#34;&gt;&#xA;  D - Restricted Permutation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---restricted-permutation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;トポロジカルソートを，優先度付きキューを用いた幅優先探索でやるだけ．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC222の解説</title>
      <link>https://t45k.github.io/kyopuro/abc222/</link>
      <pubDate>Sat, 23 Oct 2021 18:07:27 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc222/</guid>
      <description>&lt;p&gt;四完．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC222&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---four-digits&#34;&gt;&#xA;  A - Four Digits&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---four-digits&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;10 未満には 3 個，100 未満には 2 個，1000 未満には 3 個 0 を付けた文字列を出力する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---failing-grade&#34;&gt;&#xA;  B - Failing Grade&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---failing-grade&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---swiss-system-tournament&#34;&gt;&#xA;  C - Swiss-System Tournament&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---swiss-system-tournament&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;問題文が長すぎて，飛ばして先に D から解いた問題．&#xA;やることは&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;前から二人ペアでじゃんけんをする&lt;/li&gt;&#xA;&lt;li&gt;勝ったらその人の勝ち数を増やす&lt;/li&gt;&#xA;&lt;li&gt;勝ち数でソートする&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;を繰り返すだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---between-two-arrays&#34;&gt;&#xA;  D - Between Two Arrays&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---between-two-arrays&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;DP．&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;dp[前から何番目を見てるか][c_iの値]=何通りか&lt;/code&gt;という DP を組むと&lt;code&gt;dp[i][j]&lt;/code&gt;は&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;i=1&lt;/code&gt;の時，&lt;code&gt;a_1 &amp;lt;= j &amp;lt;= b_1&lt;/code&gt;の範囲で 1，それ以外は 0&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;i&amp;gt;1&lt;/code&gt;の時，&lt;code&gt;dp[i-1][a_i]~dp[i-1][j]&lt;/code&gt;までの総和&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;になる．&lt;/p&gt;&#xA;&lt;p&gt;総和の計算には累積和を使う．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---red-and-blue-tree&#34;&gt;&#xA;  E - Red and Blue Tree&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---red-and-blue-tree&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;場合分けが漏れていて解き損ねた問題．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ドキドキ文芸部をプレイした話</title>
      <link>https://t45k.github.io/blog/ddlc/</link>
      <pubDate>Mon, 18 Oct 2021 19:54:12 +0900</pubDate>
      <guid>https://t45k.github.io/blog/ddlc/</guid>
      <description>&lt;p&gt;ドキドキ文芸部をプレイしました．&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;以降，ネタバレ含みます．&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;プレイ中の感想としては，&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;もうやめてくれよ&lt;/li&gt;&#xA;&lt;li&gt;これ以上いけない&lt;/li&gt;&#xA;&lt;li&gt;あかん&lt;/li&gt;&#xA;&lt;li&gt;救いはないのですか？&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;をひたすら繰り返した感じでした．&lt;/p&gt;&#xA;&lt;p&gt;特に驚いたのが名前を呼ばれた場面で，PC のユーザ名を本名にしていたのでどこから入手したのか最初は不審に思いました．&lt;/p&gt;&#xA;&lt;p&gt;全体的には有名なだけあるなって感じで，久々に（短い間ですが）のめり込んでゲームできました．&lt;/p&gt;&#xA;&lt;p&gt;その他思ったこと&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ゲーム内に PC のターミナルがあって，そこからファイルをいじれたりゲームを再起動できるのは面白い仕掛けだと感じた&lt;/li&gt;&#xA;&lt;li&gt;ナツキとユリが言い争った挙句モニカがアップになるシーンに毎回びっくりする&lt;/li&gt;&#xA;&lt;li&gt;ナツキ √ がほしい&lt;/li&gt;&#xA;&lt;li&gt;今回買ったのはプラスだが，無印版だとさらに色々できるらしい&lt;/li&gt;&#xA;&lt;li&gt;トロコンまでやるかは不明&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>ABC220の解説</title>
      <link>https://t45k.github.io/kyopuro/abc220/</link>
      <pubDate>Wed, 06 Oct 2021 22:54:53 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc220/</guid>
      <description>&lt;p&gt;5 完．&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC220/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---find-multiple&#34;&gt;&#xA;  A - Find Multiple&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---find-multiple&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ゴリゴリに計算して答えを出しても良いが，この手の問題は全探索しても間に合う．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---base-k&#34;&gt;&#xA;  B - Base K&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---base-k&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;10 進法に直してから計算する&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---long-sequence&#34;&gt;&#xA;  C - Long Sequence&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---long-sequence&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A1 ～ AN までの 1 ループでの和を事前に計算しておき，X とその和の商と余りから k を求める．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---fg-operation&#34;&gt;&#xA;  D - FG operation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---fg-operation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;DP&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---distance-on-large-perfect-binary-tree&#34;&gt;&#xA;  E - Distance on Large Perfect Binary Tree&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---distance-on-large-perfect-binary-tree&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ある頂点について，ペアの作るための頂点の選び方は以下の 3 通りになる&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;自分の子孫から対となる頂点を選ぶ&lt;/li&gt;&#xA;&lt;li&gt;自分の先祖から対となる頂点を選ぶ&lt;/li&gt;&#xA;&lt;li&gt;自分の先祖を経由して，その先祖の自分側以外の子孫から対となる頂点を選ぶ&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;また，それぞれに関して，自分の深さを X とすると，以下の条件が設けられる&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;自分の深さから N までが D 以上，つまり &lt;code&gt;N-X &amp;gt;= D&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;1 から自分の深さまでが D 以上，つまり &lt;code&gt;X-1 &amp;gt;= D&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;ある先祖の深さが Y の時，Y を経由しても D に収まる，つまり &lt;code&gt;(X-Y)+(N-Y) &amp;gt;= D&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;あとはそれぞれに関して計算すればよい．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC219の解説</title>
      <link>https://t45k.github.io/kyopuro/abc219/</link>
      <pubDate>Wed, 06 Oct 2021 22:26:04 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc219/</guid>
      <description>&lt;p&gt;5 完 600 位で青パフォ．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC219/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---atcoder-quiz-2&#34;&gt;&#xA;  A - AtCoder Quiz 2&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---atcoder-quiz-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ．誤読して WA を出した&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---maritozzo&#34;&gt;&#xA;  B - Maritozzo&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---maritozzo&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;これもやるだけ．&#xA;S1~S3 を配列に入れて，T の各数字を int 型に変換してからそれぞれの S に map して一つの文字列に結合すると気持ち良く書ける．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; String s1 = scanner.next();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; String s2 = scanner.next();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; String s3 = scanner.next();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; String[] s = {s1, s2, s3};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; String t = scanner.next();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; String answer = IntStream.range(0, t.length())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .map(i -&amp;gt; t.charAt(i) - &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .mapToObj(i -&amp;gt; s[i])&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .collect(Collectors.joining());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;System.out.println(answer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;c---neo-lexicographic-ordering&#34;&gt;&#xA;  C - Neo-lexicographic Ordering&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---neo-lexicographic-ordering&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;初めにバブルソートをやろうとして TLE を食らった問題&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC218の解説</title>
      <link>https://t45k.github.io/kyopuro/abc218/</link>
      <pubDate>Mon, 13 Sep 2021 16:37:09 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc218/</guid>
      <description>&lt;p&gt;初の 6 完で久々に盛れた．&#xA;&lt;a href=&#34;https://github.com/T45K/Kyopuro/tree/master/AtCoder/ABC/ABC218&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---weather-forecast&#34;&gt;&#xA;  A - Weather Forecast&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---weather-forecast&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;String#charAt&lt;/code&gt;使う．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---qwerty&#34;&gt;&#xA;  B - qwerty&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---qwerty&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;問題文内では辞書順という言葉を使っているが，単純に&lt;code&gt;(char)(&#39;a&#39; + P_i - 1)&lt;/code&gt;を出力するだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---shapes&#34;&gt;&#xA;  c - Shapes&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---shapes&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;アルゴリズムは簡単だが実装が割としんどい問題．&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;#&lt;/code&gt;が存在する座標のリストを取得し，それらを左上詰めしたうえで比較する．&#xA;例えば，入力例 1 の S&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.....&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;..#..&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.###.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.....&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.....&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;は 0-indexed で&lt;code&gt;(1,2), (2,1), (2,2), (2,3)&lt;/code&gt;と表せられる．&#xA;このとき，行の最小値は 1，列の最小値は 1 なので，&#xA;左上詰めするとそれぞれの座標の行，列から 1 ずつ引いて&#xA;&lt;code&gt;(0,1), (1,0), (1,1), (1,2)&lt;/code&gt;と表せられる．&lt;/p&gt;&#xA;&lt;p&gt;これを S に対して 90° ずつ回転させたリストと T を比較する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---rectangles&#34;&gt;&#xA;  D - Rectangles&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---rectangles&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;条件から，求めたいのは，&#xA;&lt;code&gt;あるx_iをx座標に持つ点の集合と，あるx_jをx座標に持つ点の集合の間で，y座標が一致する点の集合から2つ選ぶ時の組み合わせの数&lt;/code&gt;になる．&#xA;これを実現するため，与えられた点を x 座標をキー，y 座標のリストを値に持つ Map に格納する．&#xA;この時，リストは事前にソートしておく．&#xA;あとは x 座標の各組合せに対して，一致する y 座標の数を数えておく．&#xA;ソートしているので尺取法的に数え上げると，この操作はリストの長さに線形で可能なので十分に間に合う．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC217の解説</title>
      <link>https://t45k.github.io/kyopuro/abc217/</link>
      <pubDate>Wed, 08 Sep 2021 18:47:29 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc217/</guid>
      <description>&lt;p&gt;ぎりぎり5完．&#xA;難しく考えてセグ木で殴りにいくことが多かった．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC217/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---lexicographic-order&#34;&gt;&#xA;  A - Lexicographic Order&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---lexicographic-order&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Javaは&lt;code&gt;S.compareTo(T)&lt;/code&gt;するだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---atcoder-quiz&#34;&gt;&#xA;  B - AtCoder Quiz&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---atcoder-quiz&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;初めに4つのコンテストをSet等で持っておいて，出てきたものを消す．&lt;/p&gt;&#xA;&lt;h2 id=&#34;inverse-of-permutation&#34;&gt;&#xA;  Inverse of Permutation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#inverse-of-permutation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;問題文の解読にちょっと時間がかかった．&#xA;転置する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---cutting-woods&#34;&gt;&#xA;  D - Cutting Woods&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---cutting-woods&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;セグ木で殴った問題その1．&#xA;Javaだと&lt;code&gt;TreeSet&lt;/code&gt;でOK（&lt;code&gt;lower&lt;/code&gt;と&lt;code&gt;ceiling&lt;/code&gt;が使えることを知らなかった）．&#xA;別解を紹介する．&lt;/p&gt;&#xA;&lt;p&gt;まずminを返すセグ木とmaxを返すセグ木を用意する．&#xA;木材を切る度に，2つのセグ木のxiの位置をxiで更新する．&#xA;こうすると，線xiを含む木材の長さは，&lt;code&gt;(出てきた数値のうち，xi以上の最小値)-(xi以下の最大値)&lt;/code&gt;と表すことができ，&#xA;セグ木を使うことで&lt;code&gt;O(log N)&lt;/code&gt;で処理できる．&#xA;木材の長さは&lt;code&gt;10^9&lt;/code&gt;を取りうるので，木材を切る位置で座標圧縮する．&#xA;つまり，ci=1のクエリを先に全て集めて起き，それらのxiの値でリストを作り，&#xA;それをもとにセグ木を構築する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---sorting-queries&#34;&gt;&#xA;  E - Sorting Queries&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---sorting-queries&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;セグ木で殴った問題その2．&lt;/p&gt;&#xA;&lt;p&gt;これも初めに出てくるxを全て集めておきリストに入れる．&#xA;このリストをセグ木に入れる．&#xA;次にクエリを順番にみていき，以下の操作を行う．&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;操作1の時，Aの長さを表す変数&lt;code&gt;length&lt;/code&gt;を更新する．&lt;/li&gt;&#xA;&lt;li&gt;操作3の時，Aのどの部分までがソート済みかを表す変数&lt;code&gt;sortedPoint&lt;/code&gt;に&lt;code&gt;length&lt;/code&gt;を代入する．&lt;/li&gt;&#xA;&lt;li&gt;操作2の時，次に出力する数字が何個目か（&lt;code&gt;count&lt;/code&gt;）によって，操作を変える&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;sortedPoint&lt;/code&gt;以下なら，ソート済みの部分を出力するため，&lt;code&gt;count&lt;/code&gt;から&lt;code&gt;sortedPoint&lt;/code&gt;の範囲で最小値を出力する&#xA;（出力した数字は，次以降の操作で引っかからないように最大値で更新しておく）&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;sortedPoint&lt;/code&gt;を超過していれば，リストの&lt;code&gt;count&lt;/code&gt;番目の数字をそのまま出力する．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>ABC216の解説</title>
      <link>https://t45k.github.io/kyopuro/abc216/</link>
      <pubDate>Sat, 04 Sep 2021 20:29:59 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc216/</guid>
      <description>&lt;p&gt;カス4完．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC216/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---signed-difficulty&#34;&gt;&#xA;  A - Signed Difficulty&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---signed-difficulty&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ．&lt;/p&gt;&#xA;&lt;p&gt;doubleやfloatでなく文字列型で入力を受け取ってピリオドで分割したほうが良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---same-name&#34;&gt;&#xA;  B - Same Name&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---same-name&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;姓と名を結合した文字列（間に空白を挟む）をSet等で管理し，最終的にSetの要素数とNを比較すれば良い&#xA;（要素数がNと同じなら同姓同名は存在しない）．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---many-balls&#34;&gt;&#xA;  C - Many Balls&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---many-balls&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;元のNに対して&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Nが奇数なら1引いてから2で割る&lt;/li&gt;&#xA;&lt;li&gt;Nが偶数なら2で割る&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;という操作を行っていき，最後に行った操作を逆順に出力する&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---pair-of-balls&#34;&gt;&#xA;  D - Pair of Balls&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---pair-of-balls&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;考え方としては，筒の先頭を順番に見ていき，重複するボールがあればそれを取り除き，改めてその筒を見る，という操作の繰り返しである．&lt;/p&gt;&#xA;&lt;p&gt;「操作を行う対象の筒リスト」を用意し，1~Nを初めに挿入する．&#xA;次に，リストの先頭から取り出した番号の筒に対して，以下の操作を行っていく&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;筒の先頭の数字が「すでに出現した数字」の集合に含まれている場合，筒の先頭と集合中のその数字を取り除き，「操作を行う対象の筒リスト」に今見ている筒の番号を入れる．&lt;/li&gt;&#xA;&lt;li&gt;筒の先頭の数字が「すでに出現した数字」の集合に含まれていない場合，その数字を集合に入れる．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;e---amusement-park&#34;&gt;&#xA;  E - Amusement Park&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---amusement-park&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ある楽しさXに対して，&lt;code&gt;Σ(max(Ai-X,0)) = K&lt;/code&gt;となるようなXが存在するときに，各アトラクションを楽しさがXになるまで乗るのが最適．&#xA;なので，そのXを二分探索を用いて探す．&lt;/p&gt;&#xA;&lt;h2 id=&#34;f--max-sum-counting&#34;&gt;&#xA;  F- Max Sum Counting&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#f--max-sum-counting&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Aを昇順に並べたとき，Aiを含む(1,&amp;hellip;,i)の空でない部分集合は必ず最大値がAiになる．&#xA;このことから，ソートした後の各iに対して，(1,&amp;hellip;,i)の空でない部分集合に対してBiの和を求めて，Ai以下のものの個数を足し合わせていけば良い．&#xA;部分集合の和はナップザック問題に帰着し，Aiの最大値は5,000なので，それ以下の範囲で計算すれば良い．&lt;/p&gt;</description>
    </item>
    <item>
      <title>「カーニバル 人類最後の事件」読了</title>
      <link>https://t45k.github.io/blog/carnival/</link>
      <pubDate>Wed, 01 Sep 2021 22:47:07 +0900</pubDate>
      <guid>https://t45k.github.io/blog/carnival/</guid>
      <description>&lt;p&gt;重い腰を上げて，清涼院流水の「カーニバル」を読みました．&lt;/p&gt;&#xA;&lt;p&gt;本作では，JDC爆破事件を皮切りに，1週ずつ繰り広げられる大規模犯罪のお話が展開されます．&#xA;また，各事件は作者が定めた順番に並べられており，「ページ通り読む（読者式）」と「時系列順に読む（作者式）」の2通りの方法で楽しむことができます．&#xA;今回は読者式で読んだのですが，事前に死んでしまう登場人物が分かっている状態で，その前日にその人物がどういう振る舞いをしているか，という楽しみ方ができるのは珍しいと思いました．&lt;/p&gt;&#xA;&lt;p&gt;今作ではこれまでJDCシリーズに出てきた多くの探偵が事件に巻き込まれ死にます．&#xA;また，トリックすら分からない完全不可能犯罪が多く出てきます．&#xA;この大風呂敷が次作の「カーニバル・デイ」でどう回収されるのかが楽しみです．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC215の解説</title>
      <link>https://t45k.github.io/kyopuro/abc215/</link>
      <pubDate>Mon, 23 Aug 2021 20:59:23 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc215/</guid>
      <description>&lt;p&gt;Dで沼って緑パフォ4完．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC215&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---your-first-judge&#34;&gt;&#xA;  A - Your First Judge&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---your-first-judge&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;文字列判定&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---log2n&#34;&gt;&#xA;  B - log2(N)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---log2n&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;logを使うと誤差で通らなかったりする．&#xA;&lt;code&gt;N&amp;lt;=10^18&lt;/code&gt;からkは高々60程度なので愚直に計算してよい&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---one-more-aab-aba-baa&#34;&gt;&#xA;  C - One More aab aba baa&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---one-more-aab-aba-baa&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;|S|&amp;lt;=8&lt;/code&gt;から全てのパターンを列挙しても4*19^5程度なので，全て列挙してからソートすればよい．&#xA;C++だとpermutationを使えば良いが，Javaだと自分で実装する必要がある．&#xA;再帰を使うと楽．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---coprime-2&#34;&gt;&#xA;  D - Coprime 2&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---coprime-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;全然解法が思いつかなかった．&#xA;想定解とは別解を紹介する．&lt;/p&gt;&#xA;&lt;p&gt;問題の条件から，求めたい数は，各Aiが約数として持たない素数と，それらの合成数であることが分かる．&#xA;そこであらかじめ2以上M以下の約数を全て列挙した上で，それらの倍数とAiが一致しないかを確認していく．&#xA;素数の倍数を列挙するのはエラトステネスの篩と同じ計算量で行え，それらがAiと一致するかはAをSetで持つことで&lt;code&gt;O(1)&lt;/code&gt;でできる．&lt;/p&gt;&#xA;&lt;p&gt;また，合成数を作る処理だが，合成数の数は高々M個なので計算量は&lt;code&gt;O(M)&lt;/code&gt;以下となる．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---chain-contestant&#34;&gt;&#xA;  E - Chain Contestant&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---chain-contestant&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;解法は思いついたが時間内に実装できなかった問題．&lt;/p&gt;&#xA;&lt;p&gt;SがAからJまでの10種類しかないことに着目すると，2^10をやっても何となくいけそうな気になってくる．&#xA;以下のようなdpを組む．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dp[文字列のどこを見ているか][今までどの文字を通ってきたか][今どこの文字にいるか]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ここで，&lt;code&gt;今までどの文字を通ってきたか&lt;/code&gt;はbitで表現できる．&#xA;このようなdp[i][j][k]を組むと，更新式は以下の和となる．&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;dp[i-1][j][k]&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;jがi番目の文字を含んでおり，かつk==i．&#xA;これは，i-1番目までのいずれかのコンテストに参加した時に，現在i番目の文字と同じコンテストに最後に参加したことを表している．&#xA;このとき，そのままi番目の文字のコンテストを受けることができる．&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;jがi番目の文字を含んでおらず，かつk!=i．&#xA;これはi-1番目までのいずれかのコンテストに参加した時に，現在i番目の文字と同じコンテストに参加したことがなく，&#xA;初めてi番目の文字のコンテストに参加することを表している．&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;+1．これは，i-1番目までのコンテストのいずれにも参加しておらず，i番目のコンテストに初めて参加することを表す．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC214の解説</title>
      <link>https://t45k.github.io/kyopuro/abc214/</link>
      <pubDate>Sun, 15 Aug 2021 13:45:18 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc214/</guid>
      <description>&lt;p&gt;ABCDの四完．久々にD問題解けた．&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC214&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---new-generation-abc&#34;&gt;&#xA;  A - New Generation ABC&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---new-generation-abc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;if文で分岐する&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---how-many&#34;&gt;&#xA;  B - How many?&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---how-many&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;for文で全探索&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---distribution&#34;&gt;&#xA;  C - Distribution&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---distribution&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;意外と難しかったと感じた割には灰diffらしい．&lt;/p&gt;&#xA;&lt;p&gt;まずは簡単のために，時計回りに並んでいない場合を考える．&#xA;i番目のすぬけ君が初めて宝石をもらう時間を&lt;code&gt;time[i]&lt;/code&gt;とすると，&#xA;i(&amp;gt;=2)番目のすぬけ君が初めて宝石をもらうのは&#xA;&lt;code&gt;min(T_i, time[i-1]+S[i-1])&lt;/code&gt;となるので，&#xA;前から順番に計算していけば良い．&lt;/p&gt;&#xA;&lt;p&gt;実際には時計回りに並んでいるため，&#xA;1番目のすぬけ君がN番目のすぬけ君から宝石をもらうのが最速である場合がある．&#xA;これは&lt;code&gt;min(T_0, time[N]+S[N])&lt;/code&gt;となるので，先ほどの式と併せて&#xA;&lt;code&gt;min(T_i%N, time[(i-1)%N + S[(i-1)%N]])&lt;/code&gt;と一般化できる．&#xA;あとはこの式を2周ループすれば良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---sum-of-maximum-weights&#34;&gt;&#xA;  D - Sum of Maximum Weights&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---sum-of-maximum-weights&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;D問題にしては難しかった問題．&lt;/p&gt;&#xA;&lt;p&gt;まず，以下のことが言える．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;連結でない頂点u,vに対して辺(u,v)を考える時，&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;その辺を最短パスに含む頂点の組の個数は&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(uの連結成分の個数)*(vの連結成分の個数)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上から，u，v連結でなく，辺(u,v)が「uの連結成分中の辺」「vの連結成分中の辺」の重みよりも大きい（つまり，辺(u,v)が重みの最大値）場合，&#xA;辺(u,v)を繋ぐことで重みの最大値の合計値は&#xA;&lt;code&gt;(辺(u,v)の重み)*(uの連結成分の個数)*(vの連結成分の個数)&lt;/code&gt;だけ増える．&lt;/p&gt;&#xA;&lt;p&gt;よって，重みの小さい辺から順番に連結していくことで，答えを求めることができる．&#xA;連結成分の個数はUnion Findなどで管理できる．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---packing-under-range-regulations&#34;&gt;&#xA;  E - Packing Under Range Regulations&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---packing-under-range-regulations&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;解説AC．&lt;/p&gt;</description>
    </item>
    <item>
      <title>「世界は密室でできている」読了</title>
      <link>https://t45k.github.io/blog/the_world_is_made_out_of_closed_rooms/</link>
      <pubDate>Thu, 05 Aug 2021 17:05:34 +0900</pubDate>
      <guid>https://t45k.github.io/blog/the_world_is_made_out_of_closed_rooms/</guid>
      <description>&lt;p&gt;近所の図書館の図書カードをようやく作ったので，&#xA;舞城王太郎の「世界は密室でできている」を借りて読みました．&lt;/p&gt;&#xA;&lt;p&gt;思ったこと&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;一冊のページ数が少ない上に，それぞれの話も短いので，作者の文体もあいまってサクサク読める&lt;/li&gt;&#xA;&lt;li&gt;「ルンババ12」や谷口氏の名前が出てきて，舞城作品だなってのを実感する&lt;/li&gt;&#xA;&lt;li&gt;珍しく分かりやすい気がする&lt;/li&gt;&#xA;&lt;li&gt;ちゃんとしたミステリ&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>ABC211の解説</title>
      <link>https://t45k.github.io/kyopuro/abc211/</link>
      <pubDate>Mon, 26 Jul 2021 22:41:46 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc211/</guid>
      <description>&lt;p&gt;4完速解き失敗でレートが微減．&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC211&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---blood-pressure&#34;&gt;&#xA;  A - Blood Pressure&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---blood-pressure&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;けつあつそくてい．&lt;code&gt;double&lt;/code&gt;で計算する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---cycle-hit&#34;&gt;&#xA;  B - Cycle Hit&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---cycle-hit&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;セットを使うなり事前にソートするなりする．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---chokudai&#34;&gt;&#xA;  C - chokudai&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---chokudai&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;一部で炎上していた問題．簡単なDP&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---number-of-shortest-paths&#34;&gt;&#xA;  D - Number of Shortest paths&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---number-of-shortest-paths&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;基本的にはダイクストラ．&lt;br&gt;&#xA;距離とは別に経路数の情報を持っておき，ある節点に到達したとき，&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;その節点での距離の最小値を更新した場合，経路数をその経路の値に置き換える&lt;/li&gt;&#xA;&lt;li&gt;その節点での距離の最小値と同じ距離だった場合，経路数を足し合わせる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;という操作を行う&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---red-polyomino&#34;&gt;&#xA;  E - Red Polyomino&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---red-polyomino&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;解説AC．解きたかった．&#xA;赤に塗った盤面を全て記録しておいても十分メモリに余裕がある．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC210の解説</title>
      <link>https://t45k.github.io/kyopuro/abc210/</link>
      <pubDate>Sun, 18 Jul 2021 14:18:29 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc210/</guid>
      <description>&lt;p&gt;四完青パフォ。&#xA;今回は D 速解きがそこそこ上手くいった一方で、E に歯が立たなかったので精進したい。&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC210&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---cabbages&#34;&gt;&#xA;  A - Cabbages&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---cabbages&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;A &amp;gt; N&lt;/code&gt;になりうるのがポイント&lt;br&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;A が N よりも小さい場合、A 個を X 円で買って、(N-A)個を Y 円で買う&lt;/li&gt;&#xA;&lt;li&gt;A が N 以上の場合、N 個を X 円で買う&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;と場合分けする。&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---bouzu-mekuri&#34;&gt;&#xA;  B - Bouzu Mekuri&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---bouzu-mekuri&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;愚直にシミュレーションする。&#xA;文字列を先頭から見ていき、初めに坊主を引いた方が負け。&lt;br&gt;&#xA;&lt;code&gt;Stream#findFirst&lt;/code&gt;を使うとすっきり書ける。&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---colorful-candies&#34;&gt;&#xA;  C - Colorful Candies&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---colorful-candies&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;範囲内の飴ちゃんの種類を最大にする問題&lt;br&gt;&#xA;範囲をスライドさせていく。&#xA;具体的には、&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;まずは先頭 K 個の飴の色と出現回数を辞書等を使って数えておく。この時の種類数を&lt;code&gt;X&lt;/code&gt;とする。&lt;/li&gt;&#xA;&lt;li&gt;K+1 個目の飴の出現回数を 1 増やし、1 個目の飴を出現回数を 1 減らす。&#xA;この時、K+1 個目の飴が初登場なら&lt;code&gt;X&lt;/code&gt;を 1 増やし、1 個目の飴の出現回数が 0 になったら&lt;code&gt;X&lt;/code&gt;を 1 減らす。&lt;/li&gt;&#xA;&lt;li&gt;上の操作を、範囲をずらしながら繰り返す&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;X&lt;/code&gt;の最大値が答え&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;d---national-railway&#34;&gt;&#xA;  D - National Railway&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---national-railway&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;意外と難しかったらしい。&lt;br&gt;&#xA;まずは簡単のために 1 行しかない場合を考える。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC209の解説</title>
      <link>https://t45k.github.io/kyopuro/abc209/</link>
      <pubDate>Sat, 10 Jul 2021 23:14:52 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc209/</guid>
      <description>&lt;p&gt;四完速解きで青パフォ．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC209&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---counting&#34;&gt;&#xA;  A - Counting&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---counting&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;基本的には&lt;code&gt;B-A-1&lt;/code&gt;だが，&lt;code&gt;A&amp;gt;B&lt;/code&gt;の時に限り0となる.&#xA;&lt;code&gt;max(B-A-1, 0)&lt;/code&gt;とすれば多少は楽．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---can-you-buy-them-all&#34;&gt;&#xA;  B - Can you buy them all?&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---can-you-buy-them-all&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;偶数番目の商品だけ-1して総和を計算するだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---not-equal&#34;&gt;&#xA;  C - Not Equal&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---not-equal&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;まず，整数列を昇順にソートしても求めたい値は変わらない．&lt;br&gt;&#xA;1番目の値は全ての値から選ぶことができる．&#xA;2番目の値は1番目に選んだ値以外の値を選ぶので，&lt;code&gt;C2 - 1&lt;/code&gt;通りから選べる．&#xA;このとき，昇順にソートしているので選ぶ値の上限を考える必要がない．&#xA;このように考えると，i番目の値は&lt;code&gt;Ci - (i-1)&lt;/code&gt;から選ぶことができる．&#xA;このとき，&lt;code&gt;(i-1) &amp;gt;= Ci&lt;/code&gt;となると値を選べなくなるので答えは0になる．&lt;br&gt;&#xA;そうでない場合，答えは全ての選べる値を掛け合わせた値になる．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---collision&#34;&gt;&#xA;  D - Collision&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---collision&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;問題文から，与えられたグラフが木構造であることが分かる．&lt;br&gt;&#xA;木構造の場合，ある節点(a,b)の距離の偶奇は，頂点を一つ定めたときの&lt;code&gt;(頂点からaまでの距離)-(頂点からbまでの距離)&lt;/code&gt;となる．&lt;br&gt;&#xA;これは，例えば(a,b)の最小共通祖先をc，頂点（適当な節点）をd，二つの節点の距離を&lt;code&gt;dis(x,y)&lt;/code&gt;と表す時，&lt;code&gt;(頂点からaまでの距離)-(頂点からbまでの距離)&lt;/code&gt;の偶奇は&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(dis(d,a) - dis(d,b)) % 2 &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;= (dis(d,c) + dis(c,a) + dis(d,c) + dis(c,b)) % 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;= (dis(d,c) * 2 + dis(c,a) + dis(c,b)) % 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;= (dis(c,a) + dis(c,b)) % 2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;でa，b間の距離の偶奇と一致するからである．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC208の解説</title>
      <link>https://t45k.github.io/kyopuro/abc208/</link>
      <pubDate>Sun, 04 Jul 2021 23:45:41 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc208/</guid>
      <description>&lt;p&gt;5完．初の黄パフォ．&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC208&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---rolling-dice&#34;&gt;&#xA;  A - Rolling Dice&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---rolling-dice&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Bの平均値について考えればよい．&#xA;平均が1以上6以下なら達成可能．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---factorial-yen-coin&#34;&gt;&#xA;  B - Factorial Yen Coin&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---factorial-yen-coin&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;大きい硬貨から貪欲に計算していく&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---fair-candy-distribution&#34;&gt;&#xA;  C - Fair Candy Distribution&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---fair-candy-distribution&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;初めに国民番号で国民をソートしておく．&#xA;国民番号の上位&lt;code&gt;K%N&lt;/code&gt;人は余計に1個多くもらえる．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---shortest-path-queries-2&#34;&gt;&#xA;  D - Shortest Path Queries 2&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---shortest-path-queries-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ワーシャルフロイドを応用する．ワーシャルフロイドについては&lt;a href=&#34;../warshallfloyd/&#34; &gt;こちら&lt;/a&gt;を参照．&#xA;ワーシャルフロイドの中継点を&lt;code&gt;k&lt;/code&gt;とすると，&lt;code&gt;Math.min(graph[i][j], graph[i][k] + graph[k][j])&lt;/code&gt;はiスタートjゴールでk以下の箇所を経由した際の最短距離となるので，問題に適当．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---digit-products&#34;&gt;&#xA;  E - Digit Products&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---digit-products&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;たまたま解けた問題．桁DP．&lt;br&gt;&#xA;桁DPとは，ある値&lt;code&gt;N&lt;/code&gt;が与えられたときに各桁に対する遷移を以下のように行うDPを指す．&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;一つ前で見ている桁の時点で，数字が&lt;code&gt;N&lt;/code&gt;以下であることが確定している場合，&lt;code&gt;0~9&lt;/code&gt;に遷移する&lt;/li&gt;&#xA;&lt;li&gt;数字が&lt;code&gt;N&lt;/code&gt;以下であることが確定していない場合，&lt;code&gt;0~(今見ている桁の数-1)&lt;/code&gt;への遷移（つまり，状態1に遷移する）と今見てる桁への遷移（状態2）への遷移を行う&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;今回は，各桁の積が&lt;code&gt;K&lt;/code&gt;以下になれば良いのだが，このとき積は十分に疎になるので連想配列などで持てば良い．&lt;/p&gt;</description>
    </item>
    <item>
      <title>Keychron K3を購入した話</title>
      <link>https://t45k.github.io/blog/keychron/</link>
      <pubDate>Fri, 11 Jun 2021 22:35:53 +0900</pubDate>
      <guid>https://t45k.github.io/blog/keychron/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.keychron.com/products/keychron-k3-wireless-mechanical-keyboard&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Keychron K3&lt;/a&gt;を購入しました．&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/keychron_box.JPG&#34; alt=&#34;keychron_box&#34;&gt;&#xA;&lt;img src=&#34;https://t45k.github.io/img/blog/keychron.JPG&#34; alt=&#34;keychron_box&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;経緯&#34;&gt;&#xA;  経緯&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b5%8c%e7%b7%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;研究室ではRealforceを使っていたのですが，会社からはキーボードが支給されないと聞いたので，仕事用のキーボードを購入する必要が発生しました．&#xA;家では青軸のメカニカルキーボードを使っているので，その経験を踏まえて以下の要件を満たすキーボードを探しました．&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;会社はフリーアドレスなので持ち運びに困らない．具体的には以下の通り．&#xA;&lt;ul&gt;&#xA;&lt;li&gt;軽い&lt;/li&gt;&#xA;&lt;li&gt;薄い&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;十分にコンパクト．個人的にはmagic keyboardと同じ配列がベスト&lt;/li&gt;&#xA;&lt;li&gt;もちろんUS配列&lt;/li&gt;&#xA;&lt;li&gt;Fn必須&lt;/li&gt;&#xA;&lt;li&gt;赤か茶軸のメカニカル，あるいは静電容量無接点&lt;/li&gt;&#xA;&lt;li&gt;できればmac対応&lt;/li&gt;&#xA;&lt;li&gt;新卒のお給料でも買える．1万円前後&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Fnが必要なことからHHKB，携帯性からRealforceは簡単に除外できました．&#xA;Nizも割と魅力的だったのですが，右下の配置が独特なことと高いことから除外しました．&#xA;メカニカルキーボードで上記の要件を満たすキーボードはいくつか見つかったのですが，&#xA;最終的に多機能かつ安価で評判も良い&lt;code&gt;Keychron K3&lt;/code&gt;にしました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;注文から到着まで&#34;&gt;&#xA;  注文から到着まで&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%b3%a8%e6%96%87%e3%81%8b%e3%82%89%e5%88%b0%e7%9d%80%e3%81%be%e3%81%a7&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;注文は公式サイトからできます．&#xA;英語での住所&amp;amp;電話番号入力が必要なので事前に調べておくと良いと思います．&lt;/p&gt;&#xA;&lt;p&gt;値段は本体74\$ + 配送料20\$の計94\$でした．&#xA;paypalで支払いしたところ2021年6月現在で10,802円でした．&lt;/p&gt;&#xA;&lt;p&gt;6月5日（土）の23時過ぎに注文して到着したのが10日（木）の夜でした．&#xA;日曜を挟んでいたのを考えると割と早く届きました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;使用感&#34;&gt;&#xA;  使用感&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bd%bf%e7%94%a8%e6%84%9f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ファーストインプレッション&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;感想&lt;br&gt;- サイズ感: 最高&lt;br&gt;- 打鍵感: 茶軸やけどロープロのせいで反発が弱め。同時押しになったり2回押しがうまくいかんかったりする&lt;br&gt;- キートップ: 柔らかめ、爪が食い込む感覚&lt;br&gt;- 傾斜: 低め、違和感ある&lt;br&gt;- レスポンス: 若干もっさりしてる&lt;br&gt;&lt;br&gt;総評: サイズ感は最高やけどそれ以外は慣れが必要かなぁ&lt;/p&gt;&amp;mdash; task@FSE (@getupmax) &lt;a href=&#34;https://twitter.com/getupmax/status/1402946711660621826?ref_src=twsrc%5Etfw&#34;&gt;June 10, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;p&gt;一日使ってみましたが，本当に慣れだと思います．&#xA;仕事が終わった後に家のキーボードを触ると，逆に重くてびっくりしました．&#xA;使っていくうちに好きになっていくと思います．&#xA;個人的にはdeleteを推すときのペチペチ音が好きです．&lt;/p&gt;&#xA;&lt;h2 id=&#34;総評&#34;&gt;&#xA;  総評&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b7%8f%e8%a9%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;良い買い物をしたと思います．&#xA;現在は在宅なのですが，会社で使うのを楽しみにしています．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC200の解説</title>
      <link>https://t45k.github.io/kyopuro/abc200/</link>
      <pubDate>Sun, 16 May 2021 11:57:55 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc200/</guid>
      <description>&lt;p&gt;祝200回．&#xA;4完．&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---century&#34;&gt;&#xA;  A - Century&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---century&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ．&#xA;X00年はX世紀であることに注意．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---200th-abc-200&#34;&gt;&#xA;  B - 200th ABC-200&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---200th-abc-200&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ．十分間に合う．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---ringos-favorite-numbers-2&#34;&gt;&#xA;  C - Ringo&amp;rsquo;s Favorite Numbers 2&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---ringos-favorite-numbers-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Ai-Aj=200ということはAi≡Aj(mod 200)であることなので，&#xA;各Aを，200で割ったあまりでグルーピングして組み合わせを計算すればよい．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---happy-birthday-2&#34;&gt;&#xA;  D - Happy Birthday! 2&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---happy-birthday-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;解説が賢い．&lt;/p&gt;&#xA;&lt;p&gt;先頭8個のAを見ると，2^8-1&amp;gt;200から鳩の巣原理から必ずmod200が被る和の組み合わせが存在する．&#xA;bit全探索するだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---patisserie-abc-2&#34;&gt;&#xA;  E - Patisserie ABC 2&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---patisserie-abc-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;きれいさ，おいしさ，人気度をそれぞれa,b,cとする．&lt;/p&gt;&#xA;&lt;p&gt;a+b+cの小さい順に何通りあるかを確認していく(&lt;code&gt;3 &amp;lt;= sum &amp;lt;= 3*N&lt;/code&gt;)．&#xA;b,cが1以上N以下でないといけないことから，aの範囲は &lt;code&gt;max(1,sum-2n) &amp;lt;= a &amp;lt;= min(n,sum-2)&lt;/code&gt;．&#xA;このとき，bの範囲は &lt;code&gt;max(1,sum-a-n) &amp;lt;= b &amp;lt;= min(n,sum-a-1)&lt;/code&gt;．&#xA;a,bが決まればcは一意に定まる．&#xA;このことから，a+b+cの和がsumの時，&#xA;&lt;code&gt;Σ(a=max(1,sum-2n)~min(n,sum-2))(min(n,sum-a-1)-max(1,sum-a-n)+1)&lt;/code&gt; 通りの選び方がある．&#xA;これをO(1)で求める．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ZONeエナジー プログラミングコンテスト “HELLO SPACE” の解説</title>
      <link>https://t45k.github.io/kyopuro/zone2021/</link>
      <pubDate>Sat, 15 May 2021 20:51:42 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/zone2021/</guid>
      <description>&lt;p&gt;奇跡的に5完．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/other/zone2021&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---ufo襲来&#34;&gt;&#xA;  A - UFO襲来&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---ufo%e8%a5%b2%e6%9d%a5&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---友好の印&#34;&gt;&#xA;  B - 友好の印&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---%e5%8f%8b%e5%a5%bd%e3%81%ae%e5%8d%b0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;UFOとタワーの頂上を通る直線のy切片を求める．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---mad-team&#34;&gt;&#xA;  C - MAD TEAM&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---mad-team&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;通したけど嘘解法っぽい．&#xA;想定解法は二分探索．&lt;/p&gt;&#xA;&lt;p&gt;3人選ばないといけないのに対してN=3,000から二重ループまでしか回せない．&#xA;各要素が大きい人を選ぶほど良い結果を期待できる．&#xA;つまり，各要素でソートして，上三つだけ残しておく．&#xA;そして，ある二人を選んだ後に各要素のトップを加えてみて総合力を計算すれば良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---宇宙人からのメッセージ&#34;&gt;&#xA;  D - 宇宙人からのメッセージ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---%e5%ae%87%e5%ae%99%e4%ba%ba%e3%81%8b%e3%82%89%e3%81%ae%e3%83%a1%e3%83%83%e3%82%bb%e3%83%bc%e3%82%b8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;両端キューなどに対して文字を突っ込んでいく．&#xA;このときに重複を排除する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---潜入&#34;&gt;&#xA;  E - 潜入&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---%e6%bd%9c%e5%85%a5&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ダイクストラをする．&lt;/p&gt;</description>
    </item>
    <item>
      <title>第二回日本最強プログラマー学生選手権の解説</title>
      <link>https://t45k.github.io/kyopuro/jsc2021/</link>
      <pubDate>Sun, 02 May 2021 17:02:14 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/jsc2021/</guid>
      <description>&lt;p&gt;5完393位でパフォーマンス爆盛りした回。&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/other/jsc2021&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---competition&#34;&gt;&#xA;  A - Competition&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---competition&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;X,Y,Z&amp;lt;=10^3&lt;/code&gt;から、整数iに対して&lt;code&gt;Y/X &amp;gt; i/Z&lt;/code&gt;を満たす最大の値を探す。&#xA;&lt;code&gt;X=1,Y=1000,Z=1000&lt;/code&gt;の時&lt;code&gt;i=999999&lt;/code&gt;で最大になるので、そこから降順に探す。&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---xor-of-sequences&#34;&gt;&#xA;  B - Xor of Sequences&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---xor-of-sequences&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ。&#xA;Set等で管理する。&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---max-gcd-2&#34;&gt;&#xA;  C - Max GCD 2&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---max-gcd-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;2からBの間で、AからBの間に2つの倍数を持つ最大の整数を求めれば良い。&#xA;ある整数をiとすると、A以上の最小のiの倍数は&lt;code&gt;(A + i - 1) / i * i&lt;/code&gt;、&#xA;B以下の最大のiの倍数は&lt;code&gt;B/i*i&lt;/code&gt;で求まるので、この二つの値が異なる最大のiを求める。&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---nowhere-p&#34;&gt;&#xA;  D - Nowhere P&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---nowhere-p&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;まず&lt;code&gt;A_1&lt;/code&gt;は1からP-1の&lt;code&gt;P-1&lt;/code&gt;通り選べる。&#xA;次に&lt;code&gt;A_2&lt;/code&gt;については1からP-1で、&lt;code&gt;P-A_1&lt;/code&gt;でない&lt;code&gt;P-2&lt;/code&gt;通りが選べる。&#xA;&lt;code&gt;A_3&lt;/code&gt;以降についても、&lt;code&gt;P-sum%P&lt;/code&gt;以外の&lt;code&gt;P-2&lt;/code&gt;通りが選べるので、答えは&lt;code&gt;(P-1)*(P-2)^(N-1)&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---level-k-palindrome&#34;&gt;&#xA;  E - Level K Palindrome&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---level-k-palindrome&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;基本的には、回文で対応する文字に対して、一番出現する文字に書き換えていく。&lt;/p&gt;&#xA;&lt;p&gt;まずはレベルを満たす最小の文字列に分解していく。&#xA;基本的には文字列を半分にするのを繰り返していく。&#xA;この時、各折り返し点が異なっている場合は書き換える。&lt;/p&gt;&#xA;&lt;p&gt;次に、それぞれの文字列を同一にしていく。&#xA;これは、各文字列の同じ位置に存在する文字のうち、マジョリティに書き換える。&lt;/p&gt;&#xA;&lt;p&gt;最後に各文字列が回文だった場合、そうならない様に書き換える。&#xA;これは、一つ前のマジョリティに書き換える処理を行う際に2番目に多い文字を記録しておき、&#xA;（中間点以外の）どこか一箇所をそれに書き換えれば良い。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JavaでN個の入力を良い感じにリストにする方法</title>
      <link>https://t45k.github.io/kyopuro/stream/</link>
      <pubDate>Sun, 18 Apr 2021 18:05:46 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/stream/</guid>
      <description>&lt;p&gt;これが多分ベスト&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stream.generate(scanner::nextInt)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .limit(N)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .collect(Collectors.toList());&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;配列にしたいときは&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Stream.generate(scanner::nextInt)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .limit(N)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .mapToInt(Integer::intValue)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .toArray();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ABC198の解説</title>
      <link>https://t45k.github.io/kyopuro/abc198/</link>
      <pubDate>Sun, 18 Apr 2021 17:47:27 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc198/</guid>
      <description>&lt;p&gt;ABCEの4完。&#xA;その後Dを通した。&#xA;惜しかった。&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC198&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---div&#34;&gt;&#xA;  A - Div&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---div&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A君1個B君N-1個~A君N-1個B君1個までのN-1通り&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---palindrome-with-leading-zeros&#34;&gt;&#xA;  B - Palindrome with leading zeros&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---palindrome-with-leading-zeros&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;意外と面倒臭い&lt;br&gt;&#xA;後ろの0を全て削ってから回文確認をする&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---compass-walking&#34;&gt;&#xA;  C - Compass Walking&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---compass-walking&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;点(X,Y)までの距離がRの倍数だったらそのまま割る。&#xA;そうでなければ、直前まで直線に向かい、そこから2歩使って到着するのが最善。&lt;br&gt;&#xA;点(X,Y)がR未満の時答えが2になることに注意。&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---send-more-money&#34;&gt;&#xA;  D - Send More Money&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---send-more-money&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;覆面算の条件から、使えるアルファベットは10種類以内になる（逆に、アルファベットが11種類以上の時、鳩の巣原理から数字が被ってしまう）。&#xA;あとは0~9までの順列をアルファベットに対応させて検証すれば良い。&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---unique-color&#34;&gt;&#xA;  E - Unique Color&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---unique-color&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;木を深さ優先探索する。&#xA;今までに出現した色を記録する配列を&lt;code&gt;boolean[10^5+1]&lt;/code&gt;とすると、以下のようなdfsで答えが求まる。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;頂点&lt;code&gt;x&lt;/code&gt;に到達した時、&lt;code&gt;x&lt;/code&gt;の色に対応する配列の値が&lt;code&gt;false&lt;/code&gt;だった場合、&#xA;&lt;code&gt;x&lt;/code&gt;と頂点1からのパスに&lt;code&gt;x&lt;/code&gt;の色が存在しないので、&lt;code&gt;x&lt;/code&gt;はよい頂点になる。&lt;/li&gt;&#xA;&lt;li&gt;逆に配列が&lt;code&gt;true&lt;/code&gt;だった場合、よい頂点ではない。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;x&lt;/code&gt;の色に対応する配列の値を&lt;code&gt;true&lt;/code&gt;にする。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;x&lt;/code&gt;の子に対して再帰的に上の手順を当てる。&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;x&lt;/code&gt;から登っていく（再帰関数を抜ける）時、&lt;code&gt;x&lt;/code&gt;がよい頂点だったら、配列の値を&lt;code&gt;false&lt;/code&gt;にしておく。&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>作ったもの</title>
      <link>https://t45k.github.io/product/</link>
      <pubDate>Thu, 25 Mar 2021 11:07:17 +0900</pubDate>
      <guid>https://t45k.github.io/product/</guid>
      <description>&lt;h2 id=&#34;githubcontributionbothttpsgithubcomt45kghcbotforlambda&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/T45K/GHCBotForLambda&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHubContributionBot&lt;/a&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#githubcontributionbothttpsgithubcomt45kghcbotforlambda&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;GitHub のコントリビューション（草の生え具合）について Twitter で報告してくれるボット．&#xA;0 時になると&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;その日のコントリビューション数&lt;/li&gt;&#xA;&lt;li&gt;その日までの連続コントリビューション日数（Streak）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;を呟いてくれる．&lt;/p&gt;&#xA;&lt;p&gt;技術的には定時に GitHub のトップページをスクレイピングしてるだけ．&lt;/p&gt;&#xA;&lt;p&gt;何か&lt;a href=&#34;https://contributter.potato4d.me/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;似たようなサービス&lt;/a&gt;が出てきて草が生えた．&#xA;サービスとして公開しておくべきだった 🤔&lt;/p&gt;&#xA;&lt;h2 id=&#34;clionehttpsgithubcomt45kclione&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/T45K/CLIONE&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CLIONE&lt;/a&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#clionehttpsgithubcomt45kclione&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://t45k.github.io/img/logo.png&#34; width=&#34;20%&#34;&gt;&#xA;&lt;p&gt;類似コードの修正漏れを教えてくれるボット．&#xA;GitHub Apps を用いて設計されていて，PR の作成ごとに勝手に通知を飛ばしてくれる．&lt;/p&gt;&#xA;&lt;p&gt;論文は&lt;a href=&#34;https://sdl.ist.osaka-u.ac.jp/pman/pman3.cgi?D=675&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;nilhttpsgithubcomkusumotolabnil&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/kusumotolab/NIL&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NIL&lt;/a&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#nilhttpsgithubcomkusumotolabnil&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;類似コード検出ツール．&lt;/p&gt;&#xA;&lt;p&gt;既存のツールでは検出が難しかった「コピペされた後に大量の変更が行われた類似コード」を検出できるように設計されている．&#xA;また，N-gram と転置索引を組み合わせることで高速な検出が可能となっている．&lt;/p&gt;&#xA;&lt;p&gt;論文は&lt;a href=&#34;https://sdl.ist.osaka-u.ac.jp/pman/pman3.cgi?D=669&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;こちら&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;bitbucket-server-code-insights-pluginhttpsgithubcomt45kbitbucket-server-code-insights-plugin&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/T45K/Bitbucket-Server-Code-Insights-plugin&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bitbucket-Server-Code-Insights-plugin&lt;/a&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#bitbucket-server-code-insights-pluginhttpsgithubcomt45kbitbucket-server-code-insights-plugin&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;BitBucket Server で、PR の diff 上にコメントのようなものを表示できる機能、Code Insights を利用するための Jenkins プラグイン。&#xA;Checkstyle や SpotBugs といった静的解析ツールや、SonarQube と行ったシステムの実行結果を PR の diff 上に表示できる。&lt;/p&gt;&#xA;&lt;h2 id=&#34;back-merge-pluginhttpsgithubcomt45kback-merge-plugin&#34;&gt;&#xA;  &lt;a href=&#34;https://github.com/T45K/Back-Merge-plugin&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Back-Merge-plugin&lt;/a&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#back-merge-pluginhttpsgithubcomt45kback-merge-plugin&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;main ブランチが更新された時に、main ブランチから各派生ブランチ向けへの PR を作成する Jenkins プラグイン。&lt;/p&gt;</description>
    </item>
    <item>
      <title>大阪大学大学院情報科学研究科修士課程を修了した話</title>
      <link>https://t45k.github.io/blog/graduation/</link>
      <pubDate>Wed, 24 Mar 2021 21:17:20 +0900</pubDate>
      <guid>https://t45k.github.io/blog/graduation/</guid>
      <description>&lt;p&gt;2021年3月24日をもって修士課程を修了しました．&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34; data-partner=&#34;tweetdeck&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;3年間の戦績は&lt;br&gt;&lt;br&gt;論文誌採録*1&lt;br&gt;論文誌条件付き採録*1&lt;br&gt;国際会議採録*2&lt;br&gt;国際会議査読中*1&lt;br&gt;研究会原稿*3&lt;br&gt;で現状不採録0です&lt;br&gt;&lt;br&gt;対ありでした&lt;/p&gt;&amp;mdash; task@減塩 (@getupmax) &lt;a href=&#34;https://twitter.com/getupmax/status/1374691521174282242?ref_src=twsrc%5Etfw&#34;&gt;March 24, 2021&lt;/a&gt;&lt;/blockquote&gt;&#xA;&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;p&gt;研究室に所属して3年間色んなことがあった気がするので書き留めておきます．&lt;/p&gt;&#xA;&lt;h2 id=&#34;所属前&#34;&gt;&#xA;  所属前&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%89%80%e5%b1%9e%e5%89%8d&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;大学に入学してからプログラミングを始めたが結構楽しめていたので，「ソースコードを書くこと」について研究できれば良いなぁと漠然と考えていた．&#xA;阪大基礎工学部情報科学科では3回生の時に各研究室の先生に着いてゼミが行われるので，前期後期ともにソフトウェア工学の研究室のゼミに参加した．&#xA;前半は「リファクタリング」について，後半は「ソースコードメトリクス」についてのゼミで，前半にゼミを担当していた先生が何となく面白そうだったので，その研究室の配属を目標にした．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b4&#34;&gt;&#xA;  B4&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b4&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;4月&#34;&gt;&#xA;  4月&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#4%e6%9c%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;無事目標の研究室に配属．&#xA;配属後リファクタリング的なネタをやりたいと伝える．&#xA;論文を渡されてネタを探すように言われる．&#xA;当然研究室に入ったばかりで自分ですんなりネタを決めれるわけもなく，&#xA;指導教員の先生とミーティングをするも会話が噛み合わないことが多く，&#xA;険悪な雰囲気になることが多かった気がする&#xA;（主観的だが，口調が若干きつかったと感じることが多かった）．&#xA;この頃から何となく「この先生とは一生分かり合えないんだろうなぁ」って思うようになり，苦手になる．&lt;/p&gt;&#xA;&lt;h3 id=&#34;6月&#34;&gt;&#xA;  6月&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#6%e6%9c%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;ネタが決まる（先生が決めてくれた）のでとりあえずやっていく．&#xA;相変わらずミーティングでは嚙み合わないことが多かった．&#xA;まあB4のはじめの頃はみんなこんなもんだろうと思い込んで過ごす．&#xA;「研究室 辛い」などで検索するようになる．&#xA;自分の打たれ弱さを実感する．&lt;/p&gt;&#xA;&lt;h3 id=&#34;7月&#34;&gt;&#xA;  7月&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#7%e6%9c%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;院試休み．&#xA;研究室行かずに済んでラッキーくらいの気持ちでいた．&#xA;院試で研究室変えるのも手だったが負けた気分になるのでそのまま出した．&#xA;院試後はそのまま夏休みだったのでしばらく研究のことを忘れる．&lt;/p&gt;&#xA;&lt;h3 id=&#34;10月&#34;&gt;&#xA;  10月&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#10%e6%9c%88&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;研究が再開する．&#xA;少しずつ進めていくが，コミュニケーションも含めて上手くいかないことが圧倒的に多くなり，常に辛い状態になる．&#xA;この頃から常に死にたいと思うようになる．&#xA;バイク運転中に信号無視した車が突っ込んできたらなぁみたいなことをずっと考えていた．&#xA;しばらくそんな感じ．&lt;/p&gt;&#xA;&lt;p&gt;同時期に，たまたまTwitter上でPaizaの広告を見かける．&#xA;プログラミング能力を客観的に評価してもらえることがそれまでほとんどなかったことと，&#xA;研究が辛くなった時のために就職も考えないとということでとりあえずやってみる．&#xA;Paizaは解答解説がないので，プログラミング力を付けるのには不向きだと思い，&#xA;AtCoderをやり始める．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC196の解説</title>
      <link>https://t45k.github.io/kyopuro/abc196/</link>
      <pubDate>Sat, 20 Mar 2021 23:48:43 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc196/</guid>
      <description>&lt;p&gt;惜しくも4完．&#xA;E問題で一ヵ所凡ミスがあって1WAだった．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC196&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---difference-max&#34;&gt;&#xA;  A - Difference Max&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---difference-max&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;x-y&lt;/code&gt;が最大になるのは&lt;code&gt;x&lt;/code&gt;が最大かつ&lt;code&gt;y&lt;/code&gt;が最小の時．&#xA;&lt;code&gt;x&lt;/code&gt;の最大値は&lt;code&gt;b&lt;/code&gt;であり，&lt;code&gt;y&lt;/code&gt;の最小値は&lt;code&gt;c&lt;/code&gt;なので，答えは&lt;code&gt;b-c&lt;/code&gt;．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---round-down&#34;&gt;&#xA;  B - Round Down&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---round-down&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;100桁の小数が与えられるので，Xを数値として読み込むのは厳しい．&#xA;一旦文字列として読み込み，それの整数部を計算する．&#xA;文字列中に&lt;code&gt;.&lt;/code&gt;が存在しないならその文字列をそのまま，&#xA;存在するなら&lt;code&gt;.&lt;/code&gt;で分割し，前半の文字列を出力すれ良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---doubled&#34;&gt;&#xA;  C - Doubled&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---doubled&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;一見難しそうに見えるが，全探索すれば良い．&#xA;12桁の整数全ては調べられないが，条件は&lt;code&gt;前半と後半が等しい&lt;/code&gt;なので，&#xA;下6桁まで(&lt;code&gt;1~999,999&lt;/code&gt;)だけを確認すれば良い．&#xA;&lt;code&gt;1~999,999&lt;/code&gt;までの数値を2回繰り返した整数がNよりも小さいかを判定する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---hanjo&#34;&gt;&#xA;  D - Hanjo&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---hanjo&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;HW &amp;lt;= 16&lt;/code&gt;という条件から，全探索をしてみる．&#xA;1畳の畳の置き方の問題なので，半畳の方は考えなくて良い（余った箇所に詰めれる）．&#xA;部屋を1メートル毎に分割し&lt;code&gt;(i,j)&lt;/code&gt;と表現するとすると，&#xA;各&lt;code&gt;(i,j)&lt;/code&gt;に対して，&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;（置けるけど）畳を置かない&lt;/li&gt;&#xA;&lt;li&gt;畳を縦に置く&lt;/li&gt;&#xA;&lt;li&gt;畳を横に置く&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;の3通りの選び方があるので，再帰関数等を使って，&#xA;深さ優先探索で全てを試せば良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---filters&#34;&gt;&#xA;  E - Filters&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---filters&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;N&amp;lt;=2*10^5&lt;/code&gt;，&lt;code&gt;Q&amp;lt;=2*10^5&lt;/code&gt;から全ての&lt;code&gt;xi&lt;/code&gt;に対して各関数を当てると間に合わないので，&#xA;1つの関数を全&lt;code&gt;X&lt;/code&gt;に&lt;code&gt;log(Q)&lt;/code&gt;に当てることを考える．&#xA;そうすると，先に&lt;code&gt;X&lt;/code&gt;をソートしておいて，&#xA;関数を当てる箇所を二分探索で探せば良いことが何となく分かる．&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;ti=1&lt;/code&gt;のとき，&lt;code&gt;ai&lt;/code&gt;の値は最後に加算しても問題ない．&#xA;&lt;code&gt;sum&lt;/code&gt;などの変数に加算しておき，最後に計算する．&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ti=2(max)&lt;/code&gt;のとき，&amp;ldquo;ソート済み&lt;code&gt;X&lt;/code&gt;の&lt;code&gt;ai&lt;/code&gt;以下の値が全て&lt;code&gt;ai&lt;/code&gt;になる&amp;quot;と考える．&#xA;二分探索で&lt;code&gt;ai&lt;/code&gt;以下の値の場所を求めて，その場所から左側の値は全て&lt;code&gt;ai&lt;/code&gt;になることを記録しておく．&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;ti=3(min)&lt;/code&gt;のときも同様．&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>ARC113の解説</title>
      <link>https://t45k.github.io/kyopuro/arc113/</link>
      <pubDate>Mon, 22 Feb 2021 15:03:58 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/arc113/</guid>
      <description>&lt;p&gt;ABCの3完で緑パフォ．&lt;a href=&#34;https://github.com/T45k/kyopuro/tree/master/AtCoder/ARC/ARC113&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---abc&#34;&gt;&#xA;  A - A&lt;em&gt;B&lt;/em&gt;C&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---abc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;実は一番時間がかかった問題．&#xA;Aを固定した時に，BとCの組み合わせは&lt;code&gt;O(K)&lt;/code&gt;で求まる&#xA;（BがNの時，Cは&lt;code&gt;1~K/N&lt;/code&gt;の値を取りうるので，組み合わせの個数は&lt;code&gt;K/N&lt;/code&gt;になる）．&#xA;よって，Aを1からKまで動かしつつ，&lt;code&gt;B*C&amp;lt;=K/A&lt;/code&gt;を満たすB*Cの組み合わせを求めることになる．&#xA;Aを動かしてもK/Aが変わらないときは，B，Cの組み合わせの個数も変わらない．&#xA;なので，B，Cの組み合わせの個数をメモしておく．&lt;/p&gt;&#xA;&lt;p&gt;個人的には計算量の見積もりが厳しい．&#xA;入力を考えるのは簡単なので，とりあえず実装してみて一番時間がかかりそうな入力（2*10^5）を突っ込んで時間計ってみるのが良さそう．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---abc&#34;&gt;&#xA;  B - A^B^C&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---abc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A^B^Cの1の位は10で割った余りなので，(A%10)^B^Cと答えは同じ．&#xA;次にA%10の累乗の1の位がループする回数を求める．&#xA;例えば，2の場合，2の累乗の1の位は&lt;code&gt;2 -&amp;gt; 4 -&amp;gt; 8 -&amp;gt; 6 -&amp;gt;  2&lt;/code&gt;と4回毎にループすることが分かる．&#xA;これから，ループする回数をNとすると，B^CをNで割った余りを求めれば良い．&#xA;繰り返し二乗法を使えば&lt;code&gt;O(log(C))&lt;/code&gt;で&lt;code&gt;B^C % N&lt;/code&gt;を求められるので十分間に合う．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---string-invasion&#34;&gt;&#xA;  C - String Invasion&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---string-invasion&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;あるアルファベット&lt;code&gt;α&lt;/code&gt;が二回連続で並んでいるときに，その後ろにあるアルファベットを全て&lt;code&gt;α&lt;/code&gt;に置換できると考えると楽．&#xA;このとき，αの後ろにある全てのアルファベットの内，αではないアルファベットの個数回操作を行える．&#xA;この操作はなるべく後ろからしていくのが最適なので，以下の手順で解けばよい．&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;後ろからアルファベットを見ていく．この時，アルファベットの種類毎の個数を記録する．&lt;/li&gt;&#xA;&lt;li&gt;二回連続しているアルファベット&lt;code&gt;α&lt;/code&gt;があれば，これまで記録してきた&lt;code&gt;α&lt;/code&gt;ではないアルファベットの個数回操作を行える．&lt;/li&gt;&#xA;&lt;li&gt;操作を行うと，今見ている以降の全てのアルファベットが&lt;code&gt;α&lt;/code&gt;になるので，そのように個数を記録し直す．&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>鶏白湯ラーメンの作り方</title>
      <link>https://t45k.github.io/blog/toripaitan/</link>
      <pubDate>Mon, 22 Feb 2021 14:28:05 +0900</pubDate>
      <guid>https://t45k.github.io/blog/toripaitan/</guid>
      <description>&lt;p&gt;ラーメンが好きなので，鶏ガラを使って鶏白湯ラーメンを作りました．&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/ramen.JPG&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;材料1人前&#34;&gt;&#xA;  材料（1人前）&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9d%90%e6%96%991%e4%ba%ba%e5%89%8d&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;スープ&#34;&gt;&#xA;  スープ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%b9%e3%83%bc%e3%83%97&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;鶏ガラ2羽分&lt;/li&gt;&#xA;&lt;li&gt;玉ねぎ半個&lt;/li&gt;&#xA;&lt;li&gt;ニンニクひとかけ&lt;/li&gt;&#xA;&lt;li&gt;ショウガ適量&lt;/li&gt;&#xA;&lt;li&gt;（お好みで手羽元とかネギの青い部分とか）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;タレ&#34;&gt;&#xA;  タレ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%bf%e3%83%ac&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;醤油100cc&lt;/li&gt;&#xA;&lt;li&gt;みりん100cc&lt;/li&gt;&#xA;&lt;li&gt;（半分ずつでも良さそう）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;具材&#34;&gt;&#xA;  具材&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%85%b7%e6%9d%90&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;鶏モモ1枚（鶏チャーシュー用）&lt;/li&gt;&#xA;&lt;li&gt;玉ねぎ半個（薬味用）&lt;/li&gt;&#xA;&lt;li&gt;卵一個（味玉）&lt;/li&gt;&#xA;&lt;li&gt;（お好みでメンマ等）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;麺は既製品を使いました&lt;/p&gt;&#xA;&lt;h2 id=&#34;作り方&#34;&gt;&#xA;  作り方&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bd%9c%e3%82%8a%e6%96%b9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;タレの材料を混ぜ合わせて煮切る．&#xA;できたものを室温程度に冷ます．&lt;/li&gt;&#xA;&lt;li&gt;鶏ガラは解凍しておく．&#xA;鍋に水を張り鶏ガラを茹でる．&#xA;アクが出てきたら水を替える．&#xA;鍋にスープの材料と新しい水を入れ，8時間くらい炊く&#xA;（水が減ってきたら適宜足していく）．&lt;/li&gt;&#xA;&lt;li&gt;具材の鶏モモはスープと一緒に30分程度茹でる．&#xA;茹であがったものを冷ましておいたタレに漬けておく．&#xA;卵は半熟に茹で，これもタレに漬けておく．&#xA;玉ねぎはみじん切りにし，分量外の酢に漬けておく．&lt;/li&gt;&#xA;&lt;li&gt;スープを8時間程度炊いたら，中の具材を取り除いたうえで，&#xA;一人分のスープの量になるくらいまで煮詰める．&lt;/li&gt;&#xA;&lt;li&gt;器にスープ，タレ（全部使うと濃いので適量で），麺，具を入れて完成．&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;感想&#34;&gt;&#xA;  感想&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%84%9f%e6%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;スープ: 100点．メチャウマ．その辺のラーメン屋より旨い気がする&lt;br&gt;麺: 縮れてないほうが好き．まぁ既製品なので&lt;br&gt;チャーシュー: パサい．鶏肉をしっとり仕上げるのはむずそう&lt;br&gt;煮卵: 硬い．茹ですぎた&lt;br&gt;玉ねぎ酢漬け: 適量やと口がさっぱりしてええ感じ．若干主張が強い&lt;/p&gt;&amp;mdash; 教授のおごりで寿司@SIGSE (@getupmax) &lt;a href=&#34;https://twitter.com/getupmax/status/1363069728407777282?ref_src=twsrc%5Etfw&#34;&gt;February 20, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;</description>
    </item>
    <item>
      <title>ABC192の解説</title>
      <link>https://t45k.github.io/kyopuro/abc192/</link>
      <pubDate>Sun, 21 Feb 2021 17:56:33 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc192/</guid>
      <description>&lt;p&gt;研究も一段落付いたので競プロに復帰します．&lt;/p&gt;&#xA;&lt;p&gt;今回はABCDの4完．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC192&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---star&#34;&gt;&#xA;  A - Star&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---star&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Xは高々10^5なのでごり押しでもできますが，&#xA;100からXを100で割った余りを引くと&lt;code&gt;O(1)&lt;/code&gt;で求まります．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---unreadable-string&#34;&gt;&#xA;  B - uNrEaDaBlE sTrInG&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---unreadable-string&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;for文で回すだけ．&#xA;大文字，小文字判定はJavaだと&lt;code&gt;Character#isUpper(Lower)Case&lt;/code&gt;を使うと一発．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---kaprekar-number&#34;&gt;&#xA;  C - Kaprekar Number&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---kaprekar-number&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;一見難しそうに見えますが，&lt;code&gt;N&amp;lt;=10^9&lt;/code&gt;からNをソート対象の要素は高々9個なので，&#xA;K=10^5から毎回&lt;code&gt;f(x)&lt;/code&gt;を計算しても十分間に合います．&#xA;ということで&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;xをchar型配列に変換する&lt;/li&gt;&#xA;&lt;li&gt;g1がxを降順にソートして得られる値，g2が昇順ソートで得られる値になる&lt;/li&gt;&#xA;&lt;li&gt;x = f(x)&#xA;をK回繰り返せばOK&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;d---base-n&#34;&gt;&#xA;  D - Base n&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---base-n&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;E問題より解いた人が少なかったD問題．&lt;/p&gt;&#xA;&lt;p&gt;まずXが一文字の時，何進数であってもXのn進数表記の値は変わらないため，&#xA;&lt;code&gt;X &amp;lt;= M&lt;/code&gt;なら1，そうでなければ0を出力する．&lt;/p&gt;&#xA;&lt;p&gt;次にXが二文字以上の時は，伝家の宝刀二分探索をする．&#xA;dから10^18+1の範囲から初め，&#xA;XをN進数表記にしたときにMを超過しない最大のNを求める．&#xA;ちなみにXのN進数表記を計算するときは&lt;code&gt;BigInteger&lt;/code&gt;を使うことをオススメします&#xA;（オーバーフローを考慮したうえでlongを使うと1WAになった）．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---train&#34;&gt;&#xA;  E - Train&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---train&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;出発できる時刻を考慮したうえでDijkstraをするだけ．&lt;/p&gt;</description>
    </item>
    <item>
      <title>情報処理学会論文誌に論文が採録された話</title>
      <link>https://t45k.github.io/blog/ipsj_journal/</link>
      <pubDate>Sun, 17 Jan 2021 17:38:48 +0900</pubDate>
      <guid>https://t45k.github.io/blog/ipsj_journal/</guid>
      <description>&lt;p&gt;情報処理学会論文誌に卒論でやっていた研究が採録されました．情報は&lt;a href=&#34;https://sdl.ist.osaka-u.ac.jp/pman/pman3.cgi?D=677&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;こちら&lt;/a&gt;．&lt;/p&gt;&#xA;&lt;h2 id=&#34;論文誌とは&#34;&gt;&#xA;  論文誌とは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%ab%96%e6%96%87%e8%aa%8c%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;研究をしている以上，その成果を論文としてまとめる必要があります．&#xA;論文は大きく分けて以下の4種類に大別されます（僕が知る限り）．&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;論文誌論文&#xA;&lt;ul&gt;&#xA;&lt;li&gt;別名: ジャーナル（journal）&lt;/li&gt;&#xA;&lt;li&gt;研究の最終成果を投稿する場&lt;/li&gt;&#xA;&lt;li&gt;採録されると雑誌として掲載される&lt;/li&gt;&#xA;&lt;li&gt;学術的貢献が求められる&lt;/li&gt;&#xA;&lt;li&gt;査読が行われる（査読とは，投稿された論文が学術的な有用性，信頼性に足るものかを他の研究者が判断するプロセスを指す）&lt;/li&gt;&#xA;&lt;li&gt;一般的に採録率は低いらしい．&lt;a href=&#34;https://search.ieice.org/statistics.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;電子情報通信学会&lt;/a&gt;だと5割弱．&lt;/li&gt;&#xA;&lt;li&gt;投稿時に惜しくも採録に至らないと判定されても，条件付き採録として論文の修正を求められることが多い．&lt;/li&gt;&#xA;&lt;li&gt;国内だと情報処理学会や電子情報通信学会の論文誌に投稿することが多い&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;会議論文&#xA;&lt;ul&gt;&#xA;&lt;li&gt;別名: 予稿集（inproceedings）&lt;/li&gt;&#xA;&lt;li&gt;レベルがピンキリ．採録率もピンキリ&lt;/li&gt;&#xA;&lt;li&gt;投稿目的もピンキリ．研究の最終成果発表から，アイデアの議論まで&lt;/li&gt;&#xA;&lt;li&gt;基本的に査読がある&lt;/li&gt;&#xA;&lt;li&gt;トップの会議だと条件付き採録もあったりするらしい．普通は一発採録&lt;/li&gt;&#xA;&lt;li&gt;採録されると開催場所での発表が求められる．海外旅行に行ける&lt;/li&gt;&#xA;&lt;li&gt;学術的貢献だけじゃなくてアイデアの面白さ，発表映えするかとかも重要&lt;/li&gt;&#xA;&lt;li&gt;発表がある都合上，投稿締め切りが設けられる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;研究会論文&#xA;&lt;ul&gt;&#xA;&lt;li&gt;別名: 技術報告（report）&lt;/li&gt;&#xA;&lt;li&gt;基本的に研究途中での成果の報告，アイデアの議論が目的&lt;/li&gt;&#xA;&lt;li&gt;査読がない&lt;/li&gt;&#xA;&lt;li&gt;発表がメイン．国内旅行に行ける&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;学位論文&#xA;&lt;ul&gt;&#xA;&lt;li&gt;別名: thesis&lt;/li&gt;&#xA;&lt;li&gt;学位を取得するための論文&lt;/li&gt;&#xA;&lt;li&gt;卒論，修論は査読がない&lt;/li&gt;&#xA;&lt;li&gt;ので，書けば大丈夫&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;今回は論文誌論文として採録されました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;道のり&#34;&gt;&#xA;  道のり&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%81%93%e3%81%ae%e3%82%8a&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;2019年に書いた卒論の内容が2021年に採録されたことから察せられるように，&#xA;採録までの道のりが非常に長かったです．&#xA;そもそも卒論を書いてから国際学会投稿，論文誌投稿とステップを踏むことが多いのですが，&#xA;僕の場合は作ったツールのクオリティが低すぎたため，ツールを作り直して実験をし直すとこから始まりました．&#xA;この時プログラミングを指導してくれた一つ上の先輩には本当にお世話になりました．&#xA;このプログラミング指導のおかげで修士では特にツール作りに苦労することがなく研究を進められました．&lt;/p&gt;&#xA;&lt;p&gt;一方，既存のツールが動かないという問題のせいで実験は全然進みませんでした．&#xA;本当にM1のほとんどはツールを動かすのに苦心していたと思います．&#xA;結局技術的に強い友人に相談したところ，3日で動いたのでもったいない時間の使い方をしたなぁって気分になりました．&lt;/p&gt;&#xA;&lt;p&gt;結局論文を投稿できたのが2020年の2月初めで，条件付き採録通知が来たのが11月，&#xA;修正と再投稿を行い，採録されたのが2021年の1月となりました．&lt;/p&gt;&#xA;&lt;p&gt;感想としては，嬉しいのが半分，ようやく終わったと安心したのが半分です．&#xA;自分としてはこの研究テーマに自身がなかったので，早く終わらしたかったという気持ちもありました．&#xA;本当に時間がかかったので，採録されたのは達成感があります．&lt;/p&gt;&#xA;&lt;p&gt;最後に，論文投稿のきっかけをくれた教授，&#xA;何度も論文を添削してくれた指導教員，&#xA;そしてプログラミングを教えてくれた先輩に心から感謝します．&lt;/p&gt;</description>
    </item>
    <item>
      <title>APSEC2020に参加した話</title>
      <link>https://t45k.github.io/blog/apsec_2020/</link>
      <pubDate>Sat, 05 Dec 2020 00:12:03 +0900</pubDate>
      <guid>https://t45k.github.io/blog/apsec_2020/</guid>
      <description>&lt;p&gt;12/2~4にオンラインで開催されたAPSECに参加してきました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;apsecとは&#34;&gt;&#xA;  APSECとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#apsec%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../apsec_2019&#34; &gt;APSEC2019に参加した話&lt;/a&gt;参照．&lt;/p&gt;&#xA;&lt;p&gt;M2の4月終わりから研究し始めた，重複コードの修正支援ボットの論文をERA（Early Research Achievement）に投げました（&lt;a href=&#34;https://sdl.ist.osaka-u.ac.jp/pman/pman3.cgi?DOWNLOAD=536&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;論文&lt;/a&gt;）．&lt;br&gt;&#xA;Acceptance rateはTechnical Researchが36.9%（45/122），ERAが46.2%（12/26）らしかったです．&lt;br&gt;&#xA;ERAのacc. rateが高いのでレベルは推して知るべしという感じです．&lt;/p&gt;&#xA;&lt;h2 id=&#34;感想&#34;&gt;&#xA;  感想&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%84%9f%e6%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;コロナの影響で，APSECに限らず国際会議は軒並みオンラインになってしまいました．&lt;br&gt;&#xA;国際会議は，成果発表の他に観光という側面もあるので，そういった意味ではモチベーションはあまり高くなかったです．&lt;br&gt;&#xA;一方，オンラインのおかげ喋る内容を覚えずに済むという利点もありました．&lt;br&gt;&#xA;発表ですが，チェアの方すら質問しないという謎の現象が発生したおかげで，良くも悪くも英語での質疑応答がなかったです．&lt;/p&gt;&#xA;&lt;p&gt;オンライン会議の悪い側面として，聴衆が参加しにくいというのが挙げられるかなと感じました．&lt;br&gt;&#xA;現地開催の場合，現地にいるのであまり興味がないトラックに参加したり，その結果質疑が盛り上がったりすることがあると思います．&lt;br&gt;&#xA;一方，オンラインの場合は自分と関係ない発表を聞く必要がないので，あまり盛り上がらないと感じました（僕も自分のトラック以外一切参加しませんでした）．&lt;/p&gt;&#xA;&lt;p&gt;コロナが一刻も早く収束して，元のように会議ができればと思います．&lt;/p&gt;</description>
    </item>
    <item>
      <title>「九十九十九」読了</title>
      <link>https://t45k.github.io/blog/999/</link>
      <pubDate>Thu, 26 Nov 2020 16:19:02 +0900</pubDate>
      <guid>https://t45k.github.io/blog/999/</guid>
      <description>&lt;p&gt;&lt;strong&gt;苦しさを感じるなら、僕なんて愛さなくていいんだ&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;舞城王太郎の「九十九十九」を読みました．&#xA;この本はJDCトリビュートの一冊となっており，&#xA;清涼院流水のJDCシリーズに登場する登場人物九十九十九と同じ名前を持つ人物が主役となっています．&lt;/p&gt;&#xA;&lt;p&gt;内容としては，&#xA;やっぱり舞城王太郎特有のスピード感と超メタ表現のせいで難解になっていました．&#xA;とりあえず二周しましたが，全然分からなかったです．&#xA;作中作と再帰的な構成が本当によく分からなくなります．&lt;/p&gt;&#xA;&lt;p&gt;ただ，これがディスコ探偵水曜日の前に書かれた本だと言われると納得します（書き方や登場人物を含めていろんな共通点がある）．&#xA;ディスコ探偵水曜日が楽しめる人なら楽しく読めるのではないでしょうか．&#xA;繰り返し読むと理解が深まりそうではあるので，&#xA;購入を検討してむ良いかなと思いました．&lt;/p&gt;&#xA;&lt;p&gt;次は清涼院流水の「カーニバル・イブ」を読む予定です．&lt;/p&gt;</description>
    </item>
    <item>
      <title>西日本近似的一周旅行五日目</title>
      <link>https://t45k.github.io/blog/tour_day5/</link>
      <pubDate>Sat, 05 Sep 2020 18:49:05 +0900</pubDate>
      <guid>https://t45k.github.io/blog/tour_day5/</guid>
      <description>&lt;p&gt;五日目は帰宅の日でした．&#xA;走行距離は500kmほどです．&lt;/p&gt;&#xA;&lt;p&gt;まずはUFOラインを通って高知まで行きました．&#xA;UFOラインは愛媛と高知を結ぶ山道です．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/ufo_line.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;UFOラインは天空の道とも呼ばれるほど，道の標高が高いです（1,700mくらい）．&#xA;なので，周りの山々を一望でき，とても景色を楽しめました．&#xA;道自体は非常に狭いので，車で行く際には注意してください．&lt;/p&gt;&#xA;&lt;p&gt;高知では，ひろめ市場でカツオのたたきをいただきました．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/katsuo.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;カツオのハランボ（お腹の部分．マグロで言うトロ）が脂が乗っておりとても美味しかったです．&lt;/p&gt;&#xA;&lt;p&gt;お昼ご飯を食べ終わってから，大阪に帰りました．&#xA;途中大雨に振られたので，PAで休み休みしながら帰りました．&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../tour_day1/&#34; &gt;一日目&lt;/a&gt;&#xA;&lt;a href=&#34;../tour_day2/&#34; &gt;二日目&lt;/a&gt;&#xA;&lt;a href=&#34;../tour_day3/&#34; &gt;三日目&lt;/a&gt;&#xA;&lt;a href=&#34;../tour_day4/&#34; &gt;四日目&lt;/a&gt;&#xA;五日目&lt;/p&gt;</description>
    </item>
    <item>
      <title>西日本近似的一周旅行四日目</title>
      <link>https://t45k.github.io/blog/tour_day4/</link>
      <pubDate>Fri, 04 Sep 2020 18:48:58 +0900</pubDate>
      <guid>https://t45k.github.io/blog/tour_day4/</guid>
      <description>&lt;p&gt;四日目は指宿からフェリーを使って道後まで行きました．&#xA;走行距離は500kmくらいでした．&lt;/p&gt;&#xA;&lt;p&gt;まずはじめに宮崎県にある青島神社に行きました．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/aoshima_shrine1.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/aoshima_shrine2.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;青島神社は島全体が神社になっています．&#xA;また，島の周りの独特な形状をした岩は，自然にできたものだそうです．&#xA;フェリーの時間を考えてお昼ご飯は食べませんでした（が，実はこの後高速で道を間違えたので，結局ギリギリになりました）．&lt;/p&gt;&#xA;&lt;p&gt;大分の佐賀関からフェリーに乗り，愛媛へ向かいました．&#xA;バイクでフェリーに乗るのは初めてだったので，ワクワクしました．&lt;/p&gt;&#xA;&lt;p&gt;愛媛に着いてからは道後温泉を目指しました．&#xA;途中で海に近い駅として有名な下灘駅があったので立ち寄ってきました．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/shimonada_station.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;綺麗な夕焼けをバックにエモい写真を取りたかったのですが，曇っていたためうまく映えませんでした．&#xA;また，この駅は海のすぐ隣にあると思っていたのですが，実は道路を一本挟んでいます．&lt;/p&gt;&#xA;&lt;p&gt;夜は道後温泉の近くに止まりました．&#xA;お風呂は道後温泉本館に行きました．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/dougo.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;道後温泉本館はおそらく現存する最古の大衆浴場で，お風呂や扉の作りから古くからあるのが見て取れました．&#xA;全国的に有名ですが，現在も伝統を守っており，不必要な拡張などは行われていませんでした&#xA;（逆に言うと，思ったよりしょぼかったです．&#xA;中はシャワーと大きな湯船が一つだけでした）．&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../tour_day1/&#34; &gt;一日目&lt;/a&gt;&#xA;&lt;a href=&#34;../tour_day2/&#34; &gt;二日目&lt;/a&gt;&#xA;&lt;a href=&#34;../tour_day3/&#34; &gt;三日目&lt;/a&gt;&#xA;四日目&#xA;&lt;a href=&#34;../tour_day5/&#34; &gt;五日目&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>西日本近似的一周旅行三日目</title>
      <link>https://t45k.github.io/blog/tour_day3/</link>
      <pubDate>Thu, 03 Sep 2020 16:17:59 +0900</pubDate>
      <guid>https://t45k.github.io/blog/tour_day3/</guid>
      <description>&lt;p&gt;三日目は熊本を経由して鹿児島の指宿に行きました．&#xA;走行距離は400kmくらいです．&lt;/p&gt;&#xA;&lt;p&gt;大分から熊本へは，やまなみハイウェイを使いました．&#xA;やまなみハイウェイは景観が良いことで有名なのですが，&#xA;あいにく天気が崩れてしまい，霧がかって何も見えませんでした．&#xA;バイクで雨の中を移動したため，体がとても冷えた上に&#xA;バイクを傾けたら滑りそうになったこともあって死ぬかと思いました．&lt;/p&gt;&#xA;&lt;p&gt;熊本県では研究室の先生おすすめの天外天さんのラーメンを食べました．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/tengaiten.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;かかっているニンニクパウダーの香りが良く，美味しかったです．&lt;/p&gt;&#xA;&lt;p&gt;その後ひたすら南下し指宿温泉まで行きました．&#xA;また，指宿温泉の近所の龍宮神社に行きました．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/ryugu_shrine.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;龍宮神社はその名の通り，浦島太郎の物語の発祥となった神社です．&lt;/p&gt;&#xA;&lt;p&gt;晩御飯は近所のイオンで買った鶏のたたきと芋焼酎にしました．&#xA;イオンで普通に生食用の鶏肉が売ってたり，焼酎の品揃えが異様に良かったりしたところに鹿児島を感じました．&#xA;イオンから桜島が見えました．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/sakurajima.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../tour_day1/&#34; &gt;一日目&lt;/a&gt;&#xA;&lt;a href=&#34;../tour_day2/&#34; &gt;二日目&lt;/a&gt;&#xA;三日目&#xA;&lt;a href=&#34;../tour_day4/&#34; &gt;四日目&lt;/a&gt;&#xA;&lt;a href=&#34;../tour_day5/&#34; &gt;五日目&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>西日本近似的一周旅行二日目</title>
      <link>https://t45k.github.io/blog/tour_day2/</link>
      <pubDate>Wed, 02 Sep 2020 19:28:19 +0900</pubDate>
      <guid>https://t45k.github.io/blog/tour_day2/</guid>
      <description>&lt;p&gt;2日目は広島県を経由して大分まで行きました．&#xA;1日で500km以上移動したので結構疲れました．&lt;/p&gt;&#xA;&lt;p&gt;厳島神社（修理中の姿）&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/itsukushima_shrine.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;大鳥居が見れなくて残念でした．&lt;/p&gt;&#xA;&lt;p&gt;お昼ご飯の「あなごめし うえの」さんの穴子めし&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/anagomeshi.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;今まで，穴子は鰻の下位互換と考えていましたが，ここの穴子めしは本当に美味しくて，&#xA;その考えが覆されました．&#xA;穴子が肉厚で弾力があり，それが炭火で焼かれていて香ばしかったです．&lt;/p&gt;&#xA;&lt;p&gt;次に，山口にある錦帯橋に行きました．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/kintai_bridge.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;本来予定にはなかったのですが，どうやら広島，山口ツーリングではそこに行くのが鉄板らしかったので．&lt;/p&gt;&#xA;&lt;p&gt;その後，福岡を素通りして大分にある別府温泉に行きました．&#xA;本州と九州を繋ぐ橋で風が強すぎて半車線くらい流された時は死ぬかと思いました．&#xA;高速道路で道を間違えて次のICでUターンする経験もしました．&#xA;晩御飯は近くの居酒屋で取りました．&#xA;大分名物のとり天や豊後アジ，豊後サバを楽しみました．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/toriten.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/saba.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../tour_day1/&#34; &gt;一日目&lt;/a&gt;&#xA;二日目&#xA;&lt;a href=&#34;../tour_day3/&#34; &gt;三日目&lt;/a&gt;&#xA;&lt;a href=&#34;../tour_day4/&#34; &gt;四日目&lt;/a&gt;&#xA;&lt;a href=&#34;../tour_day5/&#34; &gt;五日目&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>西日本近似的一周旅行一日目</title>
      <link>https://t45k.github.io/blog/tour_day1/</link>
      <pubDate>Tue, 01 Sep 2020 19:28:19 +0900</pubDate>
      <guid>https://t45k.github.io/blog/tour_day1/</guid>
      <description>&lt;p&gt;1日目は島根県に行きました．&#xA;1日で400km近くバイクで移動しましたが，高速がメインだったのでそこまで疲れませんでした．&#xA;高速を降りてからヘルメットを確認してみると，移動中にぶつかったであろう小さい虫の死骸がたくさんへばりついていました&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;出雲大社&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/izumo_taisha.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;お昼ご飯の出雲そば．&#xA;出雲そばはそばを3つの器に分けて提供するのが特徴的です．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/izumo_soba.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;チェックインまで時間があったので松江城にも行きました．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/matsue_castle.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;宿に着いた途端に立ちゴケしてブレーキレバーを壊しました．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/brake_broken.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;夕飯は，松江のイオンで買った地酒とお寿司でした．&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/shimane_zizake.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&lt;/p&gt;&#xA;&lt;p&gt;一日目&#xA;&lt;a href=&#34;../tour_day2/&#34; &gt;二日目&lt;/a&gt;&#xA;&lt;a href=&#34;../tour_day3/&#34; &gt;三日目&lt;/a&gt;&#xA;&lt;a href=&#34;../tour_day4/&#34; &gt;四日目&lt;/a&gt;&#xA;&lt;a href=&#34;../tour_day5/&#34; &gt;五日目&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC177の解説</title>
      <link>https://t45k.github.io/kyopuro/abc177/</link>
      <pubDate>Sun, 30 Aug 2020 16:35:35 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc177/</guid>
      <description>&lt;p&gt;5完．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC177&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---dont-be-late&#34;&gt;&#xA;  A - Don&amp;rsquo;t be late&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---dont-be-late&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;規定の時間歩き切った際の距離が待ち合わせ場所までの距離以上であれば良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---substring&#34;&gt;&#xA;  B - Substring&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---substring&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;制約が緩いのでSの0以上&lt;code&gt;|S|-|T|&lt;/code&gt;以下文字を先頭とした部分文字列とTを比較すれば良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---sum-of-product-of-pairs&#34;&gt;&#xA;  C - Sum of product of pairs&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---sum-of-product-of-pairs&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;愚直にやると時間に間に合わない．&lt;br&gt;&#xA;答えは&lt;code&gt;A1 * (A2 + A3 + ... An) + A2 * (A3 + ... + An) + ... + Ai * (Ai+1 + ... + An) + ...&lt;/code&gt;なので，&#xA;A2からAnまでの累積和を取ってから掛け算を行えば良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---friends&#34;&gt;&#xA;  D - Friends&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---friends&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Union-Findで殴る．&lt;br&gt;&#xA;問題文から，Union-Findを使うと友達グループは簡単に求まる．&#xA;&lt;strong&gt;全ての人について「同じグループの中に友達がいない」という状況&lt;/strong&gt;を達成するためには，&#xA;一番大きい友達グループと同じサイズのグループに分割すれば良い．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC176の解説</title>
      <link>https://t45k.github.io/kyopuro/abc176/</link>
      <pubDate>Mon, 24 Aug 2020 17:05:57 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc176/</guid>
      <description>&lt;p&gt;気持ち良く5完．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC176&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---takoyaki&#34;&gt;&#xA;  A - Takoyaki&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---takoyaki&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;日本語をきちんと噛み砕かないと解けない問題．&#xA;答え自体は&lt;code&gt;(X + N - 1) / N * T&lt;/code&gt;するだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---multiple-of-9&#34;&gt;&#xA;  B - Multiple of 9&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---multiple-of-9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;各桁の合計を9で割るだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---step&#34;&gt;&#xA;  C - Step&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---step&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;前から順番に見ていき，今見ている人の身長が前の人以上になるように踏み台を使うのが最適．&lt;br&gt;&#xA;なので，人iが見てきた中で最大の身長より小さければ，その差を足し合わせ，&#xA;それより大きければ身長の最大値を更新すれば良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---wizard-in-maze&#34;&gt;&#xA;  D - Wizard in Maze&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---wizard-in-maze&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;意外と解ける人が少なかった問題&lt;br&gt;．&#xA;移動をコスト0，ワープをコスト1としてダイクストラすれば良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---bomber&#34;&gt;&#xA;  E - Bomber&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---bomber&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;これが緑diffなの意外．&lt;br&gt;&#xA;最初に各列，行ごとの爆破対象の個数を数えていく．&#xA;次に，列，行ごとで爆破対象が最大のもののみをフィルターする．&#xA;最後に残った列，行を組み合わせた際に爆破対象が最大となるものを選ぶ．&#xA;この時，選んだ列，行の交差点に爆破対象がない場合合計個数は&lt;code&gt;列の値 + 行の値&lt;/code&gt;，&#xA;そうでない場合は&lt;code&gt;列の値 + 行の値 - 1&lt;/code&gt;になる．&#xA;なので，交差点に爆破対象がないように選びたい．&#xA;爆破対象の数は高々M個なので，交差点がMを超過するとき，必ず爆破対象が存在しない交差点がする．&#xA;逆にM以下の場合は，全ての交差点を確認しても制限時間に間に合う．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC175の解説</title>
      <link>https://t45k.github.io/kyopuro/abc175/</link>
      <pubDate>Sun, 16 Aug 2020 19:58:10 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc175/</guid>
      <description>&lt;p&gt;オンタイム参加せず．&#xA;バチャやると3完だったので参加しなくてよかった&amp;hellip;&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/AtCoder/ABC/ABC175&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---rainy-season&#34;&gt;&#xA;  A - Rainy Season&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---rainy-season&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;高々3文字なので全ての場合を列挙した方が良さそう．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---making-triangle&#34;&gt;&#xA;  B - Making Triangle&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---making-triangle&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;高々&lt;code&gt;N &amp;lt;= 100&lt;/code&gt;なので3重ループでOK．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---walking-takahashi&#34;&gt;&#xA;  C - Walking Takahashi&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---walking-takahashi&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;個人的に結構難しかった問題．&lt;br&gt;&#xA;Xは最初から絶対値として扱って良い．&#xA;&lt;code&gt;X &amp;gt;= K * D&lt;/code&gt;の場合は&lt;code&gt;X - K * D&lt;/code&gt;が最適となる．&lt;br&gt;&#xA;そうでない場合．まず　&lt;code&gt;K2 = X / D&lt;/code&gt;とすると&lt;code&gt;0 &amp;lt; X - K2 * D &amp;lt; D&lt;/code&gt;を満たすK2が得られる．&#xA;ここからK2の偶奇がKと一致する場合そのKを，一致しない場合はK2+1が答えとなる．&lt;br&gt;&#xA;&lt;code&gt;K * D&lt;/code&gt;が64bitに収まらないに注意．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---moving-piece&#34;&gt;&#xA;  D - Moving Piece&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---moving-piece&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;場合分けが面倒くさくて実装量が多くなる問題&lt;br&gt;．&#xA;まず初めにマスのグループ分けを行う．&#xA;というのも始める場所によっては行けないマスが存在することもあるからである（例えば&lt;code&gt;2 1 4 3&lt;/code&gt;だと1からスタートすると1 -&amp;gt; 2 -&amp;gt; 1を繰り返す）．&#xA;グループ分けは愚直にシミュレーションしても良いし，UnionFindTreeを用いてもできる．&lt;br&gt;&#xA;分けたグループそれぞれに対して，スコアを計算する．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC174の解説</title>
      <link>https://t45k.github.io/kyopuro/abc174/</link>
      <pubDate>Tue, 04 Aug 2020 13:48:43 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc174/</guid>
      <description>&lt;p&gt;5完．&#xA;Fが水diffだったのに解けなくて厳しい．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC174&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---air-conditioner&#34;&gt;&#xA;  A - Air Conditioner&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---air-conditioner&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;条件分岐するだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---distance&#34;&gt;&#xA;  B - Distance&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---distance&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;与えられたN個の座標の原点からの距離を計算していくだけ．&lt;br&gt;&#xA;また，こういう時，小数点の計算などは誤差が発生しやすいので，平方根をとる計算はせず，&#xA;全て二乗で計算した方が良い．&#xA;int型だとオーバーフローするので注意．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---repsept&#34;&gt;&#xA;  C - Repsept&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---repsept&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;証明が難しい問題．&lt;br&gt;&#xA;C問題なので，時間いっぱい（10^7くらい）計算して答えが見つかれば答えを，見つかれなければ-1を出力する方針で解いた．&#xA;計算じたいは，最初に&lt;code&gt;X = 7, i = 1&lt;/code&gt;として，XがKで割れればiを出力し，&#xA;割れなければ&lt;code&gt;X &amp;lt;- (X * 10 + 7) % K, i &amp;lt;- i + 1&lt;/code&gt;と更新すれば良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---alter-altar&#34;&gt;&#xA;  D - Alter Altar&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---alter-altar&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;なんとなく解けた問題．&lt;br&gt;&#xA;答えは次のいずれかの小さい方&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;玉を赤か白に統一する&lt;/li&gt;&#xA;&lt;li&gt;swapして左側に赤，右側に白を揃える&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;下の方法だと，最左の白玉と最右の赤玉の間にある玉の赤と白の少ない方の個数が答えになる．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---logs&#34;&gt;&#xA;  E - Logs&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---logs&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;なんとなく解けた問題．想定解はにぶたん．&lt;br&gt;&#xA;まず&lt;code&gt;K &amp;lt;= 10^9&lt;/code&gt;という条件を無視すると，丸太iとその切断回数jに対して，&#xA;i/jの天井関数の降順に並べるようにした&#xA;優先度付きキューに丸太を入れて，K回先頭の割る回数を増やすという操作で解ける(以降，操作O)．&#xA;なので，&lt;code&gt;K&lt;/code&gt;を10^5くらいにできれば，この操作で大丈夫である．&#xA;&lt;code&gt;K&lt;/code&gt;を減らす方法として，はじめに丸太iの長さに応じて適切な切断回数を決めておき，&#xA;その切断回数の総和を&lt;code&gt;K&lt;/code&gt;から引いた上で，操作Oに入ればよい．&#xA;初期切断回数として，丸太の長さの総和に対する割合を利用できる．&#xA;つまり，丸太の長さの総和Sに対して，丸太iの長さがLiの時，&#xA;&lt;code&gt;K * (Li / S)&lt;/code&gt;を初期切断回数とすれば良い．&lt;/p&gt;</description>
    </item>
    <item>
      <title>「きまぐれロボット」読了</title>
      <link>https://t45k.github.io/blog/kimagure_robot/</link>
      <pubDate>Sat, 25 Jul 2020 20:46:40 +0900</pubDate>
      <guid>https://t45k.github.io/blog/kimagure_robot/</guid>
      <description>&lt;p&gt;星新一のきまぐれロボットを読みました．&lt;/p&gt;&#xA;&lt;p&gt;この本を読んだ経緯ですが，楽天で買い物をしたときにもらった&#xA;電子書籍の割引券の使い道に困っていたところ，&#xA;友人に星新一を進められたのがきっかけです．&lt;/p&gt;&#xA;&lt;p&gt;ついこの間までしばらく本をあまり読んでいなかったうえに，&#xA;ここ最近は長めのミステリばかり読んでいたので，&#xA;ショートショートは本当に久しぶり（もしかしたら初めて）でした．&#xA;伏線を積み重ねまくって最後にひっくり返すミステリに対して，&#xA;ショートショートは長くても3ページ程度でオチがつくので，&#xA;スッと読み進められました．&#xA;また，すぐ話が切り替わるので，飽きることなく最後まで読めました．&lt;/p&gt;&#xA;&lt;p&gt;思ったよりショートショートが面白かったので，&#xA;また電子書籍のクーポンをもらえたら星新一の本をもう一冊買っても良いかなと思いました．&lt;/p&gt;</description>
    </item>
    <item>
      <title>「ジョーカー 旧約探偵神話」読了</title>
      <link>https://t45k.github.io/blog/joker/</link>
      <pubDate>Sat, 18 Jul 2020 00:30:49 +0900</pubDate>
      <guid>https://t45k.github.io/blog/joker/</guid>
      <description>&lt;p&gt;清涼院流水の「ジョーカー 旧約探偵神話」を読みました．&lt;/p&gt;&#xA;&lt;p&gt;全編を通して「メタミステリ」「過去のミステリに対する挑発」がひしひしと伝わってくる内容でした．&#xA;特にミステリ四大奇書である「ドグラマグラ」「匣の中の失楽」「虚無への供物」「黒死館殺人事件」は文中で何度も言及されており，&#xA;リスペクトが感じられました．&#xA;本文中でミステリの30の原則を挙げ，それを達成しようとする姿勢から，ミステリの総決算だと評されるのもうなずけました．&lt;/p&gt;&#xA;&lt;p&gt;内容自体は前作コズミックと被っている部分もありましたが（作中作など），どんでん返しからのどんでん返しなど目を見張るような場面もいくつもありました．&#xA;ラスト（真犯人）自体は読了直後はあまり納得いきませんでしたが，この直後にコズミックの内容がくることを考えるとなんとなく理解できました．&lt;/p&gt;&#xA;&lt;p&gt;少し残念なところは，今作は時系列的に前作の前の話であり，前作中で今作の事件内容が言及されることもあったため，&#xA;誰が殺されないかなどが薄々わかってしまったことです．&lt;/p&gt;&#xA;&lt;p&gt;次回は，同じく清涼院流水のカーニバル・イブを読む予定です．&#xA;そろそろ目的だった舞城王太郎の九十九十九を読んでも良いかもです．&#xA;また，いつかミステリ四大奇書も読める日が来ればなぁとは感じています．&lt;/p&gt;</description>
    </item>
    <item>
      <title>エイシングプログラミングコンテスト2020の解説</title>
      <link>https://t45k.github.io/kyopuro/aising2020/</link>
      <pubDate>Mon, 13 Jul 2020 18:19:23 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/aising2020/</guid>
      <description>&lt;p&gt;4完．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/other/aising2020&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&#xA;実装が重かった印象．&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---number-of-multiples&#34;&gt;&#xA;  A - Number of Multiples&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---number-of-multiples&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;for文で回すだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---an-odd-problem&#34;&gt;&#xA;  B - An Odd Problem&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---an-odd-problem&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;for文で回すだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---xyz-triplets&#34;&gt;&#xA;  C - XYZ Triplets&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---xyz-triplets&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ゴリ押し全探索&lt;br&gt;&#xA;N&amp;lt;=10^4から，x,y,zそれぞれの最大値は10^2になることが分かる．&#xA;なので，x，yを1から10^2まで全探索しても計算量は全体で10^8に抑えられる．&lt;br&gt;&#xA;計算方法だが，xとyが決まればあとはzの二次方程式となるため，解の公式を使えば条件を満たすzが存在するかがO(1)で分かる．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---anything-goes-to-zero&#34;&gt;&#xA;  D - Anything Goes to Zero&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---anything-goes-to-zero&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;意外と難しかったらしい問題&lt;br&gt;&#xA;条件から，各Xiを最初に割るのは，popcount(X)±1となる．&#xA;また桁iが0の時，&lt;code&gt;Xi = X + 2^i&lt;/code&gt;，1の時，&lt;code&gt;Xi = X - 2^1&lt;/code&gt;となることから，&#xA;Xの値と各2^iの値を最初に求めておけば，最初の余を求めるところ以降は愚直にやっても間に合う．&#xA;Xの値と各2^iの値は非常に大きくなる可能性があるので，何らかの値で割った余りを利用したい．&#xA;ここで，&lt;code&gt;条件から，各Xiを最初に割るのは，popcount(X)±1となる&lt;/code&gt;ので，popcount(X)±1で割った余りを記録して，&#xA;桁iの値で使い分ければ良い.&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC173の解説</title>
      <link>https://t45k.github.io/kyopuro/abc173/</link>
      <pubDate>Mon, 13 Jul 2020 17:52:00 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc173/</guid>
      <description>&lt;p&gt;4完．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC173&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---payment&#34;&gt;&#xA;  A - Payment&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---payment&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;愚直にforループを回しても良いが，Nが最大10,000なのを踏まえて，&#xA;&lt;code&gt;10,000 - N&lt;/code&gt;をしてお釣りを1000で割った余りを求めると早い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---judge-status-summary&#34;&gt;&#xA;  B - Judge Status Summary&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---judge-status-summary&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;switch文で数え上げるだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---h-and-v&#34;&gt;&#xA;  C - H and V&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---h-and-v&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;典型的なbit全探索の問題．&#xA;縦，横でbit全探索して，該当行を赤く塗った後に盤上の黒いマスの個数を数える．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---chat-in-a-circle&#34;&gt;&#xA;  D - Chat in a Circle&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---chat-in-a-circle&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;なぜ解けたかよくわからなかった．&#xA;直感的には，Aiをソートした後に&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;A1 A2を列に加える&lt;/li&gt;&#xA;&lt;li&gt;A3，A4を交互に列に加える．A1 A3 A2 A4となる&lt;/li&gt;&#xA;&lt;li&gt;A5，A6，A7，A8を交互に列に加える．A1 A5 A3 A6 A2 A7 A4 A8となる&lt;/li&gt;&#xA;&lt;li&gt;これを繰り返す．&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;みたいな．&lt;/p&gt;</description>
    </item>
    <item>
      <title>「コズミック 世紀末探偵神話」読了</title>
      <link>https://t45k.github.io/blog/cosmic/</link>
      <pubDate>Wed, 01 Jul 2020 11:05:57 +0900</pubDate>
      <guid>https://t45k.github.io/blog/cosmic/</guid>
      <description>&lt;p&gt;清涼院流水の「コズミック 世紀末探偵神話」を読みました．&lt;/p&gt;&#xA;&lt;p&gt;清涼院流水は，僕が敬愛する作家である西尾維新や舞城王太郎が影響を受けたと公言している作家なので，どんな本を書いているのか昔から非常に興味がありました．&lt;/p&gt;&#xA;&lt;p&gt;読んだ感想ですが，久しぶりにページを捲る手が止まらない本を読んだ気がします．&#xA;最初は分厚い上に延々と殺人事件が続くので若干退屈でしたが，探偵の推理パートに入ると一気に面白くなりました．&#xA;特に，最後の九十九十九が推理をする直前，読者への挑戦状あたりはずっと興奮していました．&lt;/p&gt;&#xA;&lt;p&gt;犯人は実は作者みたいなメタ的な展開を予想していたのですが，きれいに納得のいく形で完結していたのも良いと思いました．&#xA;前半の作中作が大きなヒントになっていたとは思わなかったです．&lt;/p&gt;&#xA;&lt;p&gt;この流れで，次も清涼院流水のジョーカーを読む予定です．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC172の解説</title>
      <link>https://t45k.github.io/kyopuro/abc172/</link>
      <pubDate>Wed, 01 Jul 2020 10:38:47 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc172/</guid>
      <description>&lt;p&gt;C，D問題に緑diffが出て結構阿鼻叫喚な人が多かった回．&#xA;4完．&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC172&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---calc&#34;&gt;&#xA;  A - Calc&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---calc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;計算するだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---minor-change&#34;&gt;&#xA;  B - Minor Change&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---minor-change&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;問題文から，SとTの同じ位置で文字が異なる回数を数え上げれば良いことが分かる．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---tsundoku&#34;&gt;&#xA;  C - Tsundoku&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---tsundoku&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;貪欲だと解けない問題．&lt;br&gt;&#xA;A，Bどちらの本も上限が10^5なので，全ての組み合わせを見ると時間が足りなくなる．&#xA;ここで，&lt;strong&gt;本は上から見ていく&lt;/strong&gt;というルールから，累積和をとっても問題ないことに気付ける．&#xA;累積和が取れるので，Aは前から見ていき，Bは二分探索できることに気付けるので，あとは実装するだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---sum-of-divisors&#34;&gt;&#xA;  D - Sum of Divisors&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---sum-of-divisors&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;最近流行のエラトステネス的問題．&lt;br&gt;&#xA;全ての数字の約数の個数をそれぞれ求めていたら遅いので，前から素数を見て，その素数を約数として持つ値に約数として加えていく方針でやる．&lt;br&gt;&#xA;実装としては，以下のようにする．&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;長さNの配列を2つ用意する．&#xA;配列Aは1で，配列Bはその添字で初期化する．&#xA;配列Aは約数の個数を，配列Bは素数かどうかを判定するのに使う．&lt;/li&gt;&#xA;&lt;li&gt;2 &amp;lt;= i &amp;lt;= √Nとして，配列を順番に見ていく．&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Biが2以上の時，iは素数となる．なので，iの倍数jに対して，jがiでk回割れる(= log(i,j))とすると&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ak *= k + 1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Bk /= i ^ k&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;と更新する&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Biが1の時，iは素数なので何もしない&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;配列Aに約数の個数が記録できたので，√N以上の素数に注意しながら欲しい値を計算する．&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>ABC171の解説</title>
      <link>https://t45k.github.io/kyopuro/abc171/</link>
      <pubDate>Tue, 30 Jun 2020 22:33:15 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc171/</guid>
      <description>&lt;p&gt;難易度が暴落した回．&lt;br&gt;&#xA;5完．&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC171&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---αlphabet&#34;&gt;&#xA;  A - αlphabet&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---%ce%b1lphabet&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ．&#xA;Javaなら&lt;code&gt;Character#isUpperCase&lt;/code&gt;とかが使える．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---mix-juice&#34;&gt;&#xA;  B - Mix Juice&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---mix-juice&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ソートして前からK個選ぶ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---one-quadrillion-and-one-dalmatians&#34;&gt;&#xA;  C - One Quadrillion and One Dalmatians&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---one-quadrillion-and-one-dalmatians&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;与えられた数字を26進数に変換する問題．&lt;br&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Nをデクリメントし&lt;/li&gt;&#xA;&lt;li&gt;Nを26で割ったあまりを求め(これを使う)&lt;/li&gt;&#xA;&lt;li&gt;N /= 26 をする&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;を繰り返す．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---replacing&#34;&gt;&#xA;  D - Replacing&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---replacing&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;C問題よりわかりやすい．&lt;br&gt;&#xA;最初に全ての和Sと，それぞれの数字が何回出てくるかを記録しておく．&#xA;各クエリ毎に以下の操作をすれば良い．&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;与えられたCに対して，SからC*(Cの出現回数)を引く&lt;/li&gt;&#xA;&lt;li&gt;与えられたDに対して，SにD*(Cの出現回数)を加える&lt;/li&gt;&#xA;&lt;li&gt;Dの出現回数にCの出現回数を加える&lt;/li&gt;&#xA;&lt;li&gt;Cの出現回数を0にする&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;e---red-scarf&#34;&gt;&#xA;  E - Red Scarf&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---red-scarf&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;まさかの茶diff．Nが偶数という制約があるのを知らんかった&amp;hellip;&lt;br&gt;&#xA;すぬけ君iのスカーフに書かれた整数をbiとすると&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a1 =      b2 ^ b3 ^ ... ^ bn&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a2 = b1 ^      b3 ^ ... ^ bn&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a3 = b1 ^ b2 ^      ... ^ bn&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;であることが分かる．&#xA;また，排他的論理和の性質から&lt;code&gt;x ^ x = 0&lt;/code&gt;なので，以下が成り立つ．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC170の解説</title>
      <link>https://t45k.github.io/kyopuro/abc170/</link>
      <pubDate>Sat, 20 Jun 2020 11:52:18 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc170/</guid>
      <description>&lt;p&gt;無念の3完．&#xA;&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/AtCoder/ABC/ABC170&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---five-variables&#34;&gt;&#xA;  A - &#x9;Five Variables&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---five-variables&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ．&#xA;Listを作って&lt;code&gt;List#indexOf&lt;/code&gt;で探すと楽．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---crane-and-turtle&#34;&gt;&#xA;  B - Crane and Turtle&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---crane-and-turtle&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ツルカメ算．&#xA;ループを回す．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---forbidden-list&#34;&gt;&#xA;  C - Forbidden List&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---forbidden-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;解答が燃えた問題．&lt;br&gt;&#xA;Xが100以下なので，答えは101以下になる．&#xA;したがって，0から101までの，数列に含まれていない数字に対してXとの差を計算するだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---not-divisible&#34;&gt;&#xA;  D - Not Divisible&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---not-divisible&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;解けなかった．&lt;br&gt;&#xA;エラトステネスの篩のイメージ．&#xA;数列A中の最大値をAmaxとすると，数列Aを昇順に見て&lt;code&gt;sqrt(Amax)&lt;/code&gt;までの数字の倍数を全て消す作業をする．&#xA;最後に残った数字の中でダブりがないものが答え．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---smart-infants&#34;&gt;&#xA;  E - Smart Infants&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---smart-infants&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;データ構造で殴る問題．&#xA;Javaの標準ライブラリにMultiSetはないので少し考える必要がある．&#xA;今回は各幼稚園の園児のレートをTreeSetで，全ての幼稚園の最小値をセグ木で持つと，転園は以下の操作で行われる．&#xA;また，各園児が現在所属している幼稚園の情報を持つとする．&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Cjの園児が所属している幼稚園(TreeSet)からCjを消す．&lt;/li&gt;&#xA;&lt;li&gt;その幼稚園に関してセグ木の値を更新する．もし幼稚園に園児がいないなら&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;とする．&lt;/li&gt;&#xA;&lt;li&gt;幼稚園DjにCjを加える．&lt;/li&gt;&#xA;&lt;li&gt;幼稚園Djに関してセグ木の値を更新する．&lt;/li&gt;&#xA;&lt;li&gt;セグ木の全ての範囲に対してクエリを投げる．これが平等さになる．&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>東京海上日動プログラミングコンテスト2020の解説</title>
      <link>https://t45k.github.io/kyopuro/tokiomarine2020/</link>
      <pubDate>Sun, 14 Jun 2020 18:55:26 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/tokiomarine2020/</guid>
      <description>&lt;p&gt;3完．&#xA;&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/AtCoder/other/tokiomarine2020&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---nickname&#34;&gt;&#xA;  A - Nickname&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---nickname&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;与えられた文字列の先頭3文字を抜き出すだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---tag&#34;&gt;&#xA;  B - Tag&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---tag&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;非鬼が鬼より右側にいる場合，BはAに捕まらいためには右側に逃げるのが最適となる．&#xA;鬼と非鬼がT秒移動した時にいる箇所は，&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;鬼: &lt;code&gt;A + V*T&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;非鬼: &lt;code&gt;B + W*T&lt;/code&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;となる．&#xA;鬼の座標が非鬼の座標以上に右側にいる(=より座標が大きい)と捕まるので，それを判定するだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---lamps&#34;&gt;&#xA;  C - Lamps&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---lamps&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://imoz.jp/algorithms/imos_method.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;いもす法&lt;/a&gt;をすると1回の操作はO(N)で達成できるので，K回やるとO(NK)となる(いもす法のやり方: Aiの値がdの時，座標&lt;code&gt;i-d&lt;/code&gt;に+1，座標&lt;code&gt;i+d+1&lt;/code&gt;に-1を加え，最後に累積和する)．&#xA;O(NK)なので，最大で4*10^10程度の計算量となってしまいそうだが，ここで問題文から以下のことが言える．&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;全ての電球の明るさが&lt;code&gt;N&lt;/code&gt;となった場合，それ以降の操作で明るさは増えないため，そこで操作を打ち切って良い&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;操作回数が最大になるのはN=10^5，K=10^5，全ての電球の明るさの初期値が0の時なので，これを試してみると時間に十分間に合う．&lt;/p&gt;&#xA;&lt;p&gt;あとはやるだけ．&lt;/p&gt;&#xA;&lt;p&gt;解答を見ると，操作回数はO(log N)で抑えられるらしい．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC169の解説</title>
      <link>https://t45k.github.io/kyopuro/abc169/</link>
      <pubDate>Mon, 01 Jun 2020 13:25:09 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc169/</guid>
      <description>&lt;p&gt;久々のABC水パフォ．&#xA;&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/AtCoder/ABC/ABC169&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---multiplication-1&#34;&gt;&#xA;  A - Multiplication 1&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---multiplication-1&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;読み込んで掛け算して出力するだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---multiplication-2&#34;&gt;&#xA;  B - Multiplication 2&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---multiplication-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;与えられた数字の中に0があれば確定で0．&#xA;それ以外の場合，それぞれ掛けて10^18を越えるかを確認すれば良い．&#xA;Javaだと&lt;code&gt;BigInteger&lt;/code&gt;が使える．&#xA;比較は&lt;code&gt;BigInteger#compareTo&lt;/code&gt;で，0より大きければ1が返るっぽい．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---multiplication-3&#34;&gt;&#xA;  C - Multiplication 3&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---multiplication-3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;罠．&lt;br&gt;&#xA;Javaだと&lt;code&gt;BigDecimal&lt;/code&gt;が使える．&#xA;解説通りにやるとするなら，一旦文字列で読み込んで，小数点を消した上で整数に変換すると良さそう．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---div-game&#34;&gt;&#xA;  D - Div Game&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---div-game&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;まずは素因数分解する．&#xA;問題の条件から素数pに対して，p^1，p^2，p^3，&amp;hellip;，p^kと割っていくのが最適となる．&#xA;したがって，各素数の出現回数からkを求めれば良い．&#xA;p^kまで作るには，出現回数は&lt;code&gt;1+2+3+...k=k(k+1)/2&lt;/code&gt;個必要となる．&#xA;これは，kを1から全部列挙して探せば良い．&#xA;出現回数の最大値は，N&amp;lt;=10^12≒2^40から高々40回程度なので，全列挙しても十分間に合う．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---count-median&#34;&gt;&#xA;  E - Count Median&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---count-median&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;たまたま解けた．&lt;br&gt;&#xA;とても単純化してみる．&lt;/p&gt;&#xA;&lt;h3 id=&#34;nが奇数の時&#34;&gt;&#xA;  Nが奇数の時&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#n%e3%81%8c%e5%a5%87%e6%95%b0%e3%81%ae%e6%99%82&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;N=3で，以下のような時を考える．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;|---|  |---|  |---|&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a   b  c   d  e   f&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;この時，明らかに中央値はc~dの整数値になる．&lt;br&gt;&#xA;このことから，何となく中央値は(0-indexedで)前からN/2番目の開始位置と後ろからN/2番目の終了位置の間の整数値であると考えられる．&lt;/p&gt;</description>
    </item>
    <item>
      <title>NOMURA プログラミングコンテスト2020の解説</title>
      <link>https://t45k.github.io/kyopuro/nomura2020/</link>
      <pubDate>Sun, 31 May 2020 15:57:56 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/nomura2020/</guid>
      <description>&lt;p&gt;何とか3完．&#xA;&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/AtCoder/others/nomura2020&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---study-scheduling&#34;&gt;&#xA;  A - Study Scheduling&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---study-scheduling&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;時間を分に直して引き算するだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---postdocs&#34;&gt;&#xA;  B - Postdocs&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---postdocs&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;例えば，&lt;code&gt;?&lt;/code&gt;を&lt;code&gt;P&lt;/code&gt;にした場合，その右側に&lt;code&gt;D&lt;/code&gt;がある時だけ指数が1増えるのに対して，&lt;code&gt;D&lt;/code&gt;にすると確実に指数が1増えることから，全ての&lt;code&gt;?&lt;/code&gt;を&lt;code&gt;D&lt;/code&gt;に変換するのが最適になる．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---folia&#34;&gt;&#xA;  C - Folia&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---folia&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;解けてる人多くてびっくりした．&#xA;厳密な証明はeditorial参照．&lt;br&gt;&#xA;初めに木を上から下の方へ見ていって，それぞれの深さでの葉でない頂点(以降，節)の最大値数を求めていく．&#xA;深さiの葉の数がAiの時，深さi-1での節の数がAi/2未満の時，Ai個の葉を生成できないので条件を満たす木は存在しない．&lt;br&gt;&#xA;次に，木を下から上へ見ていき，各深さでの節の数を最適化していく．&#xA;木の頂点数を最大にするためには，各深さiに対して節の数を最大化したい．&#xA;節の数は，深さi+1の頂点数より大きくできない（全ての節は1つ以上の子を持つ），また，初めの操作により，深さiの節の個数から(深さi+1の頂点)個の子を産めることが分かっている．&#xA;したがって，深さiでの節の数の最大値は&lt;code&gt;min(深さiでの節の数，深さi+1での頂点の数)&lt;/code&gt;となる．&#xA;あとはこれを再帰的に計算して足し合わせるだけ．&lt;br&gt;&#xA;この解き方だと，n=0がコーナーケースになることに注意(&lt;code&gt;n=0&lt;/code&gt;, &lt;code&gt;A0=1&lt;/code&gt;の時のみ答えが&lt;code&gt;1&lt;/code&gt;で，それ以外は&lt;code&gt;-1&lt;/code&gt;)&lt;/p&gt;</description>
    </item>
    <item>
      <title>「阿修羅ガール」読了</title>
      <link>https://t45k.github.io/blog/ashura-girl/</link>
      <pubDate>Thu, 28 May 2020 00:23:42 +0900</pubDate>
      <guid>https://t45k.github.io/blog/ashura-girl/</guid>
      <description>&lt;p&gt;舞城王太郎の阿修羅ガールを読みました．&lt;/p&gt;&#xA;&lt;p&gt;一人称視点で進んでいくのですが，主人公の心の声の喋り方がとても真に迫った感じだったのが印象的でした．&#xA;特に，第二部の後半の進め方がすごく理解しやすく，場面をイメージしやすかったです．&#xA;他に，ディスコ探偵水曜日でも登場した桜月淡雪が出てきたのはニヤリとしました．&#xA;舞城王太郎の作品で西暁が出てこないのは珍しいのではないでしょうか．&lt;/p&gt;&#xA;&lt;p&gt;今回，人生で初めて電子書籍を試してみました．&#xA;読んだページの量で達成感を感じる人なので，どのくらいのページ読んだのかが直感的にわからない電子書籍は読書の達成感は薄かったです．&lt;/p&gt;&#xA;&lt;p&gt;次は，舞城王太郎と西尾維新が崇拝している（であろう）清涼院流水の「コズミック」を読む予定です．&lt;/p&gt;</description>
    </item>
    <item>
      <title>AGC044の解説</title>
      <link>https://t45k.github.io/kyopuro/agc044/</link>
      <pubDate>Wed, 27 May 2020 23:41:26 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/agc044/</guid>
      <description>&lt;p&gt;太陽でしたがNoSubなのでレートは変わらなかったです(NoSubというシステムをよく理解していなかったので，入力するのではないかとドキドキしてました)．&#xA;A，Bの解説．&#xA;&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/AtCoder/AGC/AGC044&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---pay-to-win&#34;&gt;&#xA;  A - Pay to Win&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---pay-to-win&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;400点問題だと高を括って望んだら痛い目にあった．&lt;br&gt;&#xA;簡単に説明するとNから2，3，5で割っていくだけ．&#xA;メモ化(b|d)fs．&#xA;メモは値をキー，コストをバリューとしたMapで持つ．&#xA;bfsで解く場合は，キューから取り出した値Kに対して&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;2で割れるか試す&#xA;&lt;ul&gt;&#xA;&lt;li&gt;割れる場合: &lt;code&gt;現在のコスト+min(a,d*K/2)&lt;/code&gt;（2で割るか，同じ値だけ1を引くかのコストが小さい方）がメモ[K/2]を更新できなければ何もしない．更新できれば，K/2をキューに追加する．&lt;/li&gt;&#xA;&lt;li&gt;破れない場合: K+1とK-1は2で割れるので，割れる場合と同じ処理をする．&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;3で割れるか試す&#xA;&lt;ul&gt;&#xA;&lt;li&gt;割れる場合: &lt;code&gt;現在のコスト+min(b,d*2*K/3)&lt;/code&gt;がメモ[K/3]を更新できなければ何もしない．更新できれば，K/3をキューに追加する．&lt;/li&gt;&#xA;&lt;li&gt;破れない場合: K-K%3とK+3-K%3はKで割り切れるので，割れる場合と同じ処理をする&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;5で割れるか試す．略&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;をやるだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---joker&#34;&gt;&#xA;  B - Joker&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---joker&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;計算量の見積もりが難しい問題．&lt;br&gt;&#xA;N&amp;lt;=500に対して，与えられる座標の数はN^2なので，座標が与えられる度に(d|b)fsすると間に合わないように見える．&#xA;しかし，実は間に合う．&#xA;1回の(b|d)fsでいくつかの座標の端からの距離が減る&#xA;では全ての走査で行われる操作は合計でO(n^3)で収まる&#xA;例えばN=6の時，最初の各座標の端からの距離は以下のようになる&lt;br&gt;&#xA;0 0 0 0 0 0&lt;br&gt;&#xA;0 1 1 1 1 0&lt;br&gt;&#xA;0 1 2 2 1 0&lt;br&gt;&#xA;0 1 2 2 1 0&lt;br&gt;&#xA;0 1 1 1 1 0&lt;br&gt;&#xA;0 0 0 0 0 0&lt;br&gt;&#xA;全てを走査しきる（= 各座標の端からの距離が0になる）のは 4*4 + 2*2(四角形を狭めていくイメージ)回の操作が必要となる．&#xA;合計するとだいたい (N^3)/6 らしいので条件下で間に合う．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC168の解説</title>
      <link>https://t45k.github.io/kyopuro/abc168/</link>
      <pubDate>Tue, 19 May 2020 19:54:50 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc168/</guid>
      <description>&lt;p&gt;速解き回だったけど速解き失敗．&#xA;4完．&#xA;&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/AtCoder/ABC/ABC168&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a----therefore&#34;&gt;&#xA;  A - ∴ (Therefore)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a----therefore&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;switch&lt;/code&gt;文を使う問題．&#xA;コードが長くなりがち．&#xA;Kotlinだと気持ちよく書ける．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-mysql&#34; data-lang=&#34;mysql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fun main() &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Scanner(System.`&lt;span style=&#34;font-weight:bold&#34;&gt;in&lt;/span&gt;`)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .run &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-weight:bold&#34;&gt;when&lt;/span&gt; (this.nextInt() % 10) &lt;span style=&#34;&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                3 -&amp;gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;bon&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                0, 1, 6, 8 -&amp;gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;pon&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;font-weight:bold&#34;&gt;else&lt;/span&gt; -&amp;gt; &lt;span style=&#34;font-style:italic&#34;&gt;&amp;#34;hon&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;&#34;&gt;}&lt;/span&gt;.apply(::println)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;b----triple-dots&#34;&gt;&#xA;  B - &amp;hellip; (Triple Dots)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b----triple-dots&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ．&#xA;Sの長さがKを上回っているとき，&lt;code&gt;S.substring(0, K.length)&lt;/code&gt;．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c----colon&#34;&gt;&#xA;  C - : (Colon)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c----colon&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;数学．&lt;br&gt;&#xA;極座標か余弦定理を使うと簡単に解ける．&#xA;意外と二つの針の間の角度を求めるのが曲者．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d----double-dots&#34;&gt;&#xA;  D - .. (Double Dots)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d----double-dots&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;嫌な気持ちになります．&lt;br&gt;&#xA;問題の条件から何となく根付き木のような構造が思い浮かぶので，幅探するだけ．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC167の解説</title>
      <link>https://t45k.github.io/kyopuro/abc167/</link>
      <pubDate>Mon, 11 May 2020 11:43:31 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc167/</guid>
      <description>&lt;p&gt;4完．&#xA;&lt;a href=&#34;https://github.com/t45k/tree/master/AtCoder/ABC/ABC167&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---registration&#34;&gt;&#xA;  A - Registration&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---registration&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;文字列Sと文字列Tの最後の文字を消した文字列が同等か確認する．&#xA;javaだと &lt;code&gt;S.equals(T.substring(0, S.length))&lt;/code&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---easy-linear-programming&#34;&gt;&#xA;  B - Easy Linear Programming&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---easy-linear-programming&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A,B,Cの順番になるべく多くカードを取ると最大値になるので&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;KがA以下なら1のカードをK枚取って和はK&lt;/li&gt;&#xA;&lt;li&gt;Kが(A+B)以下なら，1のカードをA枚，0のカードを取れるだけ取って和はA&lt;/li&gt;&#xA;&lt;li&gt;それ以外なら1をA枚，0をB枚，-1を(K-(A+B))枚取って和は2A+B+K&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;c---skill-up&#34;&gt;&#xA;  C - Skill Up&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---skill-up&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;bit全探索するだけ問題．&lt;br&gt;&#xA;N&amp;lt;=12なので，全て試しても2^12≒4000通りなので十分間に合う．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---teleporter&#34;&gt;&#xA;  D - Teleporter&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---teleporter&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ABC030_Dとほぼ同じ問題．&lt;br&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;knのとき&#34;&gt;&#xA;  K&amp;lt;=Nのとき&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#kn%e3%81%ae%e3%81%a8%e3%81%8d&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;K回のテレポートを愚直に計算しても間に合う．&lt;/p&gt;&#xA;&lt;h3 id=&#34;knの時&#34;&gt;&#xA;  K&amp;gt;Nの時&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#kn%e3%81%ae%e6%99%82&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;鳩の巣原理的に考えると，必ずどこかでループが発生することになる．&#xA;なので，1ループで訪れる町の数でmodを取る．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---colorful-blocks&#34;&gt;&#xA;  E - Colorful Blocks&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---colorful-blocks&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;時間内に解けなかった．&lt;br&gt;&#xA;全て隣り合わない組み合わせは m*(m-1)^(n-1)になる．&#xA;1組隣り合う場合，その隣り同士は同じ色なので ↑/(m-1)&#xA;↑に組み合わせをかける．一つ右とペアになると考えれば n-1C1 通り&#xA;2組以降も同じように考える．&lt;/p&gt;</description>
    </item>
    <item>
      <title>「クビシメロマンチスト 人間失格・零崎人識」読了</title>
      <link>https://t45k.github.io/blog/easy_love_easy_no/</link>
      <pubDate>Wed, 06 May 2020 20:45:52 +0900</pubDate>
      <guid>https://t45k.github.io/blog/easy_love_easy_no/</guid>
      <description>&lt;p&gt;西尾維新の戯言シリーズ2作目であるクビシメロマンチストを読みました．&#xA;&lt;a href=&#34;https://www.amazon.co.jp/%E3%82%AF%E3%83%93%E3%82%B7%E3%83%A1%E3%83%AD%E3%83%9E%E3%83%B3%E3%83%81%E3%82%B9%E3%83%88-%E4%BA%BA%E9%96%93%E5%A4%B1%E6%A0%BC%E3%83%BB%E9%9B%B6%E5%B4%8E%E4%BA%BA%E8%AD%98-%E8%AC%9B%E8%AB%87%E7%A4%BE%E6%96%87%E5%BA%AB-%E8%A5%BF%E5%B0%BE%E7%B6%AD%E6%96%B0-ebook/dp/B01EV0NMIG/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;crid=2WNUAO24W551I&amp;amp;dchild=1&amp;amp;keywords=%E3%82%AF%E3%83%93%E3%82%B7%E3%83%A1%E3%83%AD%E3%83%9E%E3%83%B3%E3%83%81%E3%82%B9%E3%83%88&amp;amp;qid=1588765443&amp;amp;sprefix=%E3%81%8F%E3%81%B3%E3%81%97%E3%82%81%2Caps%2C293&amp;amp;sr=8-1&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;amazon&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;高校生くらいの時に一度読んだのですが，面白かったのを覚えていたため古本で購入しました．&#xA;2度目でしたがやっぱり面白くかったです．&#xA;中二臭い言い回し，叙述トリック，そして完璧なラストと個人的にツボにはまる部分が多く，24年間生きてきて面白かった本暫定一位です．&#xA;西尾維新といえば物語シリーズが有名ですが，このシリーズも負けず劣らず面白いのでぜひ皆さんに読んで欲しいとは思います．&#xA;区分的にはライトノベルになるので，10年後，20年後にはまた違った感想を抱くかもしれません．&lt;/p&gt;&#xA;&lt;p&gt;アニメ化期待してます．&lt;/p&gt;</description>
    </item>
    <item>
      <title>競プロ</title>
      <link>https://t45k.github.io/kyopuro_index/</link>
      <pubDate>Wed, 06 May 2020 18:26:46 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro_index/</guid>
      <description>&lt;p&gt;競プロの解説とか．&#xA;Java でやっているのでコード例は Java になります．&lt;br&gt;&#xA;リポジトリは&lt;a href=&#34;https://github.com/t45k/kyopuro&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;こちら&lt;/a&gt;．&lt;br&gt;&#xA;自作ライブラリのドキュメントは&lt;a href=&#34;../kyopuro/doc/library/package-summary.html&#34; &gt;こちら&lt;/a&gt;．&lt;/p&gt;&#xA;&lt;script src=&#34;https://code.jquery.com/jquery-2.1.3.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;&#xA;    $(function(){&#xA;      $(&#34;#cover&#34;).load(&#34;../kyopuro/index.html #for_outer&#34;);&#xA;    });&#xA;&lt;/script&gt;&#xA;&lt;div id=&#34;cover&#34;&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ブログ</title>
      <link>https://t45k.github.io/blog_index/</link>
      <pubDate>Wed, 06 May 2020 18:26:39 +0900</pubDate>
      <guid>https://t45k.github.io/blog_index/</guid>
      <description>&lt;p&gt;近況や今まで読んできた本の感想などを書いていきます．&lt;/p&gt;&#xA;&lt;script src=&#34;https://code.jquery.com/jquery-2.1.3.min.js&#34;&gt;&lt;/script&gt;&#xA;&lt;script&gt;&#xA;    $(function(){&#xA;      $(&#34;#cover&#34;).load(&#34;../blog/index.html #for_outer&#34;);&#xA;    });&#xA;&lt;/script&gt;&#xA;&lt;div id=&#34;cover&#34;&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ABC166の解説</title>
      <link>https://t45k.github.io/kyopuro/abc166/</link>
      <pubDate>Mon, 04 May 2020 22:58:09 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc166/</guid>
      <description>&lt;p&gt;二日連続ABCの二日目．&#xA;ABCEの4完．&#xA;&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/AtCoder/ABC/ABC166&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---ac&#34;&gt;&#xA;  A - A?C&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---ac&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;分岐するだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---trick-or-treat&#34;&gt;&#xA;  B - Trick or Treat&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---trick-or-treat&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;数え上げるだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---peaks&#34;&gt;&#xA;  C - Peaks&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---peaks&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;結構誤読してた人が多かった問題&lt;br&gt;．&#xA;問題文から，i番目の展望台が地震を含めて繋がっている展望台の中で一番高ければ良いことが分かる．&#xA;つまり，繋がっている展望台のどれか一つでも自身より高いものが良い展望台となる．&#xA;なので，各A,Bに対して大きい方だけ残していくという戦略を取れば，残ったものが良い展望台である．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---i-hate-factorization&#34;&gt;&#xA;  D - I hate Factorization&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---i-hate-factorization&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;解けませんでした&lt;/strong&gt;&lt;br&gt;&#xA;問題文を誤読しないように．&#xA;&lt;strong&gt;任意の&lt;/strong&gt;Xについて成り立っているのではなく，&lt;strong&gt;テストケースとして与えられる&lt;/strong&gt;Xについて成り立つ．&#xA;およそ200くらいが上限となるらしいので，それについて全探索するだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---this-message-will-self-destruct-in-5s&#34;&gt;&#xA;  E - This Message Will Self-Destruct in 5s&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---this-message-will-self-destruct-in-5s&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;条件は添字i,jに対して&lt;code&gt;i - j = Ai + Aj&lt;/code&gt;であり，これを式変形すると&lt;code&gt;i - Ai = j + Aj&lt;/code&gt;となる．&#xA;つまり，(添字と身長の差)と(添字と身長の和)が同じ値になるペアが条件を満たす．&#xA;なので各Aに対して添字との差と和をあらかじめ計算しておけば解ける&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC165の解説</title>
      <link>https://t45k.github.io/kyopuro/abc165/</link>
      <pubDate>Mon, 04 May 2020 22:58:03 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc165/</guid>
      <description>&lt;p&gt;二日連続ABCの一日目．&#xA;3完．&#xA;&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/AtCoder/ABC/ABC165&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---we-love-golf&#34;&gt;&#xA;  A - We Love Golf&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---we-love-golf&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;きちんと数学して解くこともできるが，制約が小さいので全探索しても間に合う．&#xA;AからBまでの閉区間内にKの倍数があるか確認する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---1&#34;&gt;&#xA;  B - 1%&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---1&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;これもきちんと数学して解けるけど全探索で解ける系．&#xA;入力例から分かるように，10^18が与えられても出力は3760になるので，1~3760までの区間を探索するだけで良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---many-requirements&#34;&gt;&#xA;  C - Many Requirements&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---many-requirements&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;解けませんでした&lt;/strong&gt;&lt;br&gt;&#xA;これも全探索するだけ問題．&#xA;考えられる数列を全列挙して特典の最大値を探す．&lt;br&gt;&#xA;全列挙に必要な計算量が10^10だと思っていたので試さなかったが，実際にはボールとしきりの要領で組み合わせを考えると計算量は*O(N * C(N+M-1,N))*なので，全列挙しても十分間に合う．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---floor-function&#34;&gt;&#xA;  D - Floor Function&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---floor-function&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;数学．editorialが分かりやすいです．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---rotation-matching&#34;&gt;&#xA;  E - Rotation Matching&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---rotation-matching&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;同じ組み合わせを避けていく問題．&lt;br&gt;&#xA;例えば，組み合わせ(1,N)は(1,2)と同じ組み合わせになる．&#xA;したがって，(組み合わせの方の大きい方)-(小さい方)を&lt;strong&gt;組み合わせの距離&lt;/strong&gt;と定義すると，距離N-iと距離iは同じ組み合わせである．&#xA;これを念頭に入れてN-1からN-mまでの組み合わせを考えていく．&#xA;(1,N)(2,N-1)&amp;hellip;と作っていくと距離N-1,N-3&amp;hellip;と1飛ばしに組み合わせを作れる．&#xA;途中で折り返しをうまく調整して距離N-2,N-4&amp;hellip;の組み合わせを作る．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC164の解説</title>
      <link>https://t45k.github.io/kyopuro/abc164/</link>
      <pubDate>Mon, 27 Apr 2020 23:38:04 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc164/</guid>
      <description>&lt;p&gt;4完．&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/atcoder/abc/abc164&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---sheep-and-wolves&#34;&gt;&#xA;  A - Sheep and Wolves&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---sheep-and-wolves&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;if文で分岐するだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---battle&#34;&gt;&#xA;  B - Battle&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---battle&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;割った余りを求めるのがスマートだけで，先攻後攻の概念があるので愚直に互いに引いていった方が安全．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---gacha&#34;&gt;&#xA;  C - gacha&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---gacha&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;JavaだとSetに打ち込めば良い．&#xA;&lt;code&gt;Stream#distinct&lt;/code&gt;からの&lt;code&gt;Stream#count&lt;/code&gt;で多少スマートに書ける．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---multiple-of-2019&#34;&gt;&#xA;  D - Multiple of 2019&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---multiple-of-2019&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;各桁に対して，i桁目の数字がDiとして&lt;code&gt;Si = (10 ^ i * Di + Si-1) % 2019&lt;/code&gt;を計算すると，Siが同じ値の桁間の数字は2019の倍数になる．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---two-currencies&#34;&gt;&#xA;  E - Two Currencies&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---two-currencies&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;むずかしかった．&lt;br&gt;&#xA;(頂点番号, 所持金)を一つの頂点としてダイクストラする．&lt;/p&gt;</description>
    </item>
    <item>
      <title>K-Shoot MANIAが正しく動かなくなった原因とその対策</title>
      <link>https://t45k.github.io/blog/k-shoot_mania/</link>
      <pubDate>Sat, 25 Apr 2020 17:05:30 +0900</pubDate>
      <guid>https://t45k.github.io/blog/k-shoot_mania/</guid>
      <description>&lt;p&gt;K-Shoot MANIAの挙動がおかしい原因が分かったのでメモ&lt;/p&gt;&#xA;&lt;h2 id=&#34;症状&#34;&gt;&#xA;  症状&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%97%87%e7%8a%b6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;キーボードの入力が異様に遅くなる．&#xA;キーボードを押しっぱなしにして10秒後くらいにようやく反応する．&#xA;もちろんプレイもままならない．&#xA;Windowsのpreview版を使っていたのでそれが原因かなと思っていたが，違うPCでも同じ症状が出たためOSは関係なかった．&lt;/p&gt;&#xA;&lt;h2 id=&#34;原因&#34;&gt;&#xA;  原因&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8e%9f%e5%9b%a0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;キーボードの入力を書き換えるソフトを使っていたのが原因．&#xA;&lt;a href=&#34;https://sites.google.com/site/craftware/keyhac-ja&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;keyhac&lt;/a&gt;と&lt;a href=&#34;https://www.karakaram.com/alt-ime-on-off&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;alt-ime&lt;/a&gt;を使っていたが，これのせいでキーボードの入力がケーシューに正しく反映されなくなってたっぽい．&#xA;対策は簡単で，該当ソフトを落とすだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;終わりに&#34;&gt;&#xA;  終わりに&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%b5%82%e3%82%8f%e3%82%8a%e3%81%ab&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;LR2の反応がおかしかったのもこれが原因かも．&#xA;自宅ゲーセン環境で快適なひきこもり生活を．&lt;/p&gt;</description>
    </item>
    <item>
      <title>「ディスコ探偵水曜日」読了</title>
      <link>https://t45k.github.io/blog/disco_detective_wednesdayyy/</link>
      <pubDate>Fri, 24 Apr 2020 19:01:51 +0900</pubDate>
      <guid>https://t45k.github.io/blog/disco_detective_wednesdayyy/</guid>
      <description>&lt;p&gt;&lt;strong&gt;この世の出来事は全部運命と意志の相互作用で生まれるんだって、知ってる？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;舞城王太郎の「ディスコ探偵水曜日」を読みました．&#xA;10年以上前の本なのでおそらく新品ではもう手に入りません．&#xA;僕はBook Offをはしごしました．&lt;/p&gt;&#xA;&lt;p&gt;上中下の3巻構成なのですが，下巻が異様に長い上にとても難解．&#xA;この本を読むのは2回目ですが，今回も内容を理解しきれませんでした．&lt;/p&gt;&#xA;&lt;p&gt;粗筋は割愛します．&#xA;個人的には中間の，名探偵が次々と推理を披露して死んでいくシーンと，そしてディスコが最後の推理をするシーンが，&#xA;舞城王太郎特有のスピード感があって好きです．&lt;/p&gt;&#xA;&lt;p&gt;1年に1回，イベントとしてこの本を読むことをありかなぁと思いました．&lt;/p&gt;&#xA;&lt;p&gt;次は西尾維新の「クビシメロマンチスト」を読む予定です．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC163の解説</title>
      <link>https://t45k.github.io/kyopuro/abc163/</link>
      <pubDate>Tue, 21 Apr 2020 16:22:58 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc163/</guid>
      <description>&lt;p&gt;3完．&#xA;unratedで良かった&amp;hellip;&#xA;&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/ABC/ABC163&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---circle-pond&#34;&gt;&#xA;  A - Circle Pond&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---circle-pond&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ．&lt;br&gt;&#xA;円周は&lt;code&gt;2 * r * 円周率&lt;/code&gt;．&#xA;Javaだと円周率は&lt;code&gt;java.lang.Math.PI&lt;/code&gt;が使える．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---homework&#34;&gt;&#xA;  B - Homework&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---homework&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;全ての宿題をやるには&lt;code&gt;Σ Ai&lt;/code&gt;日かかるので，それを&lt;code&gt;M&lt;/code&gt;と比較する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---management&#34;&gt;&#xA;  C - management&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---management&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;問題文が若干ややこしい．&#xA;やることは特定の数字が何回出てくるかを数えるだけ．&#xA;はじめに配列&lt;code&gt;array[N + 1]&lt;/code&gt;を用意して，各&lt;code&gt;Ai&lt;/code&gt;に対して&lt;code&gt;array[Ai]++&lt;/code&gt;する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---sum-of-large-numbers&#34;&gt;&#xA;  D - Sum of Large Numbers&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---sum-of-large-numbers&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;時間内に解けなかった．&#xA;組み合わせの問題だと思ってライブラリを引っ張ってきたけど使わなかった&amp;hellip;&lt;br&gt;&#xA;各数字が10^100以上と十分大きいので，足し合わせる個数が違うとき同じ値になることはない．&#xA;あるiに対して&lt;code&gt;front_sum&lt;/code&gt;を0からi-1までの和，&lt;code&gt;back_sum&lt;/code&gt;をn-i+1からnまでの和とすると，&#xA;i個選択する時の組み合わせによって得られる和は&lt;code&gt;i * 10^100 + front_sum&lt;/code&gt;から&lt;code&gt;i * 10^100 + back_sum&lt;/code&gt;までの間に収まる．&#xA;つまり，&lt;code&gt;back_sum - front_sum + 1&lt;/code&gt;通りになる．&#xA;&lt;code&gt;front_sum&lt;/code&gt;と&lt;code&gt;back_sum&lt;/code&gt;は累積和で取れるので，iをKからNまで動かして足し合わせれば良い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---active-infants&#34;&gt;&#xA;  E - Active Infants&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---active-infants&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;原始的なDP（ほんまか？）．&lt;br&gt;&#xA;活発度が高い順に左か右に移動させる．&#xA;活発度を降順にソートした時，&lt;code&gt;dp[i][j]&lt;/code&gt;を，&lt;strong&gt;(i+j)番目の園児を移動させた結果左側にi人，右側にj人の時の嬉しさ&lt;/strong&gt;という風に考える．&#xA;そうすると，&lt;code&gt;dp[i][j]&lt;/code&gt;は&lt;strong&gt;左側にi-1人，右側にj人いるときに(i+j)番目の園児を左側に移動させる&lt;/strong&gt;か&lt;strong&gt;左側にi人，右側にj-1人いるときに(i+j)番目の園児を右側に移動させる&lt;/strong&gt;の嬉しさが大きい方になる．&lt;/p&gt;</description>
    </item>
    <item>
      <title>MacでIntelliJを使っているとクラッシュする問題と解決法</title>
      <link>https://t45k.github.io/blog/fix_mac_fault/</link>
      <pubDate>Mon, 13 Apr 2020 17:38:19 +0900</pubDate>
      <guid>https://t45k.github.io/blog/fix_mac_fault/</guid>
      <description>&lt;p&gt;MacBook Air 2020を買いました．詳しくは&lt;a href=&#34;https://t45k.github.io/blog/macbook_air&#34; &gt;ここ&lt;/a&gt;．&lt;/p&gt;&#xA;&lt;p&gt;普段はJavaやKotlinを書いているので迷いなくIntelliJ IDEAをインストールしたのですが，どうも挙動がおかしい．&lt;br&gt;&#xA;というのも，結構な頻度でIntelliJがクラッシュするし，場合によってはOSがクラッシュ強制的に再起動がかかります．&#xA;ひどい時にはOSがクラッシュして再起動がかかり，それが開けた2分後に再びクラッシュしたこともあります．&lt;/p&gt;&#xA;&lt;p&gt;実は&lt;a href=&#34;https://t45k.github.io/blog/line&#34; &gt;LINEのインターン&lt;/a&gt;で借りていたMacBook Pro 15inchでも似たような問題が起こっていたので，2度目の経験でした．&lt;br&gt;&#xA;インターンで借りていたパソコンは5日間で返すので我慢して使っていましたが，今回は長らく使っていく予定なので流石に直す必要がありました．&lt;/p&gt;&#xA;&lt;p&gt;修理も視野に入れながら解決法を探しました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;解決法&#34;&gt;&#xA;  解決法&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%a7%a3%e6%b1%ba%e6%b3%95&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;結論からいうと原因は分かりませんでしたが()，&lt;strong&gt;OSを再インストール&lt;/strong&gt;することで解決しました．詳しくは&lt;a href=&#34;https://support.apple.com/ja-jp/HT204904&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;こちら&lt;/a&gt;．&lt;br&gt;&#xA;原因が分からないので全ての人がこれで直るかは分かりませんが，OS再インスコでデータが消えることはないため真っ先に試す価値はあります．&lt;/p&gt;</description>
    </item>
    <item>
      <title>MacBook Airを購入した話</title>
      <link>https://t45k.github.io/blog/macbook_air/</link>
      <pubDate>Mon, 13 Apr 2020 17:21:02 +0900</pubDate>
      <guid>https://t45k.github.io/blog/macbook_air/</guid>
      <description>&lt;h3 id=&#34;念願のmacbook-airを購入しました&#34;&gt;&#xA;  念願のMacBook Airを購入しました!&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%bf%b5%e9%a1%98%e3%81%aemacbook-air%e3%82%92%e8%b3%bc%e5%85%a5%e3%81%97%e3%81%be%e3%81%97%e3%81%9f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/mba.JPG&#34; alt=&#34;mba&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;構成は&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CPU: 1.1GHzクアッド&lt;/li&gt;&#xA;&lt;li&gt;メモリ: 16GB&lt;/li&gt;&#xA;&lt;li&gt;SSD: 256GB&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;数ヶ月後に出ると噂のMacBook Proを待っている人もいるかもしれませんが，僕は以下のような理由でmbaを選びました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;1---もう待てなかったから&#34;&gt;&#xA;  1 - もう待てなかったから&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#1---%e3%82%82%e3%81%86%e5%be%85%e3%81%a6%e3%81%aa%e3%81%8b%e3%81%a3%e3%81%9f%e3%81%8b%e3%82%89&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ずっと新しいmacが欲しいと思っていたのでこれ以上待てませんでした&lt;/p&gt;&#xA;&lt;h2 id=&#34;2---そこまでスペックを必要としていないかったから&#34;&gt;&#xA;  2 - そこまでスペックを必要としていないかったから&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#2---%e3%81%9d%e3%81%93%e3%81%be%e3%81%a7%e3%82%b9%e3%83%9a%e3%83%83%e3%82%af%e3%82%92%e5%bf%85%e8%a6%81%e3%81%a8%e3%81%97%e3%81%a6%e3%81%84%e3%81%aa%e3%81%84%e3%81%8b%e3%81%a3%e3%81%9f%e3%81%8b%e3%82%89&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;研究室からmbpを借りていますし，研究などでマシンパワーが必要な時は研究室のワークステーションを使えば良いだけなので&lt;/p&gt;&#xA;&lt;h2 id=&#34;3---touch-barが嫌いだから&#34;&gt;&#xA;  3 - Touch barが嫌いだから&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#3---touch-bar%e3%81%8c%e5%ab%8c%e3%81%84%e3%81%a0%e3%81%8b%e3%82%89&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;バタフライキーボードはともかく，Touch barは賛否両論ありますが，僕はあまり好きになれませんでした．&#xA;たまに反応しなくなったりするし．&lt;/p&gt;&#xA;&lt;h2 id=&#34;4---安いから&#34;&gt;&#xA;  4 - 安いから&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#4---%e5%ae%89%e3%81%84%e3%81%8b%e3%82%89&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;税込み13万で買えました．&#xA;mbpはこんなものじゃすまないと思います．&lt;/p&gt;&#xA;&lt;p&gt;理由としてはこんなところです．&#xA;付け加えるなら，自分の理想にとても近かったというのもあります．&#xA;これは去年の12月のツイート&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;はよmacbook air，13インチ，cpu4コア，RAM16GB，SSD256GB，ファンクションキー，シザーキーボードで10万くらいのやつ出てくれや&lt;/p&gt;&amp;mdash; task (@getupmax) &lt;a href=&#34;https://twitter.com/getupmax/status/1203581420871905280?ref_src=twsrc%5Etfw&#34;&gt;December 8, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;h2 id=&#34;使い心地&#34;&gt;&#xA;  使い心地&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e4%bd%bf%e3%81%84%e5%bf%83%e5%9c%b0&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://t45k.github.io/blog/fix_mac_fault&#34; &gt;ある一点&lt;/a&gt;を除いたら最高です（その一点も結局解決しました）．&lt;/p&gt;&#xA;&lt;p&gt;主にmbpとの比較になるのですが，&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC162の解説</title>
      <link>https://t45k.github.io/kyopuro/abc162/</link>
      <pubDate>Mon, 13 Apr 2020 16:57:30 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc162/</guid>
      <description>&lt;p&gt;祝参加者1万人越え．無念の4完．&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC162&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---lucky-7&#34;&gt;&#xA;  A - Lucky 7&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---lucky-7&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ．文字列で読み込んで&lt;code&gt;String#contains&lt;/code&gt;を使うと早い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---fizzbuzz-sum&#34;&gt;&#xA;  B - FizzBuzz Sum&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---fizzbuzz-sum&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;これもやるだけ．&lt;code&gt;LongStream&lt;/code&gt;できれいに書ける．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LongStream.rangeClosed(1, scanner.nextInt())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .filter(i -&amp;gt; i % 3 != 0 &amp;amp;&amp;amp; i % 5 != 0)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .sum();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;c---sum-of-gcd-of-tuples-easy&#34;&gt;&#xA;  C - Sum of gcd of Tuples (Easy)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---sum-of-gcd-of-tuples-easy&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;三重ループを回すだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---rgb-triplets&#34;&gt;&#xA;  D - RGB Triplets&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---rgb-triplets&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;N &amp;lt;= 4,000&lt;/code&gt;なので二重ループで回すことを考える．&#xA;ある座標以降のそれぞれの色が何個あるかを記録する．&#xA;これは後ろから累積和をとることで可能．&#xA;こうすることで，例えば&lt;code&gt;i&lt;/code&gt;が赤色，&lt;code&gt;j&lt;/code&gt;が緑色のとき，&lt;code&gt;j+1&lt;/code&gt;以降の青色の個数を&lt;code&gt;O(1)&lt;/code&gt;で得られる．&#xA;また，&lt;code&gt;k-j ≠ j-i&lt;/code&gt;の条件を満たすために，k-j = j-iとなるkに対して&lt;code&gt;(j+1以降の数) - (k以降の数) + (k+1以降の数)&lt;/code&gt;と計算すれば良い(累積和の性質から)．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC161の解説</title>
      <link>https://t45k.github.io/kyopuro/abc161/</link>
      <pubDate>Sat, 04 Apr 2020 22:53:03 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc161/</guid>
      <description>&lt;p&gt;100-200-300-400-600の5完．&#xA;人生初のオンサイト600点問題AC．&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC161&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---abc-swap&#34;&gt;&#xA;  A - ABC Swap&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---abc-swap&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Z，X，Yを順に出力するだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---popular-vote&#34;&gt;&#xA;  B - Popular Vote&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---popular-vote&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;やるだけ．&lt;br&gt;&#xA;割り算の結果を比較するときは，&lt;code&gt;a &amp;gt; b / c&lt;/code&gt;ではなく&lt;code&gt;a * c &amp;gt; b&lt;/code&gt;のように書いたほうが正確．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---replacing-integer&#34;&gt;&#xA;  C - Replacing Integer&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---replacing-integer&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;方針立てるのに時間かかった問題．&lt;br&gt;&#xA;直感的には分かりづらいけど以下のように言い換えられる(chokudaiさんのツイート)．&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;C問題、数学の問題といえばそうなんだけど、「無限に長いすごろくがあります。ゴールまでの距離がxです。Kマスずつ進めますが、ゴールを通り過ぎてしまう場合は折り返します。最もゴールに近づく時の残りマス数を答えなさい」みたいにすると、まぁ一応ちゃんとしたストーリーはつくよね。&lt;/p&gt;&amp;mdash; chokudai(高橋 直大)🌸🍆🍡 (@chokudai) &lt;a href=&#34;https://twitter.com/chokudai/status/1246435428476973063?ref_src=twsrc%5Etfw&#34;&gt;April 4, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;p&gt;というわけで，&lt;code&gt;N % K&lt;/code&gt;と&lt;code&gt;(N - (N % K)) % K&lt;/code&gt;の小さい方を求める．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---lunlun-number&#34;&gt;&#xA;  D - Lunlun Number&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---lunlun-number&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;想定解が天才すぎる．愚直に解いた．&lt;br&gt;&#xA;i番目の数字に対して，i + 1番目の数字を次のように決める．各桁を下から順番に見ていく．もし見ている桁が9でなく，かつ次の桁の数字より1小さいか同じなら，その桁をインクリメントし，それ以降の桁をルンルン数かつ最小となるように調整(つまり，&amp;lsquo;上の桁 - 1&amp;rsquo;か&#39;0&amp;rsquo;)した値がi + 1番目の数になる．どの桁も条件に当てはまらなければ，一番大きい桁をインクリメントする．&lt;br&gt;&#xA;各桁を確認，操作する場合は，数字をいったんchar型配列にするとやりやすいかも．&lt;/p&gt;</description>
    </item>
    <item>
      <title>AtCoderで水色になりました</title>
      <link>https://t45k.github.io/blog/nyusui/</link>
      <pubDate>Sun, 29 Mar 2020 00:16:31 +0900</pubDate>
      <guid>https://t45k.github.io/blog/nyusui/</guid>
      <description>&lt;p&gt;先日行われた&lt;a href=&#34;https://atcoder.jp/contests/abc160&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ABC160&lt;/a&gt;にて無事に入水を果たしたのでポエムを書きます．&#xA;&lt;img src=&#34;https://t45k.github.io/img/blog/nyusui.png&#34; height=&#34;75%&#34; width=&#34;75%&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;感じたこと&#34;&gt;&#xA;  感じたこと&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%84%9f%e3%81%98%e3%81%9f%e3%81%93%e3%81%a8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;一つの目標だった水色に到達してほっとしています．&#xA;人によっては10回かそこらでなる人もいる中，53回目でようやくなれた自分の才能とセンスのなさには本当に辟易しています．&#xA;精進が大事．&#xA;蟻本は最初の章しか読めてないけど結構役に立ちました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;次は&#34;&gt;&#xA;  次は&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%ac%a1%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;せっかくなので青色を目指します．&#xA;ここ2回のABCは青パフォが出てるので，この調子で頑張っていきたいです．&lt;/p&gt;&#xA;&lt;h2 id=&#34;最後に&#34;&gt;&#xA;  最後に&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9c%80%e5%be%8c%e3%81%ab&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;毎回楽しいコンテストを開催してくれているAtCoder社と，その問題を用意してくれているWriter，Testerの皆様に心から感謝します．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC160の解説</title>
      <link>https://t45k.github.io/kyopuro/abc160/</link>
      <pubDate>Sat, 28 Mar 2020 23:27:57 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc160/</guid>
      <description>&lt;p&gt;5完．&lt;a href=&#34;https://github.com/T45K/tree/master/AtCoder/ABC/ABC160&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---coffee&#34;&gt;&#xA;  A - Coffee&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---coffee&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;書かれてることをするだけ．&lt;code&gt;String#charAt&lt;/code&gt;を使う&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---golden-coins&#34;&gt;&#xA;  B - Golden Coins&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---golden-coins&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;なるべく多くの500円に換金した方が良いので，まずは&lt;code&gt;X&lt;/code&gt;を500で割る．&#xA;余りを50で割って，それぞれの商に1000と5を掛けて出力．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---traveling-salesman-around-lake&#34;&gt;&#xA;  C - Traveling Salesman around Lake&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---traveling-salesman-around-lake&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ある家からその一つ手前の家までをぐるっと一周回ってくるのが最適となる．&#xA;1番目の家からN番目の家までに移動距離は&lt;code&gt;Ai - AN&lt;/code&gt;，それ以外の家iから家i - 1までは&lt;code&gt;K - Ai + Ai-1&lt;/code&gt;になるので，その中の最小値が答え．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---line&#34;&gt;&#xA;  D - &#x9;Line++&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---line&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ワーシャルフロイドっぽい問題．&lt;br&gt;&#xA;まず初めにX，Yを経由しない場合の全ての頂点間の距離を求める．&#xA;これはグラフを隣接行列で表すと&lt;code&gt;graph[i][j] = |i - j|&lt;/code&gt;となる．&lt;br&gt;&#xA;次に，XまたはYを経由した場合を考えた上で，全ての頂点間の最短距離を求める．&#xA;これは&lt;code&gt;graph[i][j] = min(graph[i][j], graph[i][X] + graph[X][j])&lt;/code&gt;となる．&lt;br&gt;&#xA;最後に，隣接行列の中で各距離の出現回数を記録し，それを出力する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---red-and-green-apples&#34;&gt;&#xA;  E - Red and Green Apples&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---red-and-green-apples&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;貪欲にやるだけ．&lt;br&gt;&#xA;美味しさを最大化したいとき，赤リンゴを降順に並べたときのX+1つ目以降と緑リンゴを降順に並べたときののY+1つ目以降は捨ててもよい．&#xA;後はそれぞれのリンゴの小さいものを順番に無色のものと入れ替えるだけ．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC159の解説</title>
      <link>https://t45k.github.io/kyopuro/abc159/</link>
      <pubDate>Sun, 22 Mar 2020 22:48:22 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc159/</guid>
      <description>&lt;p&gt;奇跡的に5完．&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC159&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---the-number-of-even-pairs&#34;&gt;&#xA;  A - The Number of Even Pairs&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---the-number-of-even-pairs&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;和が正になるのは&lt;code&gt;even + even&lt;/code&gt;か&lt;code&gt;odd + odd&lt;/code&gt;の時なので，偶奇それぞれに対して組み合わせ(&lt;code&gt;n * (n - 1) / 2&lt;/code&gt;)を計算して足し合わせる．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---string-palindrome&#34;&gt;&#xA;  B - String Palindrome&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---string-palindrome&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;書かれてることをするだけ．&#xA;回文系の問題は以下のようなメソッドを作っとくと便利かも．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;&#34;&gt;boolean&lt;/span&gt; isPalindrome(&lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; start, &lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;&#34;&gt;int&lt;/span&gt; end, &lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; String s) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; i = 0; ; i++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (start + i &amp;gt;= end - i) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (s.charAt(start + i) != s.charAt(end - i)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;c---maximum-volume&#34;&gt;&#xA;  C - Maximum Volume&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---maximum-volume&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Lの1/3の3乗&lt;/p&gt;</description>
    </item>
    <item>
      <title>AGC043の解説</title>
      <link>https://t45k.github.io/kyopuro/agc043/</link>
      <pubDate>Sat, 21 Mar 2020 23:37:35 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/agc043/</guid>
      <description>&lt;script async src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML&#34;&gt;&lt;/script&gt;&#xA;&lt;p&gt;1完．&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/AGC/AGC043&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---range-flip-find-route&#34;&gt;&#xA;  A - Range Flip Find Route&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---range-flip-find-route&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;全探索の計算量をいかに減らせるかがポイント．DPは思いつかんかった&amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;右か下にしか移動できない時，黒ゾーンに入ってから出るまでの経路を一回の操作で白にできる（公式参照）．&#xA;なので，白から黒に入る経路のコストを1，それ以外を0とみなした最短経路問題に落とし込むことができる．&#xA;ダイクストラ法を使うと計算量は頂点数&lt;code&gt;V&lt;/code&gt;と辺数&lt;code&gt;E&lt;/code&gt;に対して&lt;code&gt;O(V * log(E))&lt;/code&gt;となる．&#xA;今回の頂点数Vは&lt;code&gt;V &amp;lt;= H * W = 10 ^ 4&lt;/code&gt;となる．&#xA;また，一つの頂点に対して辺の数はたかだか2(右に移動するか下に移動するかの2通り)なので，十分間に合う．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---123-triangle&#34;&gt;&#xA;  B - 123 Triangle&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---123-triangle&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;誰がこんな解法思いつくんでしょうね&amp;hellip;(解説AC)&lt;/p&gt;&#xA;&lt;p&gt;答えは0，1，2のいずれかになるので，初めに答えの偶奇を判定する．&#xA;各aは先に1引いといても問題ない．&#xA;偶奇判定なので，&lt;code&gt;abs(a - b)&lt;/code&gt;ではなく&lt;code&gt;a xor b&lt;/code&gt;で良い．&#xA;そうすると，&#xA;&lt;math&gt;&#xA;&lt;msub&gt;&#xA;&lt;mi&gt;x&lt;/mi&gt;&#xA;&lt;mn&gt;n,1&lt;/mn&gt;&#xA;&lt;/msub&gt;&#xA;&lt;mo&gt;=&lt;/mo&gt;&#xA;&lt;mo&gt;(&lt;/mo&gt;&#xA;&lt;mmultiscripts&gt;&#xA;&lt;mo&gt;C&lt;/mo&gt;&#xA;&lt;mn&gt;0&lt;/mn&gt;&#xA;&lt;none /&gt;&#xA;&lt;mprescripts /&gt;&#xA;&lt;mi&gt;n-1&lt;/mi&gt;&#xA;&lt;none /&gt;&#xA;&lt;/mmultiscripts&gt;&#xA;&lt;mo&gt;⁢&lt;/mo&gt;&#xA;&lt;msub&gt;&#xA;&lt;mi&gt;x&lt;/mi&gt;&#xA;&lt;mn&gt;1,1&lt;/mn&gt;&#xA;&lt;/msub&gt;&#xA;&lt;mo&gt;^&lt;/mo&gt;&#xA;&lt;mmultiscripts&gt;&#xA;&lt;mo&gt;C&lt;/mo&gt;&#xA;&lt;mn&gt;1&lt;/mn&gt;&#xA;&lt;none /&gt;&#xA;&lt;mprescripts /&gt;&#xA;&lt;mi&gt;n-1&lt;/mi&gt;&#xA;&lt;none /&gt;&#xA;&lt;/mmultiscripts&gt;&#xA;&lt;mo&gt;⁢&lt;/mo&gt;&#xA;&lt;msub&gt;&#xA;&lt;mi&gt;x&lt;/mi&gt;&#xA;&lt;mn&gt;1,2&lt;/mn&gt;&#xA;&lt;/msub&gt;&#xA;&lt;mo&gt;^&lt;/mo&gt;&#xA;&lt;mo&gt;&amp;hellip;&lt;/mo&gt;&#xA;&lt;mo&gt;^&lt;/mo&gt;&#xA;&lt;mmultiscripts&gt;&#xA;&lt;mo&gt;C&lt;/mo&gt;&#xA;&lt;mi&gt;n-1&lt;/mi&gt;&#xA;&lt;none /&gt;&#xA;&lt;mprescripts /&gt;&#xA;&lt;mi&gt;n-1&lt;/mi&gt;&#xA;&lt;none /&gt;&#xA;&lt;/mmultiscripts&gt;&#xA;&lt;mo&gt;⁢&lt;/mo&gt;&#xA;&lt;msub&gt;&#xA;&lt;mi&gt;x&lt;/mi&gt;&#xA;&lt;mn&gt;1,n&lt;/mn&gt;&#xA;&lt;/msub&gt;&#xA;&lt;mo&gt;)&lt;/mo&gt;&#xA;&lt;mo&gt;%&lt;/mo&gt;&#xA;&lt;mn&gt;2&lt;/mn&gt;&#xA;&lt;/math&gt;&#xA;となる．&#xA;そのため，各組み合わせを計算すれば良い．&lt;br&gt;&#xA;今回は偶奇が欲しいので，各組み合わせの2で割った余りだけで十分である．&#xA;そこで&lt;a href=&#34;https://mathtrain.jp/lucastheorem&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Lucasの定理&lt;/strong&gt;&lt;/a&gt;を用いる(リンク参照)．&#xA;定理に従うと手順はこう．&lt;/p&gt;</description>
    </item>
    <item>
      <title>「みんな元気。」読了</title>
      <link>https://t45k.github.io/blog/all_fine/</link>
      <pubDate>Fri, 20 Mar 2020 12:00:53 +0900</pubDate>
      <guid>https://t45k.github.io/blog/all_fine/</guid>
      <description>&lt;p&gt;&lt;strong&gt;みんな大丈夫。みんな元気。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;舞城王太郎の「みんな元気。」を読みました．&lt;a href=&#34;https://www.amazon.co.jp/%E3%81%BF%E3%82%93%E3%81%AA%E5%85%83%E6%B0%97%E3%80%82-%E8%88%9E%E5%9F%8E%E7%8E%8B%E5%A4%AA%E9%83%8E-ebook/dp/B00CL6N332/ref=sr_1_5?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;dchild=1&amp;amp;keywords=%E3%81%BF%E3%82%93%E3%81%AA%E5%85%83%E6%B0%97&amp;amp;qid=1584673351&amp;amp;sr=8-5&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amazon&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;この本は，表題である「みんな元気。(副題: Cuckoos &amp;amp; The Invisible Devil)」と短編4編で構成されています．&#xA;例によってきっかけはDJ Technorch．&lt;/p&gt;&#xA;&lt;p&gt;粗筋は，空飛ぶ家族が主人公の妹を拐いに来てなんやかんやある感じです．&#xA;相変わらず難解だった気がします．&#xA;この物語は，「選択」が主題の一つだと思います．&#xA;副題のカッコウから，拐われた妹が実は托卵だったみたいな展開を予想しましたが全然そんなことありませんでした．&#xA;風呂敷をめちゃくちゃに広げたうえで畳むことなく急に終わる感じなのですが，終わり方が納得できるというかとても爽やかでした．&lt;/p&gt;&#xA;&lt;p&gt;短編集の中では，「スクールアタック・シンドローム」が好きです．&lt;/p&gt;&#xA;&lt;p&gt;なんとなく，舞城王太郎特有のスピード感的なものを理解してきた気がしました．&lt;/p&gt;&#xA;&lt;p&gt;次はおそらく「九十九十九」を読みます．&lt;/p&gt;&#xA;&lt;p&gt;最後に&lt;/p&gt;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/-71fQjkZ0X8&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>パナソニックプログラミングコンテスト2020の解説</title>
      <link>https://t45k.github.io/kyopuro/panasonic2020/</link>
      <pubDate>Sat, 14 Mar 2020 22:56:44 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/panasonic2020/</guid>
      <description>&lt;p&gt;4完．&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/AtCoder/others/pana20&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---kth-term&#34;&gt;&#xA;  A - Kth Term&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---kth-term&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;実装するだけ．&#xA;Javaの場合は問題文をコピペして&lt;code&gt;final int[] array = {1, 1, ...};&lt;/code&gt;と宣言すると早い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---bishop&#34;&gt;&#xA;  B - Bishop&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---bishop&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ここに一番時間を吸われた．&lt;br&gt;&#xA;問題例を見ると最終的に&lt;code&gt;(h * w + 1) / 2&lt;/code&gt;でいけそうに見えるが，hまたはwが1の時角は一切移動できなくなることに気付けるかがポイント．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---sqrt-inequality&#34;&gt;&#xA;  C - Sqrt Inequality&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---sqrt-inequality&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ここにも時間を吸われた．&lt;br&gt;&#xA;&lt;code&gt;Math#sqrt&lt;/code&gt;を使うと解けそうな気がするが，精度の都合上間違いになることがある．&#xA;今回は式変換を行うと&lt;code&gt;4ab &amp;lt; a^2 + b^2 + c^2 + 2ab - 2bc - 2ca&lt;/code&gt;に持っていけるので，そこに代入するだけ．&#xA;あるいは&lt;code&gt;BigDecimal&lt;/code&gt;を使っても大丈夫らしい．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---string-equivalence&#34;&gt;&#xA;  D - String Equivalence&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---string-equivalence&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;偶然通った問題．&lt;br&gt;&#xA;左側から文字を決めていくが，使える文字は自身より左に存在している一番大きい文字 + 1までしか使えないことに注意．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---three-substrings&#34;&gt;&#xA;  E - Three Substrings&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---three-substrings&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;全探索の問題．&lt;a href=&#34;https://www.hamayanhamayan.com/entry/2020/03/15/002311&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ここ&lt;/a&gt;を参考にした．&lt;br&gt;&#xA;Editorialではa，b，cの順番を考慮せずにやる方法を紹介しているが，考えることが増えるので素直に全ての順列で場合分けした方が良さそう．&#xA;以降，(aの先頭) ≦ (bの先頭) ≦ (cの先頭)の場合を考える．&lt;br&gt;&#xA;まず，a中のどの箇所がbと被っているかを全探索して，配列か何かに記録する(O(n^2))．これをaとc，bとcに対してもやる．&#xA;コードだとこんな感じ．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC061#Dの別解</title>
      <link>https://t45k.github.io/kyopuro/abc061_d/</link>
      <pubDate>Sun, 08 Mar 2020 20:39:29 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc061_d/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://atcoder.jp/contests/abc061/tasks/abc061_d&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ABC061 D - Score Attack&lt;/a&gt;の別解．&lt;a href=&#34;https://github.com/T45K/kyopuro/blob/master/ABC061/D/MainAlt.java&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;問題内容&#34;&gt;&#xA;  問題内容&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%95%8f%e9%a1%8c%e5%86%85%e5%ae%b9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;正負の重みの辺で構成された，閉路を含む有向グラフの単一始点終点の最長経路を求める問題．&#xA;解説では，初めに辺の重みの正負を逆転してからベルマンフォード法で最短経路を求めている．&#xA;また，経路に影響を与えうる閉路の存在を確認するために，フラグを使った方法を採用している．単純に負の閉路の存在が最短経路に影響を及ぼすわけではないことに注意．&lt;/p&gt;&#xA;&lt;h2 id=&#34;別解&#34;&gt;&#xA;  別解&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%88%a5%e8%a7%a3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;最長路検出と閉路検出について異なる方法を紹介する．&lt;/p&gt;&#xA;&lt;h3 id=&#34;最長路検出&#34;&gt;&#xA;  最長路検出&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9c%80%e9%95%b7%e8%b7%af%e6%a4%9c%e5%87%ba&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;今回頂点数が1,000と比較的少ないので，BFSを用いた全探索が可能である．&#xA;BFSを用いる場合は，閉路を含むことから，キューが空にならない可能性があるので，繰り返し回数を制限する必要がる．&#xA;BFSであることから，n ^ 2 回繰り返せば十分である．&lt;/p&gt;&#xA;&lt;h3 id=&#34;閉路検出&#34;&gt;&#xA;  閉路検出&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%96%89%e8%b7%af%e6%a4%9c%e5%87%ba&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;解説ではbool型配列を用いてフラグ管理をしているが，そもそもフラグ管理をする必要はない．&#xA;各辺に対する経路長の更新を頂点の個数回繰り返し，結果が変わっていれば&lt;code&gt;inf&lt;/code&gt;を出力すれば良い．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC158の解説</title>
      <link>https://t45k.github.io/kyopuro/abc158/</link>
      <pubDate>Sat, 07 Mar 2020 22:42:19 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc158/</guid>
      <description>&lt;p&gt;四完．&lt;a href=&#34;https://github.com/t45k/kyopuro/master/tree/abc158&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---station-and-bus&#34;&gt;&#xA;  A - Station and Bus&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---station-and-bus&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;連想配列にぶちこむ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---count-balls&#34;&gt;&#xA;  B - Count Balls&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---count-balls&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;n に対する (A + B) の商と余りを求めておき，ごちゃごちゃする．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---tax-increase&#34;&gt;&#xA;  C - Tax Increase&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---tax-increase&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;1から20,000くらいまでの整数が条件を満たすか全探索．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---string-formation&#34;&gt;&#xA;  D - String Formation&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---string-formation&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;現在文字列が正順なのか逆順なのかを記録しておくフラグを用意する．&#xA;クエリが&lt;code&gt;1&lt;/code&gt;ならフラグ反転，クエリが&lt;code&gt;2&lt;/code&gt;の場合は，&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;正順ならクエリ通りに文字追加&lt;/li&gt;&#xA;&lt;li&gt;逆順ならクエリとは逆に文字追加&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;をやる．&#xA;最終的にフラグを参照してから正しい方向で出力．&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;StringBuilder#insert&lt;/code&gt;を使うとTLEになりました．&lt;/p&gt;</description>
    </item>
    <item>
      <title>「好き好き大好き超愛してる。」読了</title>
      <link>https://t45k.github.io/blog/love_love_love_you_i_love_you/</link>
      <pubDate>Tue, 03 Mar 2020 16:20:18 +0900</pubDate>
      <guid>https://t45k.github.io/blog/love_love_love_you_i_love_you/</guid>
      <description>&lt;p&gt;&lt;strong&gt;愛は祈りだ。僕は祈る。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;舞城王太郎の「好き好き大好き超愛してる。」を読みました．&lt;a href=&#34;https://www.amazon.co.jp/%E5%A5%BD%E3%81%8D%E5%A5%BD%E3%81%8D%E5%A4%A7%E5%A5%BD%E3%81%8D%E8%B6%85%E6%84%9B%E3%81%97%E3%81%A6%E3%82%8B%E3%80%82-%E8%AC%9B%E8%AB%87%E7%A4%BE%E6%96%87%E5%BA%AB-%E8%88%9E%E5%9F%8E-%E7%8E%8B%E5%A4%AA%E9%83%8E/dp/4062760819/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;keywords=%E5%A5%BD%E3%81%8D%E5%A5%BD%E3%81%8D%E5%A4%A7%E5%A5%BD%E3%81%8D%E8%B6%85%E6%84%9B%E3%81%97%E3%81%A6%E3%82%8B&amp;amp;qid=1583220082&amp;amp;sr=8-1&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Amazon&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;きっかけはDJ Technorchの楽曲「Love Love Love You I Love You」．&lt;br&gt;&#xA;舞城王太郎作品は，以前「ディスコ探偵水曜日」を読んでめちゃくちゃ読みにくいなと思っていたので，読む前に少し構えました．&lt;br&gt;&#xA;「愛は祈りだ。」の一文から始まるこの本は，一貫して「愛」と「物語」についての小説です．&#xA;一文目がこれほど全体を象徴している作品は個人的にはこれが初めてで，おそらく長く記憶に残るんだろうなぁという感じです（余談ですが，最後の一文が一番記憶に残っている作品は西尾維新の「クビシメロマンチスト」）．&#xA;読みやすい方ではありますが，理解するのは難しいと感じました．&lt;/p&gt;&#xA;&lt;p&gt;次は「みんな元気。」を読みます．&lt;/p&gt;&#xA;&lt;p&gt;最後に，きっかけとなった楽曲を貼っときます．&lt;/p&gt;&#xA;&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/lTrDY-60mMg&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;</description>
    </item>
    <item>
      <title>ABC157の解説</title>
      <link>https://t45k.github.io/kyopuro/abc157/</link>
      <pubDate>Sun, 01 Mar 2020 22:53:59 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc157/</guid>
      <description>&lt;p&gt;なんとか四完．&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC157&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---duplex-printing&#34;&gt;&#xA;  A - Duplex Printing&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---duplex-printing&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;n&lt;/code&gt;に1足して2で割るだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---bingo&#34;&gt;&#xA;  B - Bingo&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---bingo&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;実装するだけだが実装量が多くなりがちな問題&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---guess-the-number&#34;&gt;&#xA;  C - Guess The Number&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---guess-the-number&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;条件に合う数字を生成する方針をとるもWAになったので全探索する方向に変更．&#xA;桁数を満たす整数を昇順に条件を満たすか確認する．&#xA;余談だが，WAの原因はおそらく1桁の数字は0でも大丈夫なのを考慮していなかったため．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---friend-suggestions&#34;&gt;&#xA;  D - Friend Suggestions&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---friend-suggestions&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Union-Find Treeで殴る問題．&#xA;友達関係を取得する時にUnion-Find Treeを構築します．&#xA;同時に，それぞれの人が何人友達がいるかを記録します．&lt;br&gt;&#xA;ブロック関係を取得する際に，それぞれの人に何人ブロックしている人がいるか記録します．&#xA;この時，友達候補でない人を記録する必要はありません．&lt;br&gt;&#xA;最終的に，Union-Find Treeから&lt;strong&gt;自分，友達，ブロック関係を含めた自分と繋がっている人&lt;/strong&gt;を得られるので，そこから友達の人数とブロックしている人数と自分自身の人数を引くことで答えが求まります．&lt;br&gt;&#xA;余談ですが，&lt;code&gt;Set&lt;/code&gt;をfor文で回すと異様に遅いので，for文を使う場合は&lt;code&gt;List&lt;/code&gt;を使った方が良いです．&lt;/p&gt;</description>
    </item>
    <item>
      <title>最小全域木メモ</title>
      <link>https://t45k.github.io/kyopuro/min_spanning_tree/</link>
      <pubDate>Sat, 29 Feb 2020 22:37:36 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/min_spanning_tree/</guid>
      <description>&lt;p&gt;最小全域木という概念を知ったのでメモ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;最小全域木とは&#34;&gt;&#xA;  最小全域木とは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%9c%80%e5%b0%8f%e5%85%a8%e5%9f%9f%e6%9c%a8%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;em&gt;無向グラフが与えられた時に，その部分グラフで任意の2頂点を連結にする様な木を全域木(Spanning Tree)と言います．辺にコストがある場合に，使われる辺のコストの和を最小にする全域木を最小全域木(MST : Minimum Spanning Tree)と言います．&lt;/em&gt;（蟻本より）&lt;br&gt;&#xA;つまり，グラフが連結であることを保ったまま，コストの大きい辺を間引いてできたグラフを指します．連結であり，かつ辺のコストの和が最小なので，グラフは木となります．&lt;br&gt;&#xA;&lt;a href=&#34;https://atcoder.jp/contests/abc065/tasks/arc076_b&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ABC065-D&lt;/a&gt;がこの問題に該当します．&lt;/p&gt;&#xA;&lt;h2 id=&#34;解き方&#34;&gt;&#xA;  解き方&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%a7%a3%e3%81%8d%e6%96%b9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;有名なアルゴリズムとして，クラスカル法とプリム法があります．&#xA;今回はクラスカル法を紹介します．&lt;br&gt;&#xA;クラスカル法は至って単純で，各辺をコスト順にソートし，その辺が繋ぐノードが連結でなければその辺を採用，そうでなければ不採用としMSTを作ります．&#xA;ノード同士が連結であるかどうかは，Union-Find Treeを用いて確認します．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-style:italic&#34;&gt;// edges は Edge(int label1, int label2, long cost) のリスト&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;edges.sort(Comparator.comparingLong(o -&amp;gt; o.cost));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; UnionFindTree unionFindTree = &lt;span style=&#34;font-weight:bold&#34;&gt;new&lt;/span&gt; UnionFindTree(n); &lt;span style=&#34;font-style:italic&#34;&gt;// 要素数nのUnion-Find Treeを構築&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;&#34;&gt;long&lt;/span&gt; sum = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; Edge edge : edges) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;if&lt;/span&gt; (!unionFindTree.isSame(edge.label1, edge.label2)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        unionFindTree.unit(edge.label1, edge.label2);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sum += edge.cost;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;辺のソートに一番計算量を食われます．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ワーシャルフロイド法メモ</title>
      <link>https://t45k.github.io/kyopuro/warshallfloyd/</link>
      <pubDate>Sun, 23 Feb 2020 01:54:16 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/warshallfloyd/</guid>
      <description>&lt;p&gt;ワーシャルフロイド法というアルゴリズムを知ったのでメモ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;ワーシャルフロイド法とは&#34;&gt;&#xA;  ワーシャルフロイド法とは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%af%e3%83%bc%e3%82%b7%e3%83%a3%e3%83%ab%e3%83%95%e3%83%ad%e3%82%a4%e3%83%89%e6%b3%95%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;グラフのある一点から任意の点への最短距離を求めるアルゴリズム．&#xA;計算量は点の個数nに対してO(n^3)．&#xA;似たようなアルゴリズムに&lt;strong&gt;ダイクストラ法&lt;/strong&gt;があるが，あちらはある2点の最短距離をO(n^2)で求めるアルゴリズムである．&#xA;計算量が重ためなので，使う場面はかなり限られるが，知っておくと便利だと思った．&lt;/p&gt;&#xA;&lt;h2 id=&#34;実装&#34;&gt;&#xA;  実装&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ae%9f%e8%a3%85&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;このアルゴリズムは，動的計画法を用いて最短距離を計算するというアイデアに基づいており，実装がとても簡単．&#xA;二次元配列を用いた例がこちら．&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;&#34;&gt;void&lt;/span&gt; main(&lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; String[] args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;&#34;&gt;int&lt;/span&gt;[][] graph = &lt;span style=&#34;font-weight:bold&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;&#34;&gt;int&lt;/span&gt;[n][n];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// 初めに無限大の値で各要素を初期化&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; graph.length; i++) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Arrays.fill(graph[i], Integer.MAX_VALUE / 2); &lt;span style=&#34;font-style:italic&#34;&gt;// Integer.MAX_VALUEでないことに注意&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        graph[i][i] = 0;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// グラフの各辺を与えられた値に変更&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-style:italic&#34;&gt;// ここからワーシャルフロイド&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; k = 0; k &amp;lt; graph.length; k++) { &lt;span style=&#34;font-style:italic&#34;&gt;// 中継する点&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; i = 0; i &amp;lt; graph.length; i++) { &lt;span style=&#34;font-style:italic&#34;&gt;// 出発する点&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;&#34;&gt;int&lt;/span&gt; j = 0; j &amp;lt; graph.length; j++) { &lt;span style=&#34;font-style:italic&#34;&gt;// 到着する点&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                graph[i][j] = Math.min(graph[i][j], graph[i][k] + graph[k][j]); &lt;span style=&#34;font-style:italic&#34;&gt;// 中継する点をとった方が短となるか判定&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;三重ループを回すだけである．&#xA;注意点は，グラフの初期化時に&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;を代入しないこと．&#xA;&lt;code&gt;Math.min&lt;/code&gt;のタイミングでオーバーフローするため&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC156の解説</title>
      <link>https://t45k.github.io/kyopuro/abc156/</link>
      <pubDate>Sat, 22 Feb 2020 22:17:59 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc156/</guid>
      <description>&lt;p&gt;4完．&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC156&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;解答&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---beginner&#34;&gt;&#xA;  A - Beginner&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---beginner&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;算数&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---digits&#34;&gt;&#xA;  B - Digits&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---digits&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;nが0になるまでkで割り続ける&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---rally&#34;&gt;&#xA;  C - Rally&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---rally&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;座標は100までなので，1~100までの座標についてそれぞれ距離の総和を全探索する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---bouquet&#34;&gt;&#xA;  D - Bouquet&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---bouquet&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;組み合わせの問題．&lt;br&gt;&#xA;組み合わせの総和(nCkのkを1からnまで時の和)からaとbそれぞれの組み合わせ時の場合の数(nCaとnCb)を引く．&#xA;組み合わせの総和は2^n - 1になる．&#xA;a，bの組み合わせ計算の際には，modを考慮する必要があるため，フェルマーの小定理などを利用すると良い(modInvなどでググると出てくる)．&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/blob/master/util/Utility.java#L360-L390&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;modInvのJava実装の例&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC155の解説</title>
      <link>https://t45k.github.io/kyopuro/abc155/</link>
      <pubDate>Sun, 16 Feb 2020 22:48:43 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc155/</guid>
      <description>&lt;p&gt;無念の三冠．&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---poor&#34;&gt;&#xA;  A - Poor&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---poor&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;重複を調べる問題．&lt;br&gt;&#xA;愚直に比較しても良いけど，Setを使うのが早そう．&lt;br&gt;&#xA;JavaだとIntStreamからの各値にmapしてdistinctするとちょっとかっこいいかも．&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---papers-please&#34;&gt;&#xA;  B - Papers, Please&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---papers-please&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;fizzbuzzみたいな問題．&lt;br&gt;&#xA;これもIntStreamからのfilterでallMatchすると多少カッコよく書ける．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---poll&#34;&gt;&#xA;  C - Poll&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---poll&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;連想配列を使って数え上げる典型的な問題．&lt;br&gt;&#xA;StringのListのソート方法をド忘れして時間を無駄に使ってしまった(正しくは&lt;code&gt;Collections#sort&lt;/code&gt;)．&#xA;C#だと文字列ソートが遅いらしく発狂している人がちらほらいた．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---pairs&#34;&gt;&#xA;  D - Pairs&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---pairs&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;E問題より難しいD問題．&#xA;以下の要素が重なりあってきつい．&lt;/p&gt;&#xA;&lt;h3 id=&#34;決め打ち二分探索&#34;&gt;&#xA;  決め打ち二分探索&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%b1%ba%e3%82%81%e6%89%93%e3%81%a1%e4%ba%8c%e5%88%86%e6%8e%a2%e7%b4%a2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;決め打ち二分探索とは，単調性がある問題に対して，その問題を満たす最小の数字を探す二分探索法を指す．&#xA;単調性とは，ある数 &lt;code&gt;x&lt;/code&gt; に対してその問題が成り立つならば，&lt;code&gt;x&lt;/code&gt; 以降の数字に対しても成り立つような性質を指す．&lt;br&gt;&#xA;　実装的な視点で言うと，まず最初に単調性を満たし，真偽値を返す関数 &lt;code&gt;isOk(...)&lt;/code&gt; を用意する．&#xA;D問題だと&lt;strong&gt;ある値 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;K&lt;/code&gt; が与えられた時に，積が &lt;code&gt;x&lt;/code&gt; 以下となるペアの個数が &lt;code&gt;K&lt;/code&gt; 以上の場合は真&lt;/strong&gt;のようになる．&lt;br&gt;&#xA;　次に，二分探索の対象を用意する．このとき，始点は &lt;code&gt;isOk&lt;/code&gt; が偽となり，かつ終点は真となるような範囲を用意する．&#xA;今回だと，例えば出力が正となるような場合分けをした時，0は必ず偽なので &lt;code&gt;0 ~ 10^18&lt;/code&gt; のようになる．&lt;br&gt;&#xA;　そして二分探索する．&#xA;二分探索では通常範囲を指定するが，この時始点は &lt;code&gt;isOk&lt;/code&gt; が偽，終点は真となることを意識する．&#xA;通常の二分探索と同じく対象範囲の真ん中の値(&lt;code&gt;(始点 + 終点) / 2&lt;/code&gt;)をとり，それの真偽を判定する．&#xA;真の場合は始点から真ん中の値までを，偽の場合は真ん中の値から終点までを再起的に計算する．&#xA;この操作で，常に始点は偽，終点は真となる．&#xA;最終的に始点と終点が連続した値になるため，その終点を解として出力する．&lt;br&gt;&#xA;　要約すると，&lt;code&gt;isOk()&lt;/code&gt; を満たす範囲の下界を求める操作だと言える．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC154の解説</title>
      <link>https://t45k.github.io/kyopuro/abc154/</link>
      <pubDate>Sun, 09 Feb 2020 22:40:15 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc154/</guid>
      <description>&lt;p&gt;A~Dまで．&lt;a href=&#34;https://github.com/t45k/kyopuro/tree/master/AtCoder/ABC/abc154&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;コード&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---remaining-balls&#34;&gt;&#xA;  A - Remaining Balls&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---remaining-balls&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Uで分岐&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---i-miss-you&#34;&gt;&#xA;  B - I miss you&amp;hellip;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---i-miss-you&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;入力の文字列の長さの回数&amp;rsquo;x&amp;rsquo;を出力&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---distinct-or-not&#34;&gt;&#xA;  C - Distinct or Not&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---distinct-or-not&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;連想配列を使って数字が出現したかを確認&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---dice-in-line&#34;&gt;&#xA;  D - Dice in Line&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---dice-in-line&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;毎回期待値計算をすると遅いので，1000(&amp;gt;= pi)までの累積和を計算しておく．&#xA;あとは連続したKの要素の期待値の合計をそれぞれ求めるだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---almost-everywhere-zero&#34;&gt;&#xA;  E - Almost Everywhere Zero&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---almost-everywhere-zero&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;桁DP&lt;br&gt;&#xA;0でない(= 1 ~ 9)の数字がK回出る回数を数える．&#xA;桁を上から決定していき数え上げる．&#xA;桁の決定の仕方は，&lt;strong&gt;その桁を決める前の時点でNより小さいことが確定しているかどうか&lt;/strong&gt;で変わる．&lt;br&gt;&#xA;確定している場合を&lt;code&gt;dp[|N|][K + 1]&lt;/code&gt;と表現した時に，桁iでの状態遷移は以下のようになる&lt;/p&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;桁i-1での状態&lt;/th&gt;&#xA;          &lt;th style=&#34;text-align: left&#34;&gt;桁iでの状態&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;確定している&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;0を選択する: &lt;code&gt;dp[i][k] += dp[i - 1][k]&lt;/code&gt;&lt;br&gt;0以外を選択する: &lt;code&gt;dp[i][k] += dp[i - 1][k - 1] * 9&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;確定していない&lt;/td&gt;&#xA;          &lt;td style=&#34;text-align: left&#34;&gt;桁iが0の時: Nより小さくすることはできないので何もしない&lt;br&gt;桁iが0でない時: &lt;strong&gt;1 ~ (桁iの数字 - 1)までを選択することで確定している状態に持っていくことができる&lt;/strong&gt;ので，桁i-1までに0以外の数字が出現した回数をjとすると&lt;code&gt;dp[i][j + 1] += (桁iの数字 - 1)&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;p&gt;桁を上から見て行った時に，0でない数字がK回出た時点で，それ以降の数字の決め方はNより小さいことが確定することに注意．&lt;br&gt;&#xA;最終的な出力は&lt;code&gt;dp[|N| - 1][K] + ((N自身が条件を満たす)? 1 : 0)&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ICSE2020の面白そうな論文をピックアップしてみた</title>
      <link>https://t45k.github.io/blog/icse2020_abst/</link>
      <pubDate>Sat, 01 Feb 2020 18:59:35 +0900</pubDate>
      <guid>https://t45k.github.io/blog/icse2020_abst/</guid>
      <description>&lt;p&gt;ICSEはInternational Conference of Software Engineeringの略です．&#xA;ソフトウェア工学の国際学会の中で一番ランクが高い会議です．&#xA;会議自体は5月に行われるのですが，再録された論文一覧とアブストが公開されているので，&#xA;面白そうな論文をピックアップしてみました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;is-rust-used-safely-by-software-developers&#34;&gt;&#xA;  Is Rust Used Safely by Software Developers?&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#is-rust-used-safely-by-software-developers&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;RustはC，C++に取って代わることを目指した，メモリ安全性や実行速度を売りにしているプログラミング言語です．&#xA;その特徴から，ソフトウェア開発界隈からの注目度が高まりつつあります．&lt;br&gt;&#xA;この論文では，メモリ安全性を放棄する代わりにパフォーマンスを上げる &lt;strong&gt;Unsafe Rust&lt;/strong&gt; についての調査を行っています．&lt;/p&gt;&#xA;&lt;h2 id=&#34;securing-unsafe-rust-programs-with-xrust&#34;&gt;&#xA;  Securing UnSafe Rust Programs with XRust&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#securing-unsafe-rust-programs-with-xrust&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;これもRustの論文です．&lt;br&gt;&#xA;XRustという，Unsafe Rustを通常のRustに移行する手法を提案しています．&lt;br&gt;&#xA;ICSEに(Unsafe)Rustに関する論文が2本採択されていることから，ソフトウェア開発におけるRustの盛り上がり具合が分かります．&lt;/p&gt;&#xA;&lt;h2 id=&#34;big-code--big-vocabulary-open-vocabulary-models-for-source-code&#34;&gt;&#xA;  Big Code != Big Vocabulary: Open-Vocabulary Models for Source code&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#big-code--big-vocabulary-open-vocabulary-models-for-source-code&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;キャッチーなタイトルだったのでピックアップしてみました．&lt;br&gt;&#xA;変数名などのユーザー定義の識別子があるため，ソースコードは自然言語に比べて，大規模になるとコーパスが巨大になってしまいます．&#xA;この論文では，コーパスがスケールするように，新しい言語モデルを提案しています．&lt;/p&gt;&#xA;&lt;h2 id=&#34;dlfix-context-based-code-transformation-learning-for-automated-program-repair&#34;&gt;&#xA;  DLFix: Context-based Code Transformation Learning for Automated Program Repair&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#dlfix-context-based-code-transformation-learning-for-automated-program-repair&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;最近のソフトウェア工学の大きなトピックの一つであるAPRの論文．&lt;br&gt;&#xA;機械学習ベースのAPRは過去のバグ修正の学習に制限があるのに対して，DLFixでは学習のレイヤを2層に分けることでうまくこの制限を回避したらしいです．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC153の解説</title>
      <link>https://t45k.github.io/kyopuro/abc153/</link>
      <pubDate>Sun, 26 Jan 2020 22:32:42 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc153/</guid>
      <description>&lt;p&gt;けもフレチックでした．&lt;/p&gt;&#xA;&lt;p&gt;A~Eまで&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---serval-vs-monster&#34;&gt;&#xA;  A - Serval vs Monster&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---serval-vs-monster&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;(H + A - 1) / A するだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---common-raccoon-vs-monster&#34;&gt;&#xA;  B - Common Raccoon vs Monster&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---common-raccoon-vs-monster&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;必殺技の総和をとって大小比較&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---fennec-vs-monster&#34;&gt;&#xA;  C - Fennec vs Monster&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---fennec-vs-monster&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;体力が高い順にモンスターに必殺技を使い，残ったモンスターには通常攻撃&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---caracal-vs-monster&#34;&gt;&#xA;  D - Caracal vs Monster&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---caracal-vs-monster&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;等比数列の和&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---crested-ibis-vs-monster&#34;&gt;&#xA;  E - Crested Ibis vs Monster&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---crested-ibis-vs-monster&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;DP&lt;/p&gt;&#xA;&lt;p&gt;ソースコード&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC153&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC153&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>研究室のパソコンがmacbook proになった話</title>
      <link>https://t45k.github.io/blog/mbp/</link>
      <pubDate>Tue, 21 Jan 2020 18:11:41 +0900</pubDate>
      <guid>https://t45k.github.io/blog/mbp/</guid>
      <description>&lt;p&gt;組織特有の，年末に予算を使い切る目的で，新しいmacbook proを貸してもらえることになった．&#xA;モデルはMid2019の13インチモデル．&#xA;研究室内で大した業績を上げていない自分にしてはとても良いものを貸してもらえたと思う．&lt;/p&gt;&#xA;&lt;p&gt;以下，使ってみた感想&lt;/p&gt;&#xA;&lt;h2 id=&#34;良いとこ&#34;&gt;&#xA;  良いとこ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%89%af%e3%81%84%e3%81%a8%e3%81%93&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;速い&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;今まで2015年モデルのmacbook airを借りていた．&#xA;mbpと比べるとマシンパワーが段違いであり，作業にかかる時間が大幅に短縮された．&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;画面が綺麗&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;マジで全然違う．&#xA;4年でここまで変わるのかって感じ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;良くないとこ&#34;&gt;&#xA;  良くないとこ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%89%af%e3%81%8f%e3%81%aa%e3%81%84%e3%81%a8%e3%81%93&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;日本語入力がもっさりしてる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;mbaでは起きていなかった現象．&#xA;英語入力から日本語入力に変更した直後が，なぜか入力してから画面に表示されるまで0.5秒くらいかかる．&#xA;ググったら結構記事がヒットしたので，何かしらの解決法はあると思う．&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;キーボードがヤバイ&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;使う前からバタフライキーボードがやばいことは理解していたが，使ってみるとやっぱりやばかった．&#xA;普段RealForceや青軸のゲーミングキーボード等のしっかりと押し込むタイプのキーボードを使っているので違和感が凄い．&lt;/p&gt;&#xA;&lt;p&gt;多分ボタンの押し方にコツが必要なのだと感じた．&#xA;バタフライキーボードは指先で押すと指先を痛めやすい（インターンでmbpを借りていたときはマジで一日の終わりは指先が痛かった）ので，指の腹で押すのが大事だと思う．&#xA;今でも&amp;rsquo;return&amp;rsquo;を押す右小指が痛くなってきた．&#xA;普段からmbpを使っている友達曰く，なぞるように押すのが良いらしいので慣れるしかないかなぁって気持ち．&lt;/p&gt;&#xA;&lt;p&gt;また，バタフライキーボードは薄さにわりに押す際に力が必要なので，小指などで押す&amp;rsquo;A&amp;rsquo;や&amp;rsquo;P&amp;rsquo;などが押せてないことが頻発した．&lt;/p&gt;&#xA;&lt;p&gt;エスケープが使いづらいのも地味に辛い．&lt;/p&gt;&#xA;&lt;h2 id=&#34;まとめ&#34;&gt;&#xA;  まとめ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%81%be%e3%81%a8%e3%82%81&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;研究室ではRealForceに接続して使うのでバタフライキーボードはまだマシだと思う．&lt;/p&gt;</description>
    </item>
    <item>
      <title>ABC152の解説</title>
      <link>https://t45k.github.io/kyopuro/abc152/</link>
      <pubDate>Mon, 20 Jan 2020 00:27:48 +0900</pubDate>
      <guid>https://t45k.github.io/kyopuro/abc152/</guid>
      <description>&lt;p&gt;A~E問題まで．&lt;/p&gt;&#xA;&lt;h2 id=&#34;a---ac-or-wa&#34;&gt;&#xA;  A - AC or WA&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a---ac-or-wa&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;if文で分岐するだけ&lt;/p&gt;&#xA;&lt;h2 id=&#34;b---comparing-strings&#34;&gt;&#xA;  B - Comparing Strings&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#b---comparing-strings&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;辞書順なので，どれだけ長くても答えは必ず2数の小さい方の値で構成される．&#xA;2数の大きい方の値の回数だけ，小さい方の値を出力する．&lt;/p&gt;&#xA;&lt;h2 id=&#34;c---low-elements&#34;&gt;&#xA;  C - Low Elements&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#c---low-elements&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;数字を順番に見て行った時に，今見ている数字が今まで見てきた中で最小の値以下であればカウントして，最小の値を更新．&lt;/p&gt;&#xA;&lt;h2 id=&#34;d---handstand-2&#34;&gt;&#xA;  D - Handstand 2&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#d---handstand-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;与えられた数の範囲内で，数字の先頭と末尾だけを見た際に同じ数を数え上げていく．&#xA;例えば334は34，398は38という感じ．&#xA;あとは組み合わせの数同士(例えば34なら43と，38なら83と)を掛け合わせるだけ．&lt;/p&gt;&#xA;&lt;h2 id=&#34;e---flatten&#34;&gt;&#xA;  E - Flatten&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#e---flatten&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;modの逆元を知らないと厳しい問題．&lt;a href=&#34;https://qiita.com/drken/items/3b4fdf0a78e7a138cd9a#3-1-mod-p-%E3%81%AE%E4%B8%96%E7%95%8C%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%89%B2%E3%82%8A%E7%AE%97%E3%81%A8%E3%81%AF&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;参考&lt;/a&gt;&lt;br&gt;&#xA;この手の問題はユークリッドの互除法でGCDを求めてからLCMを求めるパターンがよくあるが，今回はオーバーフローの可能性があるため，素因数分解してからmod付きLCMを求める．&#xA;LCMがmod計算してあるので，単純に各値で割るのではなく，modの逆元を計算した上で各値をLCMにかける必要がある．&lt;/p&gt;&#xA;&lt;p&gt;ソースコード&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC152&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/T45K/kyopuro/tree/master/AtCoder/ABC/ABC152&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>自己紹介</title>
      <link>https://t45k.github.io/about/</link>
      <pubDate>Tue, 14 Jan 2020 22:32:06 +0900</pubDate>
      <guid>https://t45k.github.io/about/</guid>
      <description>&lt;h1 id=&#34;こんにちは&#34;&gt;&#xA;  こんにちは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%81%93%e3%82%93%e3%81%ab%e3%81%a1%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;中川 将（なかがわ たすく）。&#xA;大阪のバックエンドエンジニア。&lt;/p&gt;&#xA;&lt;img src=&#34;https://t45k.github.io/img/about.jpg&#34; height=&#34;50%&#34; width=&#34;50%&#34; &gt;&#xA;&lt;h1 id=&#34;好き&#34;&gt;&#xA;  好き&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%a5%bd%e3%81%8d&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Java、Kotlin、IntelliJ、Jenkins&lt;/li&gt;&#xA;&lt;li&gt;車輪が 2 つ付いてるもの&#xA;&lt;ul&gt;&#xA;&lt;li&gt;バイクは Kawasaki Ninja 250SL&lt;/li&gt;&#xA;&lt;li&gt;チャリンコは SPECIALIZED TARMAC&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;競プロ&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AtCoder 水色&lt;/li&gt;&#xA;&lt;li&gt;（ほぼ引退）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;酒&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ビールだと一番搾りとヒューガルデンとブルックリンラガー&lt;/li&gt;&#xA;&lt;li&gt;日本酒&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;DJ Technorch と Masayoshi Minoshima&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;嫌い&#34;&gt;&#xA;  嫌い&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%ab%8c%e3%81%84&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;JavaScript&lt;/li&gt;&#xA;&lt;li&gt;クソコード&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;コーディングポリシー&#34;&gt;&#xA;  コーディングポリシー&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%b3%e3%83%bc%e3%83%87%e3%82%a3%e3%83%b3%e3%82%b0%e3%83%9d%e3%83%aa%e3%82%b7%e3%83%bc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;イミュータブル&lt;/li&gt;&#xA;&lt;li&gt;非 null&lt;/li&gt;&#xA;&lt;li&gt;メソッドチェーン&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;登壇&#34;&gt;&#xA;  登壇&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e7%99%bb%e5%a3%87&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;カンファレンス&#34;&gt;&#xA;  カンファレンス&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%ab%e3%83%b3%e3%83%95%e3%82%a1%e3%83%ac%e3%83%b3%e3%82%b9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://eventregist.com/e/luIcqEmpqPI2&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JJUG CCC 2023 Spring&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://fortee.jp/kotlin-fest-2024/proposal/accepted&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kotlin Fest 2024&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;勉強会&#34;&gt;&#xA;  勉強会&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8b%89%e5%bc%b7%e4%bc%9a&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://server-side-kotlin-meetup.connpass.com/event/291686/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Server-Side Kotlin Meetup vol.10&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hatena.connpass.com/event/314401/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kyoto Tech Talk #4&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;呟き&#34;&gt;&#xA;  呟き&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%91%9f%e3%81%8d&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;style type=&#34;text/css&#34;&gt;&#xA;    .box{&#xA;&#x9;&#x9;overflow:auto;&#xA;&#x9;&#x9;width:500px; height:1000px;&#xA;&#x9;&#x9;padding:1px;&#xA;&#x9;&#x9;color:#000000;&#xA;&#x9;&#x9;background-color:#000000;&#xA;&#x9;&#x9;line-height:1.5em;&#xA;    }&#xA;&lt;/style&gt;&#xA;&lt;div class=&#34;box&#34;&gt;&#xA;&lt;a class=&#34;twitter-timeline&#34; href=&#34;https://twitter.com/getupmax?ref_src=twsrc%5Etfw&#34;&gt;&lt;/a&gt;&#xA;&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>APSEC2019に参加した話</title>
      <link>https://t45k.github.io/blog/apsec_2019/</link>
      <pubDate>Thu, 05 Dec 2019 20:19:32 +0900</pubDate>
      <guid>https://t45k.github.io/blog/apsec_2019/</guid>
      <description>&lt;p&gt;12/3~5にマレーシアで開催されたAPSECに参加してきました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;apsecとは&#34;&gt;&#xA;  APSECとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#apsec%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Asia-Pacific Software Engineering Conferenceの略です．&#xA;要するにソフトウェア工学の国際会議です．&#xA;会議ランクについては詳しくは知らないのですがそこまで高くないと思います．&#xA;投稿前に先生が，「APSECは塩漬けのネタを投稿するのにちょうど良い」と語っていたのが印象的でした．&lt;/p&gt;&#xA;&lt;h2 id=&#34;マレーシアとは&#34;&gt;&#xA;  マレーシアとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%83%9e%e3%83%ac%e3%83%bc%e3%82%b7%e3%82%a2%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;こんな国です．&lt;/p&gt;&#xA;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;ja&#34; dir=&#34;ltr&#34;&gt;マレーシア&lt;br&gt;+ 物価が安い&lt;br&gt;+ 時差が1時間&lt;br&gt;+ 英語が通じる&lt;br&gt;&lt;br&gt;+- 暑い&lt;br&gt;&lt;br&gt;- 酒を飲める場所がかなり限られる&lt;br&gt;- 用を足した後に紙を使わない文化&lt;/p&gt;&amp;mdash; task (@getupmax) &lt;a href=&#34;https://twitter.com/getupmax/status/1202822137611862017?ref_src=twsrc%5Etfw&#34;&gt;December 6, 2019&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&#xA;&lt;h2 id=&#34;感想&#34;&gt;&#xA;  感想&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%84%9f%e6%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;img src=&#34;https://t45k.github.io/img/blog/apsec.jpg&#34; height=&#34;50%&#34; width=&#34;50%&#34;&gt;&#xA;&lt;p&gt;投稿前はあまり気乗りしなかったし，正直通るとも思ってませんでしたが，結果的には国際学会で発表できて良かったなと感じました．&#xA;質疑対応がかなりグダッてしまったので英語力（特にリスニング）を鍛えるのが重要だと思いました．&lt;/p&gt;</description>
    </item>
    <item>
      <title>LINE DEVELOPER DAY2019に参加した話</title>
      <link>https://t45k.github.io/blog/devday/</link>
      <pubDate>Thu, 21 Nov 2019 20:16:05 +0900</pubDate>
      <guid>https://t45k.github.io/blog/devday/</guid>
      <description>&lt;p&gt;11/20，21に開催されたLINE DEV DAYに参加してきました．&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/devday.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;dev-dayとは&#34;&gt;&#xA;  DEV DAYとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#dev-day%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;LINEが開催している社内の技術などを公開するエンジニア向けのイベントです．&#xA;今年は二日に分けて開催し，エンジニアだけでなくデザインやプロダクト的な話も盛り込んだそうです．&lt;/p&gt;&#xA;&lt;h2 id=&#34;参加したきっかけ&#34;&gt;&#xA;  参加したきっかけ&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8f%82%e5%8a%a0%e3%81%97%e3%81%9f%e3%81%8d%e3%81%a3%e3%81%8b%e3%81%91&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../line/&#34; &gt;LINEのインターン&lt;/a&gt;に参加した時のメンターさんがLINE SDKのリードテックになられたらしく，DEV DAYでの登壇の際にインターン中に作ったプロダクトを紹介するかもみたいな話を小耳に挟んだのがきっかけです．&#xA;また，LINEは学生向けに金銭的援助を行っており，インターン生は（交通費として）無条件で3万円もらえるというのも結構魅力的でした．&lt;/p&gt;&#xA;&lt;h2 id=&#34;感想&#34;&gt;&#xA;  感想&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%84%9f%e6%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;20日は違う会社の採用面接に参加していたため，21日だけ参加しました．&#xA;思ったより規模が大きく，たくさんの人が参加していたのが印象的でした．&#xA;感想ですが，実は当日頭痛が酷く，話を聞く余裕がなかったというのが正直なところです．&#xA;例のメンターさんの発表で，唐突にライブコーディングが始まったのだけはっきり覚えています．&#xA;また，国際学会前というのもあり，慌ただしく帰ることになってしまいました．&lt;/p&gt;&#xA;&lt;p&gt;今年はゆっくり聞く時間がなかったので，来年機会があればもう少し余裕を持って参加したいなと感じました．&lt;/p&gt;</description>
    </item>
    <item>
      <title>インターン総括</title>
      <link>https://t45k.github.io/blog/intern/</link>
      <pubDate>Sat, 14 Sep 2019 18:26:04 +0900</pubDate>
      <guid>https://t45k.github.io/blog/intern/</guid>
      <description>&lt;p&gt;2019年，M1の夏休みに行ってきたインターンの所感を書きます．&lt;/p&gt;&#xA;&lt;h2 id=&#34;参加したインターン&#34;&gt;&#xA;  参加したインターン&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8f%82%e5%8a%a0%e3%81%97%e3%81%9f%e3%82%a4%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../aws/&#34; &gt;AWS&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../line/&#34; &gt;LINE KYOTO&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../rakuten/&#34; &gt;楽天&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参加しなかったインターン&#34;&gt;&#xA;  参加しなかったインターン&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8f%82%e5%8a%a0%e3%81%97%e3%81%aa%e3%81%8b%e3%81%a3%e3%81%9f%e3%82%a4%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../ntt/&#34; &gt;NTT DATA&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参加できなかったインターン&#34;&gt;&#xA;  参加できなかったインターン&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e5%8f%82%e5%8a%a0%e3%81%a7%e3%81%8d%e3%81%aa%e3%81%8b%e3%81%a3%e3%81%9f%e3%82%a4%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../nssol/&#34; &gt;NSSOL&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;../cookpad/&#34; &gt;cookpad&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;インターン全体の所感&#34;&gt;&#xA;  インターン全体の所感&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%a4%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%b3%e5%85%a8%e4%bd%93%e3%81%ae%e6%89%80%e6%84%9f&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;意識高い学生が多い&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;学部の時は普段からゴリゴリ開発してるような友人はあまりいなかったため，意識の高い学生がこんなにもいることに驚きました&lt;/li&gt;&#xA;&lt;li&gt;彼らと就活で戦うことを考えるとすでに辛い&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;結構B3，B4で参加してる人も多い&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;意識高い&lt;/li&gt;&#xA;&lt;li&gt;当時の僕はインターンなんて考えたことなかったので&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;実力も高い&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AtCoder青とかがゴロゴロいる&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;また，自分のスキルアップ（特にweb周りの知識）に繋がったのでよかったです．&lt;/p&gt;&#xA;&lt;p&gt;反省点としては，フロントなどの今までの自分が全くやったことがないような分野に挑戦することがなかったことが挙げられます．&#xA;自分の知らない分野を一から勉強した上できちんとしたものを作ることを，期限が短いインターン中にやり切るのは難易度が高いと感じました．&#xA;こういうことは普段から興味を持って勉強した方が良いのだと考えさせられました．&lt;/p&gt;</description>
    </item>
    <item>
      <title>楽天のインターンに参加した話</title>
      <link>https://t45k.github.io/blog/rakuten/</link>
      <pubDate>Fri, 13 Sep 2019 18:21:32 +0900</pubDate>
      <guid>https://t45k.github.io/blog/rakuten/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/rakuten_morning.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;9/9~13の間，大阪で開催された楽天様のインターンに参加してきました．&#xA;写真はインターン中に頂いた無料朝食です．&lt;/p&gt;&#xA;&lt;h2 id=&#34;楽天とは&#34;&gt;&#xA;  楽天とは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e6%a5%bd%e5%a4%a9%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;説明不要だと思います．&#xA;日本発のメガベンチャーで，ECの楽天市場などが有名です．&#xA;会社としては，外国人を積極的に採用しており，社内公用語が英語であることが特徴です．&lt;/p&gt;&#xA;&lt;h2 id=&#34;選考フロー&#34;&gt;&#xA;  選考フロー&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%81%b8%e8%80%83%e3%83%95%e3%83%ad%e3%83%bc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;選考は面接だけでした．&#xA;面接の内容もそこまで突っ込んだ話はしなかったです．&#xA;面接官の社員さんと趣味が合い，ずっとバイクの話をしていました．&lt;/p&gt;&#xA;&lt;p&gt;面接に通過した後，Springを使うための簡単な事前課題が出されました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;インターン&#34;&gt;&#xA;  インターン&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%a4%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;外国人向けサービスを作ってみようという題目でハッカソンを行いました．&#xA;学生4人 + メンターの社員さん2名で開発を行っていくという方式でした．&#xA;今までメンターの社員さんは困ったり質問があったら訊きにいく程度の存在だったので，ここまでがっつり開発に参加してくれるのは新鮮でした．&#xA;他のインターンでは作るものが指定されていたので，アイデアソンから始めるというのは初めての出来事でした（余談ですが，アイデアが他の班と完全に被っていました）．&lt;/p&gt;&#xA;&lt;p&gt;開発を始めたのは2日目の朝からでしたが，班のメンバーにはgitを使ったことなかったり，Javaを書いたりしたことがない人もいたため，午前中はそこら辺の知識の共有から始めました（これのおかげで，その後スムーズに開発することができました）．&#xA;仕様などを決める際にも，社員さんと相談しながら決めました．&#xA;AWSの時はまったく理解できなくて着いていけなくなった経験から，分からないことは質問して理解してから先に進むようにしました．&#xA;開発自体はスムーズに進み，プロダクト自体も個人的には満足いくものが作れました．&#xA;技術的な面では，空いている時間でCIやDockerなどのモダンな技術を導入できました．&#xA;しかしプレゼンがグダリすぎてしまい，コンペでは最下位という結果でした．&#xA;プロダクト自体には満足していたので，結構悔しかったです．&#xA;ただ開発は楽しかったし，会社としての楽天も食堂が無料など良い点が多くインターンには非常に満足しました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;追記&#34;&gt;&#xA;  追記&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%bf%bd%e8%a8%98&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;インターン中のパフォーマンスが評価されて，M1の10月ごろに採用面接をしていただけました．&#xA;合計3回の面接を経て，内定を頂けました．&lt;/p&gt;</description>
    </item>
    <item>
      <title>LINE KYOTOのインターンに参加した話</title>
      <link>https://t45k.github.io/blog/line/</link>
      <pubDate>Fri, 30 Aug 2019 18:13:39 +0900</pubDate>
      <guid>https://t45k.github.io/blog/line/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://t45k.github.io/img/blog/line.JPG&#34; width=&#34;50%&#34; height=&#34;50%&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;p&gt;8/26~30の間，京都で開催されたLINE KYOTOのインターンに参加してきました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;line-kyotoとは&#34;&gt;&#xA;  LINE KYOTOとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#line-kyoto%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;LINEが何なのかは説明不要だと思うので割愛します．&#xA;LINE KYOTOは開発部しか持っていない，純粋な開発拠点であることが特徴の一つです．&#xA;また，京都という土地柄，外国人が多く所属しているのも特徴です（社員さんの半分以上が外国籍の方でした）．&lt;/p&gt;&#xA;&lt;h2 id=&#34;選考フロー&#34;&gt;&#xA;  選考フロー&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%81%b8%e8%80%83%e3%83%95%e3%83%ad%e3%83%bc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;選考は技術試験と面接です．&#xA;技術試験はいわゆるプロコンみたいな問題で，普段から勉強しておくと多少有利かもしれません．&#xA;面接は，今まで自分がやってきたことを5枚程度のスライドにまとめて，その内容も踏まえて面接を行うというものでした．&#xA;僕はこれまで大規模な開発などを経験したことがなかったので，これまでやってきた研究について話しました．&#xA;結構倍率は高いようでしたが何とか通りました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;インターン&#34;&gt;&#xA;  インターン&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%a4%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;LINEが開発しているLIFF SDKを用いて，LINE上で動くサービスを開発してみようという内容でハッカソンを行いました．&#xA;3人で一つの班を組み，4つのテーマから1つ選択するという形式で，僕たちの班はUNOを選択しました．&#xA;僕達が参加した一週間前にも同じインターンがあり，その時UNOを選択した班は結局完成しなかったと散々脅されましたが，結果的に4班中3班がUNOを選択していました．&lt;/p&gt;&#xA;&lt;p&gt;僕達の班はフロントの描画担当の子がKotlinで書くということなので，フロントからサーバまですべてKotlinで書くことにしました．&#xA;僕は楽天のインターンの事前課題でSpringを触っていたのでサーバを書くことにしました．&#xA;また，3人班のもう一人の子が超絶優秀で，最初に仕様とDB設計を行い，サーバとフロントの手伝いをしつつ，サーバとフロントと外部APIを繋げてちゃんと動くようにするという一番難しい部分を担ってくれたおかげで，僕たちの班はちゃんと動くものを作ることができました．&#xA;結果的に他の2班は完成させることができず，とても達成感と満足感を得ることができました．&lt;/p&gt;&#xA;&lt;p&gt;社員さん達もそれぞれの分野に精通した人が揃っていて，問題が発生してもすぐに解決できることが多かったです．&#xA;残業禁止で定時には全員帰られるというのもとても魅力的でした．&lt;/p&gt;&#xA;&lt;p&gt;インターン中の様子は以下の以下のLINE公式ブログにも取り上げられています．&#xA;&lt;a href=&#34;https://engineering.linecorp.com/ja/blog/kyoto-intern2019/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://engineering.linecorp.com/ja/blog/kyoto-intern2019/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;追記&#34;&gt;&#xA;  追記&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%bf%bd%e8%a8%98&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;せっかくインターンに参加したので，本選考も受けることにしました．&#xA;本選考は技術テストが1回，技術面接が1回，最終面接でした．&#xA;最終面接にて無事不採用となりました．&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWSのインターンに参加した話</title>
      <link>https://t45k.github.io/blog/aws/</link>
      <pubDate>Tue, 20 Aug 2019 18:07:41 +0900</pubDate>
      <guid>https://t45k.github.io/blog/aws/</guid>
      <description>&lt;p&gt;8/19~13の間，東京で開催されたAmazon Web Serviceのインターンに参加してきました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;awsとは&#34;&gt;&#xA;  AWSとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#aws%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;AWSとは，Amazon Web Serviceの略です．&#xA;AWSはAmazonのクラウド事業を担当している会社です．&#xA;Amazonのマーケットプレイスを筆頭に，様々な会社がAWSのクラウドを利用しています（クラウド事業ではシェア1位です）．&#xA;今，世界で最も勢いのあるIT会社の一つだと言えます．&lt;/p&gt;&#xA;&lt;h2 id=&#34;選考フロー&#34;&gt;&#xA;  選考フロー&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%81%b8%e8%80%83%e3%83%95%e3%83%ad%e3%83%bc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;HP上には技術試験 + 面接と書いてあったのですが，なぜか面接が行われませんでした．&#xA;技術試験では実際にEC2インスタンスが与えられ，そこの上でAPIサーバを立てるという内容でした．&#xA;今までサーバ開発をしたことがなかったので，簡単にサーバが書けると噂のPHPを急いで勉強して何とか提出にこぎつけました．&#xA;問題的には明らかにDBを使わせようとしていましたが，そこまで手が回らなかったのでjsonファイルを読み書きするという手段をとりました．&#xA;結果的に通ったので良かったです．&lt;/p&gt;&#xA;&lt;h2 id=&#34;インターン&#34;&gt;&#xA;  インターン&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e3%82%a4%e3%83%b3%e3%82%bf%e3%83%bc%e3%83%b3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;実際に存在するサービスを模倣してアーキテクチャを設計するという題目で，5日間グループワークを行いました．&#xA;仕事内容的には魅力的だったのですが，いかんせん僕にネットワークの知識がなさすぎて2日目くらいから早くも着いていけなくなりました．&#xA;東京まで来て何してるんだろうって結構辛い気持ちになりました．&#xA;ただしっかり勉強した上で望めば本当に楽しいのだろうなと感じました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;追記&#34;&gt;&#xA;  追記&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e8%bf%bd%e8%a8%98&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;このインターンは採用直結型だったので，インターン後そのまま本選考に応募しました．&#xA;技術試験，技術面接，最終面接を経て，12/24に無事不採用となりました．&lt;/p&gt;</description>
    </item>
    <item>
      <title>cookpadのインターンに参加できなかった話</title>
      <link>https://t45k.github.io/blog/cookpad/</link>
      <pubDate>Thu, 01 Aug 2019 18:32:27 +0900</pubDate>
      <guid>https://t45k.github.io/blog/cookpad/</guid>
      <description>&lt;p&gt;cookpadのインターンに参加できませんでした．&lt;/p&gt;&#xA;&lt;h2 id=&#34;cookpadとは&#34;&gt;&#xA;  cookpadとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#cookpad%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;料理のレシピを提供するサービスで有名な会社です．&#xA;あまり知られていないのですが（僕が知らなかっただけかもしれませんが），ITに力を入れており，技術力があるエンジニアが多く所属しています．&lt;/p&gt;&#xA;&lt;h2 id=&#34;選考フロー&#34;&gt;&#xA;  選考フロー&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%81%b8%e8%80%83%e3%83%95%e3%83%ad%e3%83%bc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;技術試験 + 面接です．&lt;/p&gt;&#xA;&lt;p&gt;技術試験はプロコンのようにテストケースが用意されているわけではなく，仕様のみが与えられてそれに一致するようなコードを書くという問題でした．&#xA;仕様を満たすようにコードは書いたつもりでしたが落ちてしまいました．&lt;/p&gt;&#xA;&lt;p&gt;原因として考えられるのが，問題中APIを叩く部分があって，通常であれば言語仕様に則ってPOSTなどをすると思うのですが，当時はAPIって何?って状態だったので，直接コマンドからcurlを呼び出すように書きました．&#xA;その辺から技術不足が見抜かれたのかなぁって感じです．&lt;/p&gt;&#xA;&lt;p&gt;結構悔しかったです．&lt;/p&gt;</description>
    </item>
    <item>
      <title>NSSOLのインターンに参加できなかった話</title>
      <link>https://t45k.github.io/blog/nssol/</link>
      <pubDate>Thu, 01 Aug 2019 18:32:21 +0900</pubDate>
      <guid>https://t45k.github.io/blog/nssol/</guid>
      <description>&lt;p&gt;NSSOL様のインターンに参加できませんでした．&lt;/p&gt;&#xA;&lt;p&gt;NSSOLに行った研究室の先輩方は多く，結構興味を持っていました．&#xA;東京までの旅費や宿泊費を出してくれる上に，毎日飲み会があると聞いていたので参加できることを楽しみにしていました．&lt;/p&gt;&#xA;&lt;h2 id=&#34;nssolとは&#34;&gt;&#xA;  NSSOLとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#nssol%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;日本製鐵のシステム部門が独立してできた会社です．&#xA;母体が大きな会社であり，NSSOLも国内のSIerの中ではそれなりに大きく有名な会社です．&lt;/p&gt;&#xA;&lt;h2 id=&#34;選考フロー&#34;&gt;&#xA;  選考フロー&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%81%b8%e8%80%83%e3%83%95%e3%83%ad%e3%83%bc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ES + SPI + 面接でした．&lt;/p&gt;&#xA;&lt;p&gt;SPIはテストセンターまで受けに行かなければならず面倒でした．&#xA;面接は顔合わせ程度のものだと聞いていたのでここで落とされるとは思っていませんでした．&#xA;ただ面接自体は，普段からやっていて癖になっている自虐が多く出てしまい落ちることも納得でした．&#xA;こういうジャパニーズトラディショナルカンパニーには面接でありのままの自分を見せるよりも多少は偽った方が良いのかなと思いました．&lt;/p&gt;</description>
    </item>
    <item>
      <title>NTT DATAのインターンに参加しなかった話</title>
      <link>https://t45k.github.io/blog/ntt/</link>
      <pubDate>Thu, 01 Aug 2019 18:32:15 +0900</pubDate>
      <guid>https://t45k.github.io/blog/ntt/</guid>
      <description>&lt;p&gt;NTT DATAのインターンに参加しませんでした．&lt;/p&gt;&#xA;&lt;h2 id=&#34;ntt-dataとは&#34;&gt;&#xA;  NTT DATAとは&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#ntt-data%e3%81%a8%e3%81%af&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;国内情報系最大手のNTTのSI部門会社です．&#xA;やはり最大手らしく，日本全国から有能な人材が集まることで有名です．&lt;/p&gt;&#xA;&lt;h2 id=&#34;選考フロー&#34;&gt;&#xA;  選考フロー&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%e9%81%b8%e8%80%83%e3%83%95%e3%83%ad%e3%83%bc&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;見出しへのリンク&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;見出しへのリンク&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;ES + SPI + 動画提出でした．&lt;/p&gt;&#xA;&lt;p&gt;テストセンターに行かなくても自分のパソコン上でSPIを受けれたのが個人的に楽でした．&#xA;動画はインターンに対する意気込みを語れとのことでした．&#xA;これで採用か不採用かが決まるのも変な気がしましたが，とりあえずほぼ一発どりで提出したら通ってびっくりました．&lt;/p&gt;&#xA;&lt;p&gt;このインターンに参加すると合計4週間インターンに行くことになってしまうので辞退しました．&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://t45k.github.io/kyopuro/doc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://t45k.github.io/kyopuro/doc/</guid>
      <description>&lt;!DOCTYPE HTML&gt;&#xA;&lt;!-- NewPage --&gt;&#xA;&lt;html lang=&#34;ja&#34;&gt;&#xA;&lt;head&gt;&#xA;&lt;!-- Generated by javadoc (11.0.11) on Sun Nov 07 23:56:29 JST 2021 --&gt;&#xA;&lt;title&gt;生成されたドキュメント(タイトルなし)&lt;/title&gt;&#xA;&lt;meta http-equiv=&#34;Content-Type&#34; content=&#34;text/html; charset=utf-8&#34;&gt;&#xA;&lt;script type=&#34;text/javascript&#34;&gt;window.location.replace(&#39;library/package-summary.html&#39;)&lt;/script&gt;&#xA;&lt;noscript&gt;&#xA;&lt;meta http-equiv=&#34;Refresh&#34; content=&#34;0;library/package-summary.html&#34;&gt;&#xA;&lt;/noscript&gt;&#xA;&lt;link rel=&#34;canonical&#34; href=&#34;library/package-summary.html&#34;&gt;&#xA;&lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;stylesheet.css&#34; title=&#34;Style&#34;&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;&lt;main role=&#34;main&#34;&gt;&#xA;&lt;noscript&gt;&#xA;&lt;p&gt;ブラウザのJavaScriptが無効になっています。&lt;/p&gt;&#xA;&lt;/noscript&gt;&#xA;&lt;p&gt;&lt;a href=&#34;library/package-summary.html&#34;&gt;library/package-summary.html&lt;/a&gt;&lt;/p&gt;&#xA;&lt;/main&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
  </channel>
</rss>
