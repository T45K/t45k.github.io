<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>研究 on T45K</title>
    <link>https://t45k.github.io/tags/%E7%A0%94%E7%A9%B6/</link>
    <description>Recent content in 研究 on T45K</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 24 Mar 2021 21:17:20 +0900</lastBuildDate>
    <atom:link href="https://t45k.github.io/tags/%E7%A0%94%E7%A9%B6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>大阪大学大学院情報科学研究科修士課程を修了した話</title>
      <link>https://t45k.github.io/blog/graduation/</link>
      <pubDate>Wed, 24 Mar 2021 21:17:20 +0900</pubDate>
      <guid>https://t45k.github.io/blog/graduation/</guid>
      <description>2021年3月24日をもって修士課程を修了しました．&#xA;3年間の戦績は&#xA;論文誌採録*1&#xA;論文誌条件付き採録*1&#xA;国際会議採録*2&#xA;国際会議査読中*1&#xA;研究会原稿*3&#xA;で現状不採録0です&#xA;対ありでした&#xA;&amp;mdash; task@減塩 (@getupmax) March 24, 2021 研究室に所属して3年間色んなことがあった気がするので書き留めておきます．&#xA;所属前 大学に入学してからプログラミングを始めたが結構楽しめていたので，「ソースコードを書くこと」について研究できれば良いなぁと漠然と考えていた． 阪大基礎工学部情報科学科では3回生の時に各研究室の先生に着いてゼミが行われるので，前期後期ともにソフトウェア工学の研究室のゼミに参加した． 前半は「リファクタリング」について，後半は「ソースコードメトリクス」についてのゼミで，前半にゼミを担当していた先生が何となく面白そうだったので，その研究室の配属を目標にした．&#xA;B4 4月 無事目標の研究室に配属． 配属後リファクタリング的なネタをやりたいと伝える． 論文を渡されてネタを探すように言われる． 当然研究室に入ったばかりで自分ですんなりネタを決めれるわけもなく， 指導教員の先生とミーティングをするも会話が噛み合わないことが多く， 険悪な雰囲気になることが多かった気がする （主観的だが，口調が若干きつかったと感じることが多かった）． この頃から何となく「この先生とは一生分かり合えないんだろうなぁ」って思うようになり，苦手になる．&#xA;6月 ネタが決まる（先生が決めてくれた）のでとりあえずやっていく． 相変わらずミーティングでは嚙み合わないことが多かった． まあB4のはじめの頃はみんなこんなもんだろうと思い込んで過ごす． 「研究室 辛い」などで検索するようになる． 自分の打たれ弱さを実感する．&#xA;7月 院試休み． 研究室行かずに済んでラッキーくらいの気持ちでいた． 院試で研究室変えるのも手だったが負けた気分になるのでそのまま出した． 院試後はそのまま夏休みだったのでしばらく研究のことを忘れる．&#xA;10月 研究が再開する． 少しずつ進めていくが，コミュニケーションも含めて上手くいかないことが圧倒的に多くなり，常に辛い状態になる． この頃から常に死にたいと思うようになる． バイク運転中に信号無視した車が突っ込んできたらなぁみたいなことをずっと考えていた． しばらくそんな感じ．&#xA;同時期に，たまたまTwitter上でPaizaの広告を見かける． プログラミング能力を客観的に評価してもらえることがそれまでほとんどなかったことと， 研究が辛くなった時のために就職も考えないとということでとりあえずやってみる． Paizaは解答解説がないので，プログラミング力を付けるのには不向きだと思い， AtCoderをやり始める．&#xA;1月 論文を書き始める． 先生と添削のやり取りをするのだが，常に詰められてるように感じて辛くなる． 悪いことは続くもので，比較実験を行う必要があるのだが 既存研究が使ってたツールが上手く動かなくて全然実験が進まなくなる． 時間がないのでとりあえず不完全なまま卒論と研究会論文を書き上げる．&#xA;あと自分の実装を見てもらう機会があったのだが， あまりにもひどかったため研究が一段落着いたらツール作り直したほうが良いかもねって話になる． 今思えば草．&#xA;3月 研究会発表をする．&#xA;ツール作り直しをする． 作り直しに際して，研究室の実装が得意な先輩に付きっ切りで見てもらいながらプログラミングを一から叩き込んでもらう． この指導，本当にありがたく，プログラミングの基礎的ながらも重要な要素をいくつも教えてもらった． これがなかったら実装力が重視されるウェブエンジニアを職業にするという選択肢は取れなかったと思う．&#xA;M1 4月 同期が増える． またこれまで必要な日にしか研究室に来てなかった同期と，授業の関係でほぼ毎日顔を合わせてコミュニケーションを取るようになった． 他人とコミュニケーションを取るのは本当に大切で，研究の辛さが和らいでいく感じがした．</description>
    </item>
    <item>
      <title>情報処理学会論文誌に論文が採録された話</title>
      <link>https://t45k.github.io/blog/ipsj_journal/</link>
      <pubDate>Sun, 17 Jan 2021 17:38:48 +0900</pubDate>
      <guid>https://t45k.github.io/blog/ipsj_journal/</guid>
      <description>情報処理学会論文誌に卒論でやっていた研究が採録されました．情報はこちら．&#xA;論文誌とは 研究をしている以上，その成果を論文としてまとめる必要があります． 論文は大きく分けて以下の4種類に大別されます（僕が知る限り）．&#xA;論文誌論文 別名: ジャーナル（journal） 研究の最終成果を投稿する場 採録されると雑誌として掲載される 学術的貢献が求められる 査読が行われる（査読とは，投稿された論文が学術的な有用性，信頼性に足るものかを他の研究者が判断するプロセスを指す） 一般的に採録率は低いらしい．電子情報通信学会だと5割弱． 投稿時に惜しくも採録に至らないと判定されても，条件付き採録として論文の修正を求められることが多い． 国内だと情報処理学会や電子情報通信学会の論文誌に投稿することが多い 会議論文 別名: 予稿集（inproceedings） レベルがピンキリ．採録率もピンキリ 投稿目的もピンキリ．研究の最終成果発表から，アイデアの議論まで 基本的に査読がある トップの会議だと条件付き採録もあったりするらしい．普通は一発採録 採録されると開催場所での発表が求められる．海外旅行に行ける 学術的貢献だけじゃなくてアイデアの面白さ，発表映えするかとかも重要 発表がある都合上，投稿締め切りが設けられる 研究会論文 別名: 技術報告（report） 基本的に研究途中での成果の報告，アイデアの議論が目的 査読がない 発表がメイン．国内旅行に行ける 学位論文 別名: thesis 学位を取得するための論文 卒論，修論は査読がない ので，書けば大丈夫 今回は論文誌論文として採録されました．&#xA;道のり 2019年に書いた卒論の内容が2021年に採録されたことから察せられるように， 採録までの道のりが非常に長かったです． そもそも卒論を書いてから国際学会投稿，論文誌投稿とステップを踏むことが多いのですが， 僕の場合は作ったツールのクオリティが低すぎたため，ツールを作り直して実験をし直すとこから始まりました． この時プログラミングを指導してくれた一つ上の先輩には本当にお世話になりました． このプログラミング指導のおかげで修士では特にツール作りに苦労することがなく研究を進められました．&#xA;一方，既存のツールが動かないという問題のせいで実験は全然進みませんでした． 本当にM1のほとんどはツールを動かすのに苦心していたと思います． 結局技術的に強い友人に相談したところ，3日で動いたのでもったいない時間の使い方をしたなぁって気分になりました．&#xA;結局論文を投稿できたのが2020年の2月初めで，条件付き採録通知が来たのが11月， 修正と再投稿を行い，採録されたのが2021年の1月となりました．&#xA;感想としては，嬉しいのが半分，ようやく終わったと安心したのが半分です． 自分としてはこの研究テーマに自身がなかったので，早く終わらしたかったという気持ちもありました． 本当に時間がかかったので，採録されたのは達成感があります．&#xA;最後に，論文投稿のきっかけをくれた教授， 何度も論文を添削してくれた指導教員， そしてプログラミングを教えてくれた先輩に心から感謝します．</description>
    </item>
    <item>
      <title>APSEC2020に参加した話</title>
      <link>https://t45k.github.io/blog/apsec_2020/</link>
      <pubDate>Sat, 05 Dec 2020 00:12:03 +0900</pubDate>
      <guid>https://t45k.github.io/blog/apsec_2020/</guid>
      <description>12/2~4にオンラインで開催されたAPSECに参加してきました．&#xA;APSECとは APSEC2019に参加した話参照．&#xA;M2の4月終わりから研究し始めた，重複コードの修正支援ボットの論文をERA（Early Research Achievement）に投げました（論文）．&#xA;Acceptance rateはTechnical Researchが36.9%（45/122），ERAが46.2%（12/26）らしかったです．&#xA;ERAのacc. rateが高いのでレベルは推して知るべしという感じです．&#xA;感想 コロナの影響で，APSECに限らず国際会議は軒並みオンラインになってしまいました．&#xA;国際会議は，成果発表の他に観光という側面もあるので，そういった意味ではモチベーションはあまり高くなかったです．&#xA;一方，オンラインのおかげ喋る内容を覚えずに済むという利点もありました．&#xA;発表ですが，チェアの方すら質問しないという謎の現象が発生したおかげで，良くも悪くも英語での質疑応答がなかったです．&#xA;オンライン会議の悪い側面として，聴衆が参加しにくいというのが挙げられるかなと感じました．&#xA;現地開催の場合，現地にいるのであまり興味がないトラックに参加したり，その結果質疑が盛り上がったりすることがあると思います．&#xA;一方，オンラインの場合は自分と関係ない発表を聞く必要がないので，あまり盛り上がらないと感じました（僕も自分のトラック以外一切参加しませんでした）．&#xA;コロナが一刻も早く収束して，元のように会議ができればと思います．</description>
    </item>
    <item>
      <title>ICSE2020の面白そうな論文をピックアップしてみた</title>
      <link>https://t45k.github.io/blog/icse2020_abst/</link>
      <pubDate>Sat, 01 Feb 2020 18:59:35 +0900</pubDate>
      <guid>https://t45k.github.io/blog/icse2020_abst/</guid>
      <description>ICSEはInternational Conference of Software Engineeringの略です． ソフトウェア工学の国際学会の中で一番ランクが高い会議です． 会議自体は5月に行われるのですが，再録された論文一覧とアブストが公開されているので， 面白そうな論文をピックアップしてみました．&#xA;Is Rust Used Safely by Software Developers? RustはC，C++に取って代わることを目指した，メモリ安全性や実行速度を売りにしているプログラミング言語です． その特徴から，ソフトウェア開発界隈からの注目度が高まりつつあります．&#xA;この論文では，メモリ安全性を放棄する代わりにパフォーマンスを上げる Unsafe Rust についての調査を行っています．&#xA;Securing UnSafe Rust Programs with XRust これもRustの論文です．&#xA;XRustという，Unsafe Rustを通常のRustに移行する手法を提案しています．&#xA;ICSEに(Unsafe)Rustに関する論文が2本採択されていることから，ソフトウェア開発におけるRustの盛り上がり具合が分かります．&#xA;Big Code != Big Vocabulary: Open-Vocabulary Models for Source code キャッチーなタイトルだったのでピックアップしてみました．&#xA;変数名などのユーザー定義の識別子があるため，ソースコードは自然言語に比べて，大規模になるとコーパスが巨大になってしまいます． この論文では，コーパスがスケールするように，新しい言語モデルを提案しています．&#xA;DLFix: Context-based Code Transformation Learning for Automated Program Repair 最近のソフトウェア工学の大きなトピックの一つであるAPRの論文．&#xA;機械学習ベースのAPRは過去のバグ修正の学習に制限があるのに対して，DLFixでは学習のレイヤを2層に分けることでうまくこの制限を回避したらしいです．&#xA;A Cost-efficient Approach to Building in Continuous Integration CIの論文．&#xA;CIのコストはビルドを回している時間だけかかってしまい，かつ，CIの目的はバグを発見することなので， 多くのバグを発見するビルドをなるべく早い段階で回す手法を提案しています．&#xA;Here We Go Again: Why Is It Difficult for Developers to Learn Another Programming Language?</description>
    </item>
    <item>
      <title>APSEC2019に参加した話</title>
      <link>https://t45k.github.io/blog/apsec_2019/</link>
      <pubDate>Thu, 05 Dec 2019 20:19:32 +0900</pubDate>
      <guid>https://t45k.github.io/blog/apsec_2019/</guid>
      <description>12/3~5にマレーシアで開催されたAPSECに参加してきました．&#xA;APSECとは Asia-Pacific Software Engineering Conferenceの略です． 要するにソフトウェア工学の国際会議です． 会議ランクについては詳しくは知らないのですがそこまで高くないと思います． 投稿前に先生が，「APSECは塩漬けのネタを投稿するのにちょうど良い」と語っていたのが印象的でした．&#xA;マレーシアとは こんな国です．&#xA;マレーシア&#xA;+ 物価が安い&#xA;+ 時差が1時間&#xA;+ 英語が通じる&#xA;+- 暑い&#xA;- 酒を飲める場所がかなり限られる&#xA;- 用を足した後に紙を使わない文化&#xA;&amp;mdash; task (@getupmax) December 6, 2019 感想 投稿前はあまり気乗りしなかったし，正直通るとも思ってませんでしたが，結果的には国際学会で発表できて良かったなと感じました． 質疑対応がかなりグダッてしまったので英語力（特にリスニング）を鍛えるのが重要だと思いました．</description>
    </item>
  </channel>
</rss>
