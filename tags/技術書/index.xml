<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技術書 on T45K</title>
    <link>https://t45k.github.io/tags/%E6%8A%80%E8%A1%93%E6%9B%B8/</link>
    <description>Recent content in 技術書 on T45K</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 06 Aug 2024 22:44:20 +0900</lastBuildDate>
    <atom:link href="https://t45k.github.io/tags/%E6%8A%80%E8%A1%93%E6%9B%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「単体テストの考え方/使い方」読了</title>
      <link>https://t45k.github.io/blog/unit_testing_principles_practices_and_patterns/</link>
      <pubDate>Tue, 06 Aug 2024 22:44:20 +0900</pubDate>
      <guid>https://t45k.github.io/blog/unit_testing_principles_practices_and_patterns/</guid>
      <description>単体テストの考え方/使い方を読んだのでその感想。&#xA;単体テストの考え方/使い方 プロジェクトの持続可能な成長を実現するための戦略 [ Vladimir Khorikov ]&#xA;価格：4,488円（税込、送料無料) (2024/8/6時点)&#xA;楽天で購入 単体テストを中心に扱った本を読んだのは初めてだったのですが、 単体テストを用いてプロダクションコードを価値あるものにすることについて終始述べられていて良かったです。&#xA;単体テストは&#xA;実行時間が十分に短く かつ、テストの実行は隔離されている（=容易に並列実行できる） ものとして定義されています。&#xA;単体テストの実行方式はよくロンドン学派と古典学派に分類され、 後者は積極的にモックを使う、くらいの説明に留められていることが多いのですが、 これに関しても十分な説明がありました。&#xA;曰く、古典学派は単体の範囲をテストを実行するプロダクションコードの範囲と定め、 それ以外の部分はモックする、 ロンドン学派は単体の範囲をそれぞれのテストと定め、 DBといったテスト間で共有されうる依存に関してのみモックを使う、という定義をされていました。&#xA;ロンドン学派は単体テストでDBを扱うものだと思っていたので、この定義は初めて知りました。&#xA;また、テストしやすいアーキテクチャとして、 最初にクエリを行い、最後にコマンドを行う順番を推奨しており、 具体的に関数型アーキテクチャやヘキサゴナルアーキテクチャが紹介されていたのが良かったです。&#xA;スタブとモックの違いや、スタブ（クエリ）は検証しない、モック（コマンド）はするなどの説明は腹落ちしました。&#xA;本書では一貫して、&#xA;単体テストはリファクタリングに対する耐性を兼ね備えてなければならない そのために、単体テストは振る舞いをテストするべき を柱にしていたので良かったなと思いました。</description>
    </item>
    <item>
      <title>「継続的デリバリーのソフトウェア工学」読了</title>
      <link>https://t45k.github.io/blog/modern_software_engineering/</link>
      <pubDate>Tue, 25 Jun 2024 21:16:17 +0900</pubDate>
      <guid>https://t45k.github.io/blog/modern_software_engineering/</guid>
      <description>継続的デリバリーのソフトウェア工学（英題: Modern Software Engineering）を読んだ。&#xA;継続的デリバリーのソフトウェア工学　もっと早く、もっと良いソフトウェアを作るための秘訣 [ David Farley ]&#xA;価格：3,190円（税込、送料無料) (2024/6/25時点)&#xA;楽天で購入 ソフトウェア開発 本書ではソフトウェア開発の効果的かつ効率的な方法を探求していく。&#xA;より良いソフトウェア開発を行うために、開発者は「学びのエキスパート」かつ 「複雑さ管理のエキスパート」になるべき、と述べている。&#xA;学びのエキスパートになるためには、実験 → フィードバック → 実験 → &amp;hellip; のループを 高速で回すことが重要になる。&#xA;複雑さ管理のエキスパートになるためには&#xA;モジュラー性 抽象化 疎結合 の実現が不可欠になる。&#xA;そして、上記の要素を達成するために&#xA;テスト可能性 デプロイ可能性 スピード 変数の管理 継続的デリバリー が重要になる。&#xA;ソフトウェア工学 本書では、ソフトウェア開発は工学的に行われるべきだと述べられている。&#xA;これは、いわゆる工芸品のような、職人の一品物ではないということである。&#xA;また、科学のように厳密性を追求するのではなく、 あくまで開発に役立つプラクティスを追い求めるべき、ということでもある。&#xA;一方で、建築物のような製造工学に近い物ではなく、設計工学になるべきとも述べられている。&#xA;ソフトウェア開発が製造工学と違う点は、ソフトウェア開発は繰り返し作り直すことが容易である点である。&#xA;建築物は一度作ると作り直しが効かないため、事前の設計を念入りにやったうえで開発に入る。&#xA;一方で、ソフトウェアにおいてコードの書き直しは容易であるため、 設計 → 実装 → デプロイのループを早め、知見を得ることが重要になる。&#xA;上記のループがどの程度うまく行っているかを計る指標がFour Keysである。&#xA;学びの最適化 フィードバックを早く得られるようにする。&#xA;設計に対するフィードバック、実装に対するフィードバック、&amp;hellip;&#xA;小さく作って頻繁にマージ。&#xA;複雑さ管理の最適化 TDDでテスト可能性を確保し、モジュラー性を進める。&#xA;関心の分離。本質的な複雑さと付随的な複雑さ（ドメインの複雑さと技術的な複雑さ）を分離する。&#xA;運用に関わる変数の数を少なくして、デプロイを安定的にする。&#xA;感想 「ソフトウェア工学」とあったので多少学術的な内容を期待していたが、良い意味で裏切られた。&#xA;内容は「素早いフィードバックサイクルで効率的に学びましょう」と 「ソフトウェアの複雑さを管理しましょう」で、前者にスポットライトが当たっているのが斬新な気がする。&#xA;複雑さ管理には疎結合高凝集、それを達成するためのTDDと割と古典的な内容だったが、 デプロイ可能性を常に保ち、それを持って継続的デリバリーを実践していく的な部分は面白かった。</description>
    </item>
    <item>
      <title>「データモデリングでドメインを駆動する」読了</title>
      <link>https://t45k.github.io/blog/drive_domain_by_data_modeling/</link>
      <pubDate>Thu, 23 May 2024 00:48:17 +0900</pubDate>
      <guid>https://t45k.github.io/blog/drive_domain_by_data_modeling/</guid>
      <description>杉本さん著の「データモデリングでドメインを駆動する」を読んだ。&#xA;サブタイトルとして「基幹系システム」が含まれているが、 そもそも基幹系システムが何か分からない状態で読み始めたので、 そこからキャッチアップできて良かった。&#xA;（基幹系システムは、本当にビジネスを回すための一点もの？のシステムなんだなぁという理解）&#xA;他の技術書と違って、ビジネスそのものに突っ込んだ内容が多いのが面白かった。&#xA;「残」の話や、そこを起点に非同期なシステム構築などは、CQRSに通じるところがあるかもと思いながら読んでた。 その他、SoAとSoMの話など。&#xA;特定のドメインに着目して、ビジネス理解からそれを設計に繋げる方法までを書いた本は初めてだったので新鮮で良かった。&#xA;（難しい部分は読み飛ばしたので浅い感想しか出て来ないのが残念）&#xA;データモデリングでドメインを駆動する──分散／疎結合な基幹系システムに向けて [ 杉本 啓 ]&#xA;価格：3,740円（税込、送料無料) (2024/5/23時点)&#xA;楽天で購入 </description>
    </item>
    <item>
      <title>「なっとく！関数型プログラミング」読了</title>
      <link>https://t45k.github.io/blog/grokking_functional_programming/</link>
      <pubDate>Mon, 09 Oct 2023 23:22:01 +0900</pubDate>
      <guid>https://t45k.github.io/blog/grokking_functional_programming/</guid>
      <description>「なっとく！関数型プログラミング」を読んだ。&#xA;「純粋関数のシグネチャは嘘をつかない」が再三説明されていて良かった。 純粋関数を取り扱ううえで話題になりがちなIO処理なども丁寧に説明されていた。&#xA;9章の「値としてのストリーム」、10章の「並行プログラム」辺りから内容の厚さが段違いになり、 今回は残念なが読み飛ばさせてもらった。&#xA;なっとく！関数型プログラミング [ Michał Płachta ]&#xA;価格：3,740円（税込、送料無料) (2023/10/9時点)&#xA;楽天で購入 </description>
    </item>
    <item>
      <title>「データ指向プログラミング」読了</title>
      <link>https://t45k.github.io/blog/data_oriented_programming/</link>
      <pubDate>Sat, 01 Jul 2023 19:17:51 +0900</pubDate>
      <guid>https://t45k.github.io/blog/data_oriented_programming/</guid>
      <description>データ指向プログラミングを読んだ。&#xA;本書では、データ指向プログラミングと名付けられた、イミュータブルかつ汎用的なデータ構造で表現されたデータと 参照透過かつジェネリックな関数を使ったプログラミング方法を紹介している。&#xA;イミュータブルなデータと参照透過なメソッドを使ったプログラミングは普段から実践しており、 それらを使って柔軟なシステムを構築する方法を紹介している本書にはとても興味があった。 が、内容としてはかなりがっかりした。&#xA;本書では、データを表現するためにクラスではなくマップを使うことを前提において話が進んでいく。 つまり&#xA;data class Hoge(fuga: Int, piyo: String) val hoge = Hoge(0, &amp;#34;&amp;#34;) を&#xA;val hoge = mapOf( &amp;#34;fuga&amp;#34; to 0, &amp;#34;piyo&amp;#34; to &amp;#34;&amp;#34;, ) で書こうという内容だった。 この方法は確かに柔軟になるかもしれないが、静的型付けによる安全性を完全に無視しており、かなりがっかりした。&#xA;書籍内でもこのことについて触れられていて、以下のように紹介されていた。&#xA;OOP DOP 安全性 高い 低い 柔軟性 低い 高い 汎用性 低い 高い これは各要素を&amp;quot;高い&amp;quot;、&amp;ldquo;低い&amp;quot;のboolで表現しているDOPが良さそうに見えるだけで、 点数を付けるとDOPの安全性が-5000億くらいでトータだとOOPの方が良さそうだなと感じた （また、表では触れられていないが、フィールドアクセス時に保管が効かないので、コーディング中のストレスがとんでもないことになりそう）。&#xA;その他の感想:&#xA;+ JSON Schema便利そう&#xA;+ データの（デ）シリアライズが簡単なので、REPLが使いやすいのは良い&#xA;+ 汎用的な関数を作るという考え方は良さそう&#xA;- 複雑なJSON Schemaを書こうとすると辛そう。OOPならSpecificationパターンとか使える&#xA;- 色んなところでJSON Schema Validationが挟まりそう&#xA;- ポリモーフィズムで、実装忘れを静的に検知できないのが辛い&#xA;データ指向プログラミング [ Yehonathan Sharvit ]</description>
    </item>
    <item>
      <title>「ソフトウェア見積もり」読了</title>
      <link>https://t45k.github.io/blog/software_estimation/</link>
      <pubDate>Mon, 27 Mar 2023 22:28:20 +0900</pubDate>
      <guid>https://t45k.github.io/blog/software_estimation/</guid>
      <description>Steve McConnellの「ソフトウェア見積もり」を読んだ。&#xA;ソフトウェア見積り 人月の暗黙知を解き明かす [ スティーヴ・マコネル ]&#xA;価格：3,740円（税込、送料無料) (2023/3/27時点)&#xA;楽天で購入&#xA;普段の業務では特に締め切りが存在せず、スケジュールを意識してプロジェクトをやることがあまりないので、 自分で見積もりをやってみたいなぁと思ったのがきっかけ。&#xA;内容は一プログラマから専門家のためのものまで多岐に渡るが、現場で使える知識の提供に一貫している。&#xA;ところどころ読み飛ばしたが、特に参考になったトピックは以下の通り&#xA;範囲で見積もる 最初の方の見積もりほどブレる 「判断」より「計測」と「計算」が重要 過去のプロジェクトから見積もる 規模で見積もる 本自体は20年前近くのものなので、スクラムについては触れられていないが、反復的な開発に関する言及はある。&#xA;とりあえずラフなところから試してみたいなと思った。&#xA;あと、参考文献としてTSEとかISTとかの論文を引いてるのは凄い。</description>
    </item>
    <item>
      <title>「ちょうぜつソフトウェア開発入門」読了</title>
      <link>https://t45k.github.io/blog/chozetsu_software_design_introduction/</link>
      <pubDate>Sun, 12 Feb 2023 16:42:09 +0900</pubDate>
      <guid>https://t45k.github.io/blog/chozetsu_software_design_introduction/</guid>
      <description>ひさてるさん著の「ちょうぜつソフトウェア開発入門」を読んだ。 ひさてるさんは Twitter で「#ちょうぜつエンジニアめもりーちゃん」のハッシュタグで不定期に漫画を投稿している人で、そのシニカルな内容が個人的には気に入っている。&#xA;副題に「PHP で理解するオブジェクト指向の活用」とある通り、サンプルコードは PHP で書かれている。 内容は、Clean Architecture と TDD に対するひさてるさんの解釈という感じがした。 また、オブジェクト指向それ自体に意味はなく、それを活用した得られるもの（SOLID、CA、TDD）が大事なのだと述べている。&#xA;こういう著者の考えがダイレクトに出る本は、読み物としても楽しめるので良いなと感じた。 また、最終章の「アジャイル開発」は必読。</description>
    </item>
    <item>
      <title>「読みやすいコードのガイドライン」読了</title>
      <link>https://t45k.github.io/blog/readable_code_guideline/</link>
      <pubDate>Sun, 12 Feb 2023 16:23:45 +0900</pubDate>
      <guid>https://t45k.github.io/blog/readable_code_guideline/</guid>
      <description>LINE に勤めている石川さんが書いた「読みやすいコードのガイドライン」を読んだ。 副題の「持続可能なソフトウェア開発のために」に完全に同意。 継続的なソフトウェア開発には読みやすいコードが必須。&#xA;https://books.rakuten.co.jp/rb/17283015/?l-id=search-c-item-text-01&#xA;「リーダブルコード」などと比べて、少し突っ込んだ内容が多いような印象。 状態遷移や依存関係などの内容は、コードを書き始めたばかりの人には難しいかもしれないが、個人的にはとても勉強になった（特に 7 種類の結合度については初耳だった）。 コードレビューの仕方やコメントの書き方といった、取り上げられている書籍がとても少ない（と思う）事柄についても触れられていて、一読の価値があると感じた。 これらに関してはかなり現場に依存するので完全に同じことをするのは難しそうだが、こういう感じでやってて上手く回っているんだなぁと感じた。&#xA;内容自体もコンパクトにまとまっており、読みやすかった。</description>
    </item>
    <item>
      <title>「現場で役立つシステム設計の原則」読了</title>
      <link>https://t45k.github.io/blog/system_design_principle/</link>
      <pubDate>Sun, 16 Oct 2022 19:33:26 +0900</pubDate>
      <guid>https://t45k.github.io/blog/system_design_principle/</guid>
      <description>現場で役立つシステム設計の原則を読んだ。&#xA;現場で役立つシステム設計の原則 変更を楽で安全にするオブジェクト指向の実践技法 [ 増田亨 ]&#xA;価格：3234円（税込、送料無料) (2022/10/16時点)&#xA;楽天で購入&#xA;「ドメインモデルを設計して、それを中心にプログラミングしよう」という内容だった。&#xA;よく見かける依存性逆転の原則を中心としたオニオンアーキテクチャではなく、 三層アーキテクチャ（コントローラ層、サービス層、データソース層）にドメインモデルを組み込む話を中心にしていたのが特徴的だった。 現在自分のチームも三層アーキテクチャ+トランザクションスクリプト的な設計が主流になっていて、個人的には変更しづらさを感じていたので、この本で紹介されている方法を取り入れられれば良いなぁと感じた。</description>
    </item>
    <item>
      <title>「達人が教えるWebパフォーマンスチューニング」読了</title>
      <link>https://t45k.github.io/blog/web_perfomance_tuning/</link>
      <pubDate>Sun, 16 Oct 2022 19:27:18 +0900</pubDate>
      <guid>https://t45k.github.io/blog/web_perfomance_tuning/</guid>
      <description>2022 年の ISUCON に備えて「達人が教える Web パフォーマンスチューニング」を読んだ。&#xA;内容としては、web サーバや DB の負荷計測からチューニングに関して、ISUCON で使えるテクから現場で活用できる技術まで紹介していた。 パフォチュー経験がない状態で挑む ISUCON だったので、こういった本があってありがたかった。 残念ながら十分な時間をとることができず、全ての内容を消化できなかったが、何となく何をしたら良いかわかるくらいには持っていけたのでよかった。 なお、本番。&#xA;来年また読み直して、ISUCON に再挑戦したい。</description>
    </item>
    <item>
      <title>「Java言語で学ぶデザインパターン入門」読了</title>
      <link>https://t45k.github.io/blog/design_pattern/</link>
      <pubDate>Sat, 26 Feb 2022 11:53:22 +0900</pubDate>
      <guid>https://t45k.github.io/blog/design_pattern/</guid>
      <description>「Java 言語で学ぶデザインパターン入門」を読み終えました。 今回は内容を Kotlin で実装してみるということをやっていました。 リポジトリ&#xA;この本自体は割と前からある本なのですが、今回第 3 版が出て内容が新しくなったと聞き、思い切って購入しました。 4,290 円でした。 技術書は高い。&#xA;学生時代は研究室に古い版の本があり、何度か読んだのですが、読むだけでは全然理解できないままでいました。&#xA;やってみた感想ですが、自分が委譲の強力さを全然理解していなかったことを痛感しました。 普段は知らないまま使っていたパターン（Spring bean のプロキシなど）を理解する良い機会になりました。&#xA;一方、やはり Java だと冗長になる部分が多く、Kotlin で再実装すると、コード例よりもすっきり書ける場面が多かったです。</description>
    </item>
    <item>
      <title>「オブジェクト指向でなぜつくるのか」読了</title>
      <link>https://t45k.github.io/blog/how_objects_work/</link>
      <pubDate>Sun, 28 Nov 2021 19:12:57 +0900</pubDate>
      <guid>https://t45k.github.io/blog/how_objects_work/</guid>
      <description>オブジェクト指向でなぜつくるのかを読みました．&#xA;久々に技術書を買った気がします． 社会人になって自由に使えるお金が増えるのは良いなと思いました．&#xA;この本は，コードの書き方や新技術習得の指南というよりは， 基本に立ち返った内容になっています．&#xA;オブジェクト指向の成り立ちから始まり，オブジェクト指向のメリット，オブジェクト指向により何が可能になったか， などについて説明しています．&#xA;あまり堅い内容ではないため，寝る前などに軽く読んだりといった，普通の読み物としても楽しめました．&#xA;個人的には，「オブジェクト指向は必ずしも現実世界を投影してるわけではない」という主張がしっくりきました． 最終的には再利用，修正が容易でバグが発生しにくいプログラムを書くことが重要なのだなぁというごく当たり前のことを再認識する良い機会になりました．</description>
    </item>
  </channel>
</rss>
